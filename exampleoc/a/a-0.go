// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Package a is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: (devel): (ygot: v0.29.20)
using the following YANG input files:
  - ../pathgen/testdata/yang/openconfig-simple.yang
  - ../pathgen/testdata/yang/openconfig-withlistval.yang
  - ../pathgen/testdata/yang/openconfig-nested.yang

Imported modules were sourced from:
*/
package a

import (
	"reflect"

	oc "github.com/openconfig/ygnmi/exampleoc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Model_SingleKey_CounterPath represents the /openconfig-withlistval/model/a/single-key/state/counter YANG schema element.
type Model_SingleKey_CounterPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Model_SingleKey_CounterPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/state/counter YANG schema element.
type Model_SingleKey_CounterPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/counter"
//	Path from root:       "/model/a/single-key/state/counter"
func (n *Model_SingleKey_CounterPath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Model_SingleKey",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "counter"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Model_SingleKey).Counter
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/counter"
//	Path from root:       "/model/a/single-key/state/counter"
func (n *Model_SingleKey_CounterPathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Model_SingleKey",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "counter"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Model_SingleKey).Counter
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Model_SingleKey_CountersPath represents the /openconfig-withlistval/model/a/single-key/state/counters YANG schema element.
type Model_SingleKey_CountersPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Model_SingleKey_CountersPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/state/counters YANG schema element.
type Model_SingleKey_CountersPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/counters"
//	Path from root:       "/model/a/single-key/state/counters"
func (n *Model_SingleKey_CountersPath) State() ygnmi.SingletonQuery[[]float32] {
	return ygnmi.NewSingletonQuery[[]float32](
		"Model_SingleKey",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "counters"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]float32, bool) {
			ret := gs.(*oc.Model_SingleKey).Counters
			return binarySliceToFloatSlice(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/counters"
//	Path from root:       "/model/a/single-key/state/counters"
func (n *Model_SingleKey_CountersPathAny) State() ygnmi.WildcardQuery[[]float32] {
	return ygnmi.NewWildcardQuery[[]float32](
		"Model_SingleKey",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "counters"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]float32, bool) {
			ret := gs.(*oc.Model_SingleKey).Counters
			return binarySliceToFloatSlice(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Model_SingleKey_KeyPath represents the /openconfig-withlistval/model/a/single-key/state/key YANG schema element.
type Model_SingleKey_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Model_SingleKey_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/state/key YANG schema element.
type Model_SingleKey_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/key"
//	Path from root:       "/model/a/single-key/state/key"
func (n *Model_SingleKey_KeyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Model_SingleKey",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Model_SingleKey).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/key"
//	Path from root:       "/model/a/single-key/state/key"
func (n *Model_SingleKey_KeyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Model_SingleKey",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Model_SingleKey).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config/key"
//	Path from root:       "/model/a/single-key/config/key"
func (n *Model_SingleKey_KeyPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Model_SingleKey",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Model_SingleKey).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config/key"
//	Path from root:       "/model/a/single-key/config/key"
func (n *Model_SingleKey_KeyPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Model_SingleKey",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Model_SingleKey).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Model_SingleKey_ValuePath represents the /openconfig-withlistval/model/a/single-key/state/value YANG schema element.
type Model_SingleKey_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Model_SingleKey_ValuePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/state/value YANG schema element.
type Model_SingleKey_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/value"
//	Path from root:       "/model/a/single-key/state/value"
func (n *Model_SingleKey_ValuePath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"Model_SingleKey",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Model_SingleKey).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/value"
//	Path from root:       "/model/a/single-key/state/value"
func (n *Model_SingleKey_ValuePathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Model_SingleKey",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Model_SingleKey).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config/value"
//	Path from root:       "/model/a/single-key/config/value"
func (n *Model_SingleKey_ValuePath) Config() ygnmi.ConfigQuery[int64] {
	return ygnmi.NewConfigQuery[int64](
		"Model_SingleKey",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Model_SingleKey).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config/value"
//	Path from root:       "/model/a/single-key/config/value"
func (n *Model_SingleKey_ValuePathAny) Config() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Model_SingleKey",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Model_SingleKey).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Model_SingleKeyPath represents the /openconfig-withlistval/model/a/single-key YANG schema element.
type Model_SingleKeyPath struct {
	*ygnmi.NodePath
}

// Model_SingleKeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key YANG schema element.
type Model_SingleKeyPathAny struct {
	*ygnmi.NodePath
}

// Model_SingleKeyPathMap represents the /openconfig-withlistval/model/a/single-key YANG schema element.
type Model_SingleKeyPathMap struct {
	*ygnmi.NodePath
}

// Model_SingleKeyPathMapAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key YANG schema element.
type Model_SingleKeyPathMapAny struct {
	*ygnmi.NodePath
}

// Counter (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/counter"
//	Path from root:       "/model/a/single-key/state/counter"
func (n *Model_SingleKeyPath) Counter() *Model_SingleKey_CounterPath {
	ps := &Model_SingleKey_CounterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counter"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Counter (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/counter"
//	Path from root:       "/model/a/single-key/state/counter"
func (n *Model_SingleKeyPathAny) Counter() *Model_SingleKey_CounterPathAny {
	ps := &Model_SingleKey_CounterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counter"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Counters (leaf-list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/counters"
//	Path from root:       "/model/a/single-key/state/counters"
func (n *Model_SingleKeyPath) Counters() *Model_SingleKey_CountersPath {
	ps := &Model_SingleKey_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Counters (leaf-list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/counters"
//	Path from root:       "/model/a/single-key/state/counters"
func (n *Model_SingleKeyPathAny) Counters() *Model_SingleKey_CountersPathAny {
	ps := &Model_SingleKey_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "*/key"
//	Path from root:       "/model/a/single-key/*/key"
func (n *Model_SingleKeyPath) Key() *Model_SingleKey_KeyPath {
	ps := &Model_SingleKey_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "*/key"
//	Path from root:       "/model/a/single-key/*/key"
func (n *Model_SingleKeyPathAny) Key() *Model_SingleKey_KeyPathAny {
	ps := &Model_SingleKey_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NestedListAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "nested-lists/nested-list"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list"
func (n *Model_SingleKeyPath) NestedListAny() *Model_SingleKey_NestedListPathAny {
	ps := &Model_SingleKey_NestedListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"nested-lists", "nested-list"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
	return ps
}

// NestedListAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "nested-lists/nested-list"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list"
func (n *Model_SingleKeyPathAny) NestedListAny() *Model_SingleKey_NestedListPathAny {
	ps := &Model_SingleKey_NestedListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"nested-lists", "nested-list"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
	return ps
}

// NestedList (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "nested-lists/nested-list"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list"
//
//	Key: string
func (n *Model_SingleKeyPath) NestedList(Key string) *Model_SingleKey_NestedListPath {
	ps := &Model_SingleKey_NestedListPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"nested-lists", "nested-list"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
	return ps
}

// NestedList (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "nested-lists/nested-list"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list"
//
//	Key: string
func (n *Model_SingleKeyPathAny) NestedList(Key string) *Model_SingleKey_NestedListPathAny {
	ps := &Model_SingleKey_NestedListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"nested-lists", "nested-list"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
	return ps
}

// NestedListMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "nested-lists/nested-list"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list"
func (n *Model_SingleKeyPath) NestedListMap() *Model_SingleKey_NestedListPathMap {
	ps := &Model_SingleKey_NestedListPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"nested-lists"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NestedListMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "nested-lists/nested-list"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list"
func (n *Model_SingleKeyPathAny) NestedListMap() *Model_SingleKey_NestedListPathMapAny {
	ps := &Model_SingleKey_NestedListPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"nested-lists"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OrderedListMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "ordered-lists/ordered-list"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list"
func (n *Model_SingleKeyPath) OrderedListMap() *Model_SingleKey_OrderedListPathMap {
	ps := &Model_SingleKey_OrderedListPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"ordered-lists"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OrderedListMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "ordered-lists/ordered-list"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list"
func (n *Model_SingleKeyPathAny) OrderedListMap() *Model_SingleKey_OrderedListPathMapAny {
	ps := &Model_SingleKey_OrderedListPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ordered-lists"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SingleKeyMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "inner-a/single-key"
//	Path from root:       "/model/a/single-key/inner-a/single-key"
func (n *Model_SingleKeyPath) SingleKeyMap() *Model_SingleKey_SingleKeyPathMap {
	ps := &Model_SingleKey_SingleKeyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"inner-a"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SingleKeyMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "inner-a/single-key"
//	Path from root:       "/model/a/single-key/inner-a/single-key"
func (n *Model_SingleKeyPathAny) SingleKeyMap() *Model_SingleKey_SingleKeyPathMapAny {
	ps := &Model_SingleKey_SingleKeyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"inner-a"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "*/value"
//	Path from root:       "/model/a/single-key/*/value"
func (n *Model_SingleKeyPath) Value() *Model_SingleKey_ValuePath {
	ps := &Model_SingleKey_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "*/value"
//	Path from root:       "/model/a/single-key/*/value"
func (n *Model_SingleKeyPathAny) Value() *Model_SingleKey_ValuePathAny {
	ps := &Model_SingleKey_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_SingleKeyPath) State() ygnmi.SingletonQuery[*oc.Model_SingleKey] {
	return ygnmi.NewSingletonQuery[*oc.Model_SingleKey](
		"Model_SingleKey",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_SingleKeyPathAny) State() ygnmi.WildcardQuery[*oc.Model_SingleKey] {
	return ygnmi.NewWildcardQuery[*oc.Model_SingleKey](
		"Model_SingleKey",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_SingleKeyPath) Config() ygnmi.ConfigQuery[*oc.Model_SingleKey] {
	return ygnmi.NewConfigQuery[*oc.Model_SingleKey](
		"Model_SingleKey",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_SingleKeyPathAny) Config() ygnmi.WildcardQuery[*oc.Model_SingleKey] {
	return ygnmi.NewWildcardQuery[*oc.Model_SingleKey](
		"Model_SingleKey",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_SingleKeyPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Model_SingleKey] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Model_SingleKey](
		"Model",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Model_SingleKey, bool) {
			ret := gs.(*oc.Model).SingleKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:a"},
			PostRelPath: []string{"openconfig-withlistval:single-key"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_SingleKeyPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Model_SingleKey] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Model_SingleKey](
		"Model",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Model_SingleKey, bool) {
			ret := gs.(*oc.Model).SingleKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:a"},
			PostRelPath: []string{"openconfig-withlistval:single-key"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_SingleKeyPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Model_SingleKey] {
	return ygnmi.NewConfigQuery[map[string]*oc.Model_SingleKey](
		"Model",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Model_SingleKey, bool) {
			ret := gs.(*oc.Model).SingleKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:a"},
			PostRelPath: []string{"openconfig-withlistval:single-key"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_SingleKeyPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Model_SingleKey] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Model_SingleKey](
		"Model",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Model_SingleKey, bool) {
			ret := gs.(*oc.Model).SingleKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:a"},
			PostRelPath: []string{"openconfig-withlistval:single-key"},
		},
	)
}

// Model_SingleKey_NestedList_KeyPath represents the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list/state/key YANG schema element.
type Model_SingleKey_NestedList_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Model_SingleKey_NestedList_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list/state/key YANG schema element.
type Model_SingleKey_NestedList_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/key"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/state/key"
func (n *Model_SingleKey_NestedList_KeyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Model_SingleKey_NestedList",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Model_SingleKey_NestedList).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey_NestedList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/key"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/state/key"
func (n *Model_SingleKey_NestedList_KeyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Model_SingleKey_NestedList",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Model_SingleKey_NestedList).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey_NestedList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config/key"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/config/key"
func (n *Model_SingleKey_NestedList_KeyPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Model_SingleKey_NestedList",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Model_SingleKey_NestedList).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey_NestedList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config/key"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/config/key"
func (n *Model_SingleKey_NestedList_KeyPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Model_SingleKey_NestedList",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Model_SingleKey_NestedList).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey_NestedList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Model_SingleKey_NestedList_ValuePath represents the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list/state/value YANG schema element.
type Model_SingleKey_NestedList_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Model_SingleKey_NestedList_ValuePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list/state/value YANG schema element.
type Model_SingleKey_NestedList_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/value"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/state/value"
func (n *Model_SingleKey_NestedList_ValuePath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"Model_SingleKey_NestedList",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Model_SingleKey_NestedList).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey_NestedList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/value"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/state/value"
func (n *Model_SingleKey_NestedList_ValuePathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Model_SingleKey_NestedList",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Model_SingleKey_NestedList).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey_NestedList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config/value"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/config/value"
func (n *Model_SingleKey_NestedList_ValuePath) Config() ygnmi.ConfigQuery[int64] {
	return ygnmi.NewConfigQuery[int64](
		"Model_SingleKey_NestedList",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Model_SingleKey_NestedList).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey_NestedList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config/value"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/config/value"
func (n *Model_SingleKey_NestedList_ValuePathAny) Config() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Model_SingleKey_NestedList",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Model_SingleKey_NestedList).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey_NestedList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Model_SingleKey_NestedListPath represents the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list YANG schema element.
type Model_SingleKey_NestedListPath struct {
	*ygnmi.NodePath
}

// Model_SingleKey_NestedListPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list YANG schema element.
type Model_SingleKey_NestedListPathAny struct {
	*ygnmi.NodePath
}

// Model_SingleKey_NestedListPathMap represents the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list YANG schema element.
type Model_SingleKey_NestedListPathMap struct {
	*ygnmi.NodePath
}

// Model_SingleKey_NestedListPathMapAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list YANG schema element.
type Model_SingleKey_NestedListPathMapAny struct {
	*ygnmi.NodePath
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "*/key"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/*/key"
func (n *Model_SingleKey_NestedListPath) Key() *Model_SingleKey_NestedList_KeyPath {
	ps := &Model_SingleKey_NestedList_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "*/key"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/*/key"
func (n *Model_SingleKey_NestedListPathAny) Key() *Model_SingleKey_NestedList_KeyPathAny {
	ps := &Model_SingleKey_NestedList_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "*/value"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/*/value"
func (n *Model_SingleKey_NestedListPath) Value() *Model_SingleKey_NestedList_ValuePath {
	ps := &Model_SingleKey_NestedList_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "*/value"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/*/value"
func (n *Model_SingleKey_NestedListPathAny) Value() *Model_SingleKey_NestedList_ValuePathAny {
	ps := &Model_SingleKey_NestedList_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_NestedListPath) State() ygnmi.SingletonQuery[*oc.Model_SingleKey_NestedList] {
	return ygnmi.NewSingletonQuery[*oc.Model_SingleKey_NestedList](
		"Model_SingleKey_NestedList",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_NestedListPathAny) State() ygnmi.WildcardQuery[*oc.Model_SingleKey_NestedList] {
	return ygnmi.NewWildcardQuery[*oc.Model_SingleKey_NestedList](
		"Model_SingleKey_NestedList",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_NestedListPath) Config() ygnmi.ConfigQuery[*oc.Model_SingleKey_NestedList] {
	return ygnmi.NewConfigQuery[*oc.Model_SingleKey_NestedList](
		"Model_SingleKey_NestedList",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_NestedListPathAny) Config() ygnmi.WildcardQuery[*oc.Model_SingleKey_NestedList] {
	return ygnmi.NewWildcardQuery[*oc.Model_SingleKey_NestedList](
		"Model_SingleKey_NestedList",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_NestedListPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Model_SingleKey_NestedList] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Model_SingleKey_NestedList](
		"Model_SingleKey",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Model_SingleKey_NestedList, bool) {
			ret := gs.(*oc.Model_SingleKey).NestedList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:nested-lists"},
			PostRelPath: []string{"openconfig-withlistval:nested-list"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_NestedListPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Model_SingleKey_NestedList] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Model_SingleKey_NestedList](
		"Model_SingleKey",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Model_SingleKey_NestedList, bool) {
			ret := gs.(*oc.Model_SingleKey).NestedList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:nested-lists"},
			PostRelPath: []string{"openconfig-withlistval:nested-list"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_NestedListPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Model_SingleKey_NestedList] {
	return ygnmi.NewConfigQuery[map[string]*oc.Model_SingleKey_NestedList](
		"Model_SingleKey",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Model_SingleKey_NestedList, bool) {
			ret := gs.(*oc.Model_SingleKey).NestedList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:nested-lists"},
			PostRelPath: []string{"openconfig-withlistval:nested-list"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_NestedListPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Model_SingleKey_NestedList] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Model_SingleKey_NestedList](
		"Model_SingleKey",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Model_SingleKey_NestedList, bool) {
			ret := gs.(*oc.Model_SingleKey).NestedList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:nested-lists"},
			PostRelPath: []string{"openconfig-withlistval:nested-list"},
		},
	)
}

// Model_SingleKey_OrderedListPath represents the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list YANG schema element.
type Model_SingleKey_OrderedListPath struct {
	*ygnmi.NodePath
}

// Model_SingleKey_OrderedListPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list YANG schema element.
type Model_SingleKey_OrderedListPathAny struct {
	*ygnmi.NodePath
}

// Model_SingleKey_OrderedListPathMap represents the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list YANG schema element.
type Model_SingleKey_OrderedListPathMap struct {
	*ygnmi.NodePath
}

// Model_SingleKey_OrderedListPathMapAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list YANG schema element.
type Model_SingleKey_OrderedListPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_OrderedListPathMap) State() ygnmi.SingletonQuery[*oc.Model_SingleKey_OrderedList_OrderedMap] {
	return ygnmi.NewSingletonQuery[*oc.Model_SingleKey_OrderedList_OrderedMap](
		"Model_SingleKey",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.Model_SingleKey_OrderedList_OrderedMap, bool) {
			ret := gs.(*oc.Model_SingleKey).OrderedList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:ordered-lists"},
			PostRelPath: []string{"openconfig-withlistval:ordered-list"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_OrderedListPathMapAny) State() ygnmi.WildcardQuery[*oc.Model_SingleKey_OrderedList_OrderedMap] {
	return ygnmi.NewWildcardQuery[*oc.Model_SingleKey_OrderedList_OrderedMap](
		"Model_SingleKey",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.Model_SingleKey_OrderedList_OrderedMap, bool) {
			ret := gs.(*oc.Model_SingleKey).OrderedList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:ordered-lists"},
			PostRelPath: []string{"openconfig-withlistval:ordered-list"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_OrderedListPathMap) Config() ygnmi.ConfigQuery[*oc.Model_SingleKey_OrderedList_OrderedMap] {
	return ygnmi.NewConfigQuery[*oc.Model_SingleKey_OrderedList_OrderedMap](
		"Model_SingleKey",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.Model_SingleKey_OrderedList_OrderedMap, bool) {
			ret := gs.(*oc.Model_SingleKey).OrderedList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:ordered-lists"},
			PostRelPath: []string{"openconfig-withlistval:ordered-list"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_OrderedListPathMapAny) Config() ygnmi.WildcardQuery[*oc.Model_SingleKey_OrderedList_OrderedMap] {
	return ygnmi.NewWildcardQuery[*oc.Model_SingleKey_OrderedList_OrderedMap](
		"Model_SingleKey",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.Model_SingleKey_OrderedList_OrderedMap, bool) {
			ret := gs.(*oc.Model_SingleKey).OrderedList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:ordered-lists"},
			PostRelPath: []string{"openconfig-withlistval:ordered-list"},
		},
	)
}

// Model_SingleKey_SingleKeyPath represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key YANG schema element.
type Model_SingleKey_SingleKeyPath struct {
	*ygnmi.NodePath
}

// Model_SingleKey_SingleKeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a/single-key YANG schema element.
type Model_SingleKey_SingleKeyPathAny struct {
	*ygnmi.NodePath
}

// Model_SingleKey_SingleKeyPathMap represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key YANG schema element.
type Model_SingleKey_SingleKeyPathMap struct {
	*ygnmi.NodePath
}

// Model_SingleKey_SingleKeyPathMapAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a/single-key YANG schema element.
type Model_SingleKey_SingleKeyPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_SingleKeyPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Model_SingleKey_SingleKey] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Model_SingleKey_SingleKey](
		"Model_SingleKey",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Model_SingleKey_SingleKey, bool) {
			ret := gs.(*oc.Model_SingleKey).SingleKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:inner-a"},
			PostRelPath: []string{"openconfig-withlistval:single-key"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_SingleKeyPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Model_SingleKey_SingleKey] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Model_SingleKey_SingleKey](
		"Model_SingleKey",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Model_SingleKey_SingleKey, bool) {
			ret := gs.(*oc.Model_SingleKey).SingleKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:inner-a"},
			PostRelPath: []string{"openconfig-withlistval:single-key"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_SingleKeyPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Model_SingleKey_SingleKey] {
	return ygnmi.NewConfigQuery[map[string]*oc.Model_SingleKey_SingleKey](
		"Model_SingleKey",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Model_SingleKey_SingleKey, bool) {
			ret := gs.(*oc.Model_SingleKey).SingleKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:inner-a"},
			PostRelPath: []string{"openconfig-withlistval:single-key"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_SingleKeyPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Model_SingleKey_SingleKey] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Model_SingleKey_SingleKey](
		"Model_SingleKey",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Model_SingleKey_SingleKey, bool) {
			ret := gs.(*oc.Model_SingleKey).SingleKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:inner-a"},
			PostRelPath: []string{"openconfig-withlistval:single-key"},
		},
	)
}
