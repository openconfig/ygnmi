// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Package exampleoc is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /usr/local/google/home/dgrau/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- ../../pathgen/testdata/yang/openconfig-simple.yang
	- ../../pathgen/testdata/yang/openconfig-withlistval.yang
Imported modules were sourced from:
	- ../../pathgen/testdata/yang/...
*/
package exampleoc

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Device{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	Model           *Model           `path:"model" module:"openconfig-withlistval"`
	Parent          *Parent          `path:"parent" module:"openconfig-simple"`
	RemoteContainer *RemoteContainer `path:"remote-container" module:"openconfig-simple"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// GetOrCreateModel retrieves the value of the Model field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateModel() *Model {
	if t.Model != nil {
		return t.Model
	}
	t.Model = &Model{}
	return t.Model
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateParent() *Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &Parent{}
	return t.Parent
}

// GetOrCreateRemoteContainer retrieves the value of the RemoteContainer field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateRemoteContainer() *RemoteContainer {
	if t.RemoteContainer != nil {
		return t.RemoteContainer
	}
	t.RemoteContainer = &RemoteContainer{}
	return t.RemoteContainer
}

// GetModel returns the value of the Model struct pointer
// from Device. If the receiver or the field Model is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetModel() *Model {
	if t != nil && t.Model != nil {
		return t.Model
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from Device. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetParent() *Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRemoteContainer returns the value of the RemoteContainer struct pointer
// from Device. If the receiver or the field RemoteContainer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetRemoteContainer() *RemoteContainer {
	if t != nil && t.RemoteContainer != nil {
		return t.RemoteContainer
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Device
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Device) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Model.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.RemoteContainer.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Device.
func (*Device) ΛBelongingModule() string {
	return ""
}

// Model represents the /openconfig-withlistval/model YANG schema element.
type Model struct {
	MultiKey  map[Model_MultiKey_Key]*Model_MultiKey `path:"b/multi-key" module:"openconfig-withlistval/openconfig-withlistval"`
	SingleKey map[string]*Model_SingleKey            `path:"a/single-key" module:"openconfig-withlistval/openconfig-withlistval"`
}

// IsYANGGoStruct ensures that Model implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Model) IsYANGGoStruct() {}

// Model_MultiKey_Key represents the key for list MultiKey of element /openconfig-withlistval/model.
type Model_MultiKey_Key struct {
	Key1 uint32 `path:"key1"`
	Key2 uint64 `path:"key2"`
}

// NewMultiKey creates a new entry in the MultiKey list of the
// Model struct. The keys of the list are populated from the input
// arguments.
func (t *Model) NewMultiKey(Key1 uint32, Key2 uint64) (*Model_MultiKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MultiKey == nil {
		t.MultiKey = make(map[Model_MultiKey_Key]*Model_MultiKey)
	}

	key := Model_MultiKey_Key{
		Key1: Key1,
		Key2: Key2,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MultiKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MultiKey", key)
	}

	t.MultiKey[key] = &Model_MultiKey{
		Key1: &Key1,
		Key2: &Key2,
	}

	return t.MultiKey[key], nil
}

// RenameMultiKey renames an entry in the list MultiKey within
// the Model struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Model) RenameMultiKey(oldK, newK Model_MultiKey_Key) error {
	if _, ok := t.MultiKey[newK]; ok {
		return fmt.Errorf("key %v already exists in MultiKey", newK)
	}

	e, ok := t.MultiKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MultiKey", oldK)
	}
	e.Key1 = &newK.Key1
	e.Key2 = &newK.Key2

	t.MultiKey[newK] = e
	delete(t.MultiKey, oldK)
	return nil
}

// GetOrCreateMultiKey retrieves the value with the specified keys from
// the receiver Model. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Model) GetOrCreateMultiKey(Key1 uint32, Key2 uint64) *Model_MultiKey {

	key := Model_MultiKey_Key{
		Key1: Key1,
		Key2: Key2,
	}

	if v, ok := t.MultiKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMultiKey(Key1, Key2)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMultiKey got unexpected error: %v", err))
	}
	return v
}

// GetMultiKey retrieves the value with the specified key from
// the MultiKey map field of Model. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Model) GetMultiKey(Key1 uint32, Key2 uint64) *Model_MultiKey {

	if t == nil {
		return nil
	}

	key := Model_MultiKey_Key{
		Key1: Key1,
		Key2: Key2,
	}

	if lm, ok := t.MultiKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteMultiKey deletes the value with the specified keys from
// the receiver Model. If there is no such element, the function
// is a no-op.
func (t *Model) DeleteMultiKey(Key1 uint32, Key2 uint64) {
	key := Model_MultiKey_Key{
		Key1: Key1,
		Key2: Key2,
	}

	delete(t.MultiKey, key)
}

// AppendMultiKey appends the supplied Model_MultiKey struct to the
// list MultiKey of Model. If the key value(s) specified in
// the supplied Model_MultiKey already exist in the list, an error is
// returned.
func (t *Model) AppendMultiKey(v *Model_MultiKey) error {
	if v.Key1 == nil {
		return fmt.Errorf("invalid nil key for Key1")
	}

	if v.Key2 == nil {
		return fmt.Errorf("invalid nil key for Key2")
	}

	key := Model_MultiKey_Key{
		Key1: *v.Key1,
		Key2: *v.Key2,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MultiKey == nil {
		t.MultiKey = make(map[Model_MultiKey_Key]*Model_MultiKey)
	}

	if _, ok := t.MultiKey[key]; ok {
		return fmt.Errorf("duplicate key for list MultiKey %v", key)
	}

	t.MultiKey[key] = v
	return nil
}

// NewSingleKey creates a new entry in the SingleKey list of the
// Model struct. The keys of the list are populated from the input
// arguments.
func (t *Model) NewSingleKey(Key string) (*Model_SingleKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SingleKey == nil {
		t.SingleKey = make(map[string]*Model_SingleKey)
	}

	key := Key

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SingleKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SingleKey", key)
	}

	t.SingleKey[key] = &Model_SingleKey{
		Key: &Key,
	}

	return t.SingleKey[key], nil
}

// RenameSingleKey renames an entry in the list SingleKey within
// the Model struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Model) RenameSingleKey(oldK, newK string) error {
	if _, ok := t.SingleKey[newK]; ok {
		return fmt.Errorf("key %v already exists in SingleKey", newK)
	}

	e, ok := t.SingleKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SingleKey", oldK)
	}
	e.Key = &newK

	t.SingleKey[newK] = e
	delete(t.SingleKey, oldK)
	return nil
}

// GetOrCreateSingleKey retrieves the value with the specified keys from
// the receiver Model. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Model) GetOrCreateSingleKey(Key string) *Model_SingleKey {

	key := Key

	if v, ok := t.SingleKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSingleKey(Key)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSingleKey got unexpected error: %v", err))
	}
	return v
}

// GetSingleKey retrieves the value with the specified key from
// the SingleKey map field of Model. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Model) GetSingleKey(Key string) *Model_SingleKey {

	if t == nil {
		return nil
	}

	key := Key

	if lm, ok := t.SingleKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteSingleKey deletes the value with the specified keys from
// the receiver Model. If there is no such element, the function
// is a no-op.
func (t *Model) DeleteSingleKey(Key string) {
	key := Key

	delete(t.SingleKey, key)
}

// AppendSingleKey appends the supplied Model_SingleKey struct to the
// list SingleKey of Model. If the key value(s) specified in
// the supplied Model_SingleKey already exist in the list, an error is
// returned.
func (t *Model) AppendSingleKey(v *Model_SingleKey) error {
	if v.Key == nil {
		return fmt.Errorf("invalid nil key received for Key")
	}

	key := *v.Key

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SingleKey == nil {
		t.SingleKey = make(map[string]*Model_SingleKey)
	}

	if _, ok := t.SingleKey[key]; ok {
		return fmt.Errorf("duplicate key for list SingleKey %v", key)
	}

	t.SingleKey[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Model
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Model) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MultiKey {
		e.PopulateDefaults()
	}
	for _, e := range t.SingleKey {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Model) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Model"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Model) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Model) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Model.
func (*Model) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// Model_MultiKey represents the /openconfig-withlistval/model/b/multi-key YANG schema element.
type Model_MultiKey struct {
	Key1 *uint32 `path:"state/key1|key1" module:"openconfig-withlistval/openconfig-withlistval|openconfig-withlistval" shadow-path:"config/key1|key1" shadow-module:"openconfig-withlistval/openconfig-withlistval|openconfig-withlistval"`
	Key2 *uint64 `path:"state/key2|key2" module:"openconfig-withlistval/openconfig-withlistval|openconfig-withlistval" shadow-path:"config/key2|key2" shadow-module:"openconfig-withlistval/openconfig-withlistval|openconfig-withlistval"`
}

// IsYANGGoStruct ensures that Model_MultiKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Model_MultiKey) IsYANGGoStruct() {}

// GetKey1 retrieves the value of the leaf Key1 from the Model_MultiKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key1 is set, it can
// safely use t.GetKey1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key1 == nil' before retrieving the leaf's value.
func (t *Model_MultiKey) GetKey1() uint32 {
	if t == nil || t.Key1 == nil {
		return 0
	}
	return *t.Key1
}

// GetKey2 retrieves the value of the leaf Key2 from the Model_MultiKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key2 is set, it can
// safely use t.GetKey2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key2 == nil' before retrieving the leaf's value.
func (t *Model_MultiKey) GetKey2() uint64 {
	if t == nil || t.Key2 == nil {
		return 0
	}
	return *t.Key2
}

// PopulateDefaults recursively populates unset leaf fields in the Model_MultiKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Model_MultiKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Model_MultiKey struct, which is a YANG list entry.
func (t *Model_MultiKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Key1 == nil {
		return nil, fmt.Errorf("nil value for key Key1")
	}

	if t.Key2 == nil {
		return nil, fmt.Errorf("nil value for key Key2")
	}

	return map[string]interface{}{
		"key1": *t.Key1,
		"key2": *t.Key2,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Model_MultiKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Model_MultiKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Model_MultiKey) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Model_MultiKey) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Model_MultiKey.
func (*Model_MultiKey) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// Model_SingleKey represents the /openconfig-withlistval/model/a/single-key YANG schema element.
type Model_SingleKey struct {
	Key   *string `path:"state/key|key" module:"openconfig-withlistval/openconfig-withlistval|openconfig-withlistval" shadow-path:"config/key|key" shadow-module:"openconfig-withlistval/openconfig-withlistval|openconfig-withlistval"`
	Value *int64  `path:"state/value" module:"openconfig-withlistval/openconfig-withlistval" shadow-path:"config/value" shadow-module:"openconfig-withlistval/openconfig-withlistval"`
}

// IsYANGGoStruct ensures that Model_SingleKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Model_SingleKey) IsYANGGoStruct() {}

// GetKey retrieves the value of the leaf Key from the Model_SingleKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *Model_SingleKey) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// GetValue retrieves the value of the leaf Value from the Model_SingleKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *Model_SingleKey) GetValue() int64 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the Model_SingleKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Model_SingleKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Model_SingleKey struct, which is a YANG list entry.
func (t *Model_SingleKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Key == nil {
		return nil, fmt.Errorf("nil value for key Key")
	}

	return map[string]interface{}{
		"key": *t.Key,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Model_SingleKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Model_SingleKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Model_SingleKey) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Model_SingleKey) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Model_SingleKey.
func (*Model_SingleKey) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// Parent represents the /openconfig-simple/parent YANG schema element.
type Parent struct {
	Child *Parent_Child `path:"child" module:"openconfig-simple"`
}

// IsYANGGoStruct ensures that Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Parent) IsYANGGoStruct() {}

// GetOrCreateChild retrieves the value of the Child field
// or returns the existing field if it already exists.
func (t *Parent) GetOrCreateChild() *Parent_Child {
	if t.Child != nil {
		return t.Child
	}
	t.Child = &Parent_Child{}
	return t.Child
}

// GetChild returns the value of the Child struct pointer
// from Parent. If the receiver or the field Child is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Parent) GetChild() *Parent_Child {
	if t != nil && t.Child != nil {
		return t.Child
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Child.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Parent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Parent) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Parent.
func (*Parent) ΛBelongingModule() string {
	return "openconfig-simple"
}

// Parent_Child represents the /openconfig-simple/parent/child YANG schema element.
type Parent_Child struct {
	Four  Binary        `path:"state/four" module:"openconfig-simple/openconfig-simple" shadow-path:"config/four" shadow-module:"openconfig-simple/openconfig-simple"`
	One   *string       `path:"state/one" module:"openconfig-simple/openconfig-simple" shadow-path:"config/one" shadow-module:"openconfig-simple/openconfig-simple"`
	Three E_Child_Three `path:"state/three" module:"openconfig-simple/openconfig-simple" shadow-path:"config/three" shadow-module:"openconfig-simple/openconfig-simple"`
	Two   *string       `path:"state/two" module:"openconfig-simple/openconfig-simple"`
}

// IsYANGGoStruct ensures that Parent_Child implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Parent_Child) IsYANGGoStruct() {}

// GetFour retrieves the value of the leaf Four from the Parent_Child
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Four is set, it can
// safely use t.GetFour() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Four == nil' before retrieving the leaf's value.
func (t *Parent_Child) GetFour() Binary {
	if t == nil || t.Four == nil {
		return nil
	}
	return t.Four
}

// GetOne retrieves the value of the leaf One from the Parent_Child
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if One is set, it can
// safely use t.GetOne() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.One == nil' before retrieving the leaf's value.
func (t *Parent_Child) GetOne() string {
	if t == nil || t.One == nil {
		return ""
	}
	return *t.One
}

// GetThree retrieves the value of the leaf Three from the Parent_Child
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Three is set, it can
// safely use t.GetThree() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Three == nil' before retrieving the leaf's value.
func (t *Parent_Child) GetThree() E_Child_Three {
	if t == nil || t.Three == 0 {
		return 0
	}
	return t.Three
}

// GetTwo retrieves the value of the leaf Two from the Parent_Child
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Two is set, it can
// safely use t.GetTwo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Two == nil' before retrieving the leaf's value.
func (t *Parent_Child) GetTwo() string {
	if t == nil || t.Two == nil {
		return ""
	}
	return *t.Two
}

// PopulateDefaults recursively populates unset leaf fields in the Parent_Child
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Parent_Child) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Parent_Child) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Parent_Child"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Parent_Child) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Parent_Child) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Parent_Child.
func (*Parent_Child) ΛBelongingModule() string {
	return "openconfig-simple"
}

// RemoteContainer represents the /openconfig-simple/remote-container YANG schema element.
type RemoteContainer struct {
	ALeaf *string `path:"state/a-leaf" module:"openconfig-simple/openconfig-simple" shadow-path:"config/a-leaf" shadow-module:"openconfig-simple/openconfig-simple"`
}

// IsYANGGoStruct ensures that RemoteContainer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RemoteContainer) IsYANGGoStruct() {}

// GetALeaf retrieves the value of the leaf ALeaf from the RemoteContainer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ALeaf is set, it can
// safely use t.GetALeaf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ALeaf == nil' before retrieving the leaf's value.
func (t *RemoteContainer) GetALeaf() string {
	if t == nil || t.ALeaf == nil {
		return ""
	}
	return *t.ALeaf
}

// PopulateDefaults recursively populates unset leaf fields in the RemoteContainer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RemoteContainer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RemoteContainer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RemoteContainer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RemoteContainer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RemoteContainer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of RemoteContainer.
func (*RemoteContainer) ΛBelongingModule() string {
	return "openconfig-simple"
}

// E_Child_Three is a derived int64 type which is used to represent
// the enumerated node Child_Three. An additional value named
// Child_Three_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Child_Three int64

// IsYANGGoEnum ensures that Child_Three implements the yang.GoEnum
// interface. This ensures that Child_Three can be identified as a
// mapped type for a YANG enumeration.
func (E_Child_Three) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Child_Three.
func (E_Child_Three) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_Child_Three.
func (e E_Child_Three) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Child_Three")
}

const (
	// Child_Three_UNSET corresponds to the value UNSET of Child_Three
	Child_Three_UNSET E_Child_Three = 0
	// Child_Three_ONE corresponds to the value ONE of Child_Three
	Child_Three_ONE E_Child_Three = 1
	// Child_Three_TWO corresponds to the value TWO of Child_Three
	Child_Three_TWO E_Child_Three = 2
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_Child_Three": {
		1: {Name: "ONE"},
		2: {Name: "TWO"},
	},
}

var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x5b, 0x6f, 0xe2, 0x38,
		0x14, 0x7e, 0xe7, 0x57, 0x20, 0x3f, 0x97, 0x01, 0x52, 0x28, 0xd0, 0xb7, 0x6e, 0x3b, 0xa3, 0x95,
		0xba, 0xdd, 0xad, 0xda, 0xd5, 0xbe, 0xec, 0xac, 0x46, 0x6e, 0x30, 0xd4, 0x6a, 0x70, 0x90, 0xed,
		0xb4, 0x83, 0x56, 0xfc, 0xf7, 0x51, 0x2e, 0xa4, 0x5c, 0x13, 0x5f, 0x42, 0x08, 0x70, 0x1e, 0x49,
		0x62, 0xc7, 0x3e, 0x37, 0x9f, 0xf3, 0xf9, 0x33, 0xf9, 0xbf, 0x56, 0xaf, 0xd7, 0xeb, 0xe8, 0x4f,
		0x3c, 0x21, 0xe8, 0xba, 0x8e, 0x86, 0xe4, 0x9d, 0xba, 0x04, 0x5d, 0xc4, 0x57, 0xef, 0x29, 0x1b,
		0xa2, 0xeb, 0x7a, 0x3b, 0xf9, 0x79, 0xeb, 0xb3, 0x11, 0x1d, 0xa3, 0xeb, 0x7a, 0x2b, 0xb9, 0x70,
		0x47, 0x39, 0xba, 0xae, 0xc7, 0x5d, 0x44, 0x17, 0x26, 0xfe, 0x90, 0x78, 0x2b, 0x97, 0x56, 0x7a,
		0x8f, 0x6f, 0x5f, 0xac, 0xde, 0x5c, 0x7d, 0x49, 0x7a, 0x79, 0xfd, 0x65, 0xe9, 0x8d, 0x47, 0x4e,
		0x46, 0xf4, 0xe7, 0xc6, 0x4b, 0x56, 0x5e, 0xe4, 0xbb, 0x6b, 0x6f, 0x89, 0xee, 0x3e, 0xfb, 0x01,
		0x77, 0xc9, 0xd6, 0x96, 0xf1, 0x48, 0xc8, 0xec, 0xc3, 0xe7, 0xe1, 0x60, 0xd0, 0x34, 0x7e, 0xc9,
		0xc5, 0xf6, 0x07, 0x7f, 0xc7, 0xe2, 0x86, 0x8f, 0x83, 0x09, 0x61, 0x12, 0x5d, 0xd7, 0x25, 0x0f,
		0xc8, 0x8e, 0x07, 0x97, 0x9e, 0x0a, 0xc7, 0xb4, 0xf1, 0xd0, 0x7c, 0xe5, 0xca, 0x7c, 0x6d, 0xa6,
		0xeb, 0xe2, 0x4d, 0x6f, 0xe0, 0xdd, 0x73, 0x58, 0x48, 0x00, 0xef, 0x1a, 0xfb, 0x76, 0x71, 0xe7,
		0x8a, 0x5d, 0x45, 0xfc, 0x6a, 0x6a, 0x50, 0x55, 0x87, 0xb6, 0x5a, 0xb4, 0xd5, 0xa3, 0xac, 0xa6,
		0xed, 0xea, 0xda, 0xa1, 0xb6, 0x5c, 0xf5, 0xa5, 0x0f, 0x08, 0xca, 0xc6, 0x1e, 0x69, 0xbc, 0x91,
		0x59, 0xbe, 0x10, 0x16, 0x22, 0x5d, 0x6a, 0x93, 0x33, 0xa9, 0x6c, 0x45, 0x2b, 0x2b, 0x5c, 0x47,
		0xf1, 0x7a, 0x06, 0xa0, 0x6b, 0x08, 0xc6, 0x06, 0x61, 0x6c, 0x18, 0xda, 0x06, 0x92, 0x6d, 0x28,
		0x39, 0x06, 0xa3, 0x6c, 0x38, 0xe9, 0x83, 0xee, 0x42, 0x77, 0x8a, 0x82, 0x5b, 0xa8, 0x25, 0x69,
		0xa7, 0x38, 0x79, 0x35, 0x43, 0xd2, 0x36, 0x28, 0x13, 0xc3, 0x32, 0x33, 0x30, 0x53, 0x43, 0xb3,
		0x36, 0x38, 0x6b, 0xc3, 0x33, 0x36, 0x40, 0x35, 0x43, 0x54, 0x34, 0x48, 0x6d, 0xc3, 0x4c, 0x1b,
		0xa8, 0x84, 0xb6, 0x9d, 0xba, 0xcd, 0x8f, 0x71, 0xbb, 0x4c, 0xb5, 0xa5, 0xd9, 0x4c, 0xd7, 0x64,
		0x6d, 0x4c, 0xd7, 0xce, 0x84, 0x6d, 0x4d, 0xb9, 0x30, 0x93, 0x2e, 0xcc, 0xb4, 0xad, 0x4d, 0x5c,
		0xcf, 0xd4, 0x35, 0x4d, 0x3e, 0x1d, 0xdd, 0xdf, 0xb3, 0x29, 0xb1, 0xd3, 0xb3, 0x90, 0x9c, 0xb2,
		0xb1, 0x89, 0xae, 0x17, 0x01, 0xb8, 0x5f, 0xdb, 0x8f, 0x3c, 0x34, 0x64, 0x81, 0xde, 0xb1, 0x17,
		0x10, 0x73, 0x9f, 0x8e, 0x9b, 0x83, 0x57, 0x83, 0x57, 0x9f, 0x88, 0x57, 0x53, 0x26, 0xaf, 0x3a,
		0x16, 0x4e, 0xdd, 0x31, 0x68, 0xfa, 0x84, 0xd9, 0x38, 0x7c, 0xf9, 0xbf, 0x46, 0x2a, 0x31, 0x33,
		0xad, 0xe8, 0xc5, 0x0f, 0x94, 0x19, 0xdb, 0x66, 0xda, 0xc9, 0x3f, 0x49, 0x04, 0x19, 0x38, 0xce,
		0xe5, 0x65, 0xcf, 0x69, 0x5d, 0x5e, 0xf5, 0xbb, 0x9d, 0x5e, 0xaf, 0xdb, 0x6f, 0xf5, 0x2f, 0xec,
		0x7a, 0xfe, 0xc6, 0xb1, 0x2b, 0xa9, 0xcf, 0xee, 0xe8, 0x98, 0x4a, 0xa1, 0xef, 0xf8, 0x9b, 0x4a,
		0x26, 0x63, 0x2c, 0xe9, 0x3b, 0x49, 0x5c, 0xc0, 0xb8, 0xb3, 0xf9, 0x85, 0x85, 0xcc, 0xf1, 0xcf,
		0x7d, 0xca, 0xbc, 0x57, 0x61, 0x99, 0x8f, 0xb0, 0x27, 0x2c, 0x84, 0x5e, 0x2b, 0xa7, 0xd5, 0x7f,
		0xfb, 0x5a, 0x95, 0x0b, 0x4d, 0xdd, 0x6f, 0x18, 0xf3, 0x25, 0x0e, 0x35, 0xa5, 0x97, 0xc1, 0x0b,
		0xf7, 0x95, 0x4c, 0xf0, 0x14, 0xcb, 0xd7, 0x30, 0xda, 0x35, 0xfd, 0x29, 0x61, 0x71, 0xf5, 0xd8,
		0xf8, 0xa0, 0xf2, 0xd5, 0xa3, 0x42, 0xbe, 0x63, 0xaf, 0x19, 0x01, 0x7b, 0x4d, 0xdc, 0xfc, 0x44,
		0x27, 0x9a, 0x49, 0x8d, 0x59, 0x2b, 0x66, 0xaa, 0x0a, 0xd3, 0xd4, 0x2a, 0x36, 0x0c, 0x8a, 0x0c,
		0xcd, 0x34, 0x04, 0xea, 0xe0, 0xd3, 0xad, 0x83, 0xb5, 0xd3, 0x86, 0x54, 0x4f, 0x1e, 0xc1, 0x23,
		0x4e, 0x46, 0x3a, 0xca, 0x5a, 0x64, 0xff, 0x1a, 0x91, 0x1a, 0x3d, 0x26, 0xfe, 0xfa, 0xe5, 0x4b,
		0x53, 0x48, 0x2c, 0x49, 0x33, 0x34, 0xf3, 0x12, 0x5d, 0x31, 0x7a, 0xa9, 0xbe, 0x33, 0xc6, 0xcd,
		0xf6, 0x0c, 0x4b, 0x39, 0xe0, 0x8e, 0x00, 0x4b, 0x01, 0x2c, 0x05, 0x05, 0x2c, 0x14, 0xb0, 0x07,
		0x81, 0xa5, 0x74, 0x43, 0x8c, 0x59, 0xe2, 0x9a, 0xb6, 0x9f, 0x8d, 0x7d, 0xd9, 0xf0, 0xdd, 0x86,
		0xeb, 0x4f, 0xa6, 0x9c, 0x08, 0x41, 0x86, 0x8d, 0x70, 0x11, 0x0e, 0x3b, 0x9b, 0x03, 0x9e, 0x06,
		0xe1, 0x08, 0xc2, 0x11, 0xe0, 0x69, 0x80, 0xa7, 0x01, 0x9e, 0x06, 0x78, 0xda, 0x71, 0xe2, 0x69,
		0x67, 0x90, 0x4e, 0x1c, 0x37, 0x10, 0x18, 0x17, 0xf5, 0x45, 0x81, 0x0f, 0x56, 0xc4, 0x9a, 0xfb,
		0xa8, 0xee, 0x53, 0xa8, 0xe0, 0xd0, 0x1f, 0x54, 0xc8, 0x1b, 0x29, 0x15, 0x79, 0x38, 0x0f, 0x94,
		0x7d, 0xf5, 0x48, 0xb8, 0x2c, 0x2b, 0x7a, 0x6c, 0x18, 0x85, 0x96, 0x5a, 0xb4, 0xfb, 0x9d, 0xce,
		0x55, 0xaf, 0xd3, 0x69, 0xf5, 0x2e, 0x7b, 0xad, 0x41, 0xb7, 0xdb, 0xbe, 0x6a, 0x77, 0x15, 0x3a,
		0xf9, 0x8b, 0x0f, 0x09, 0x27, 0xc3, 0xdf, 0xc2, 0x49, 0xb1, 0xc0, 0xf3, 0xac, 0x64, 0xa3, 0x69,
		0x17, 0xc6, 0xf6, 0x80, 0x94, 0xe0, 0x23, 0x1e, 0xb8, 0x92, 0x25, 0x29, 0xc1, 0x43, 0xd8, 0xc7,
		0x8f, 0xe7, 0xa8, 0x87, 0xfb, 0x3c, 0x1c, 0x6b, 0x5e, 0x10, 0x79, 0x4f, 0x51, 0x1c, 0x7a, 0x62,
		0xd8, 0x3e, 0xf4, 0xcd, 0x81, 0x6d, 0x19, 0x14, 0x7a, 0xc9, 0xe7, 0x7c, 0xbe, 0x00, 0xe7, 0xb3,
		0xf2, 0x9c, 0xcf, 0x49, 0xe0, 0x49, 0xaa, 0x47, 0xf9, 0xfc, 0x6c, 0x02, 0x8c, 0x4f, 0x60, 0x7c,
		0x02, 0xe3, 0x13, 0xa0, 0xf5, 0xf2, 0xb2, 0x45, 0x13, 0x68, 0xbd, 0x6d, 0x85, 0xad, 0xb7, 0x01,
		0xcd, 0x02, 0x34, 0xeb, 0x54, 0xd0, 0xac, 0x80, 0x32, 0x79, 0xe9, 0x58, 0xc0, 0x59, 0xbd, 0xb3,
		0x85, 0xb3, 0x5a, 0xa7, 0x0b, 0xa4, 0x54, 0x05, 0xbd, 0xea, 0x38, 0x83, 0xce, 0xe0, 0xaa, 0xe7,
		0x0c, 0xba, 0x00, 0x5a, 0x95, 0x0b, 0x5a, 0xed, 0x65, 0x2b, 0xe9, 0x8d, 0xcc, 0x1c, 0xab, 0xa5,
		0xd7, 0x81, 0xa5, 0x17, 0x96, 0xde, 0x53, 0x5a, 0x7a, 0xad, 0x76, 0x92, 0xfa, 0xb0, 0xf4, 0xc2,
		0xd2, 0xbb, 0xaf, 0xa5, 0xd7, 0x0c, 0xf1, 0x85, 0x45, 0xf8, 0x30, 0x8b, 0xf0, 0xd1, 0x6d, 0xc0,
		0xbc, 0x34, 0x53, 0xd0, 0xf0, 0x30, 0x44, 0xec, 0xb6, 0x11, 0x13, 0xbb, 0x0d, 0x54, 0x6c, 0x00,
		0xa8, 0xf4, 0xbc, 0xe9, 0x28, 0xa9, 0xd8, 0xed, 0x92, 0xbd, 0xd1, 0x31, 0xf2, 0x46, 0x07, 0xbc,
		0x11, 0xbc, 0xf1, 0x0c, 0xbc, 0xd1, 0x81, 0x93, 0x11, 0x70, 0x32, 0xe2, 0x34, 0xfd, 0x11, 0xb6,
		0x6f, 0x00, 0x43, 0x02, 0x0c, 0xc9, 0x0a, 0x43, 0x82, 0xed, 0x1b, 0xc0, 0x90, 0xaa, 0x89, 0x21,
		0xc1, 0xf6, 0xcd, 0xa1, 0x90, 0x23, 0x38, 0xc2, 0x64, 0x5c, 0x60, 0xda, 0x14, 0x9a, 0x90, 0x33,
		0x40, 0xce, 0x00, 0xfb, 0x4e, 0x90, 0x33, 0x40, 0xce, 0x60, 0x2c, 0x62, 0xd8, 0x77, 0x82, 0xec,
		0x01, 0x4e, 0x2c, 0x65, 0x6f, 0x98, 0x55, 0xf2, 0xc0, 0x52, 0xfb, 0x3b, 0xfb, 0xce, 0xea, 0x0a,
		0xc9, 0x12, 0x1c, 0x5d, 0xda, 0x97, 0x61, 0x98, 0x9e, 0x5c, 0x7a, 0x08, 0x3b, 0x38, 0xea, 0x83,
		0x4b, 0x2f, 0xca, 0x07, 0x97, 0x32, 0xff, 0xcf, 0x3e, 0x67, 0x68, 0x3a, 0x43, 0xda, 0xf6, 0xf7,
		0xfe, 0x5b, 0x64, 0xbf, 0x3a, 0xee, 0xcf, 0xd1, 0x2d, 0x8d, 0x0c, 0x4d, 0x31, 0x8f, 0xd3, 0xd1,
		0x1d, 0x1f, 0x2d, 0x48, 0xee, 0x97, 0xf2, 0xd5, 0x02, 0x51, 0xc5, 0xcf, 0x16, 0x88, 0xc2, 0xbe,
		0x5b, 0xe0, 0xbe, 0x52, 0x6f, 0x98, 0x7f, 0x8e, 0x2d, 0x7e, 0xac, 0x12, 0x67, 0xd9, 0xc4, 0x31,
		0x1e, 0x66, 0x13, 0xa5, 0x9d, 0x66, 0x53, 0x3c, 0x8e, 0xa4, 0x77, 0x0c, 0xa9, 0x22, 0xe7, 0xd8,
		0xc4, 0x29, 0x1e, 0x64, 0x13, 0x95, 0x39, 0xc9, 0x36, 0xf2, 0x03, 0xae, 0xbf, 0x0f, 0x1a, 0xb5,
		0x3a, 0x09, 0x5a, 0x82, 0x38, 0xc7, 0x7d, 0x50, 0x71, 0x7c, 0xc4, 0x84, 0x17, 0xca, 0x30, 0x9f,
		0x19, 0xf0, 0x12, 0x06, 0x25, 0xb2, 0x0a, 0x7c, 0x66, 0xc0, 0x29, 0x08, 0x1b, 0x81, 0x2b, 0x81,
		0x2b, 0x95, 0xe6, 0x4a, 0xda, 0x7f, 0x35, 0xa7, 0xf9, 0x17, 0x73, 0xc5, 0xf8, 0x92, 0x7c, 0xe5,
		0xc4, 0xc0, 0x9b, 0xe2, 0x66, 0xe0, 0x4f, 0xe0, 0x4f, 0xa5, 0xf9, 0x13, 0x61, 0xc1, 0x84, 0xf0,
		0xb8, 0xa0, 0x36, 0x70, 0x2a, 0x8d, 0xbf, 0x4a, 0x43, 0x5f, 0x59, 0x30, 0x51, 0x47, 0x0c, 0xf7,
		0x0d, 0x8b, 0x15, 0x07, 0xf8, 0x08, 0x3a, 0x99, 0x7a, 0xa4, 0x19, 0xd7, 0xf8, 0xcd, 0xa8, 0xf0,
		0x54, 0x22, 0xcc, 0x67, 0xa0, 0x35, 0x19, 0x05, 0xa3, 0x1a, 0xf9, 0x4f, 0x8b, 0xf4, 0xa7, 0x5d,
		0x2c, 0x39, 0x50, 0x2c, 0x41, 0xb1, 0x04, 0x2b, 0x12, 0xac, 0x48, 0xc7, 0x58, 0x2c, 0xed, 0x79,
		0xc7, 0xc8, 0x7a, 0xab, 0x0c, 0xaa, 0x39, 0xf0, 0x75, 0xa8, 0xe6, 0x0a, 0xaa, 0xe6, 0xce, 0xc3,
		0xd9, 0xa1, 0xdc, 0x04, 0x87, 0x87, 0x72, 0xd3, 0xae, 0xdc, 0x3c, 0x93, 0x48, 0xf1, 0xe1, 0x1b,
		0xc4, 0x89, 0x0f, 0x1f, 0xa2, 0x04, 0x44, 0x89, 0xb3, 0x02, 0x79, 0x2b, 0x8c, 0x2d, 0x29, 0x70,
		0xcb, 0xaa, 0x43, 0x04, 0xda, 0x32, 0x01, 0x94, 0x89, 0x6e, 0x2d, 0xf3, 0x6f, 0x1e, 0xa3, 0x56,
		0x3f, 0x6e, 0xa3, 0x56, 0x07, 0xa6, 0x0f, 0xad, 0x4c, 0x24, 0x9f, 0x3a, 0x14, 0x0f, 0x5d, 0x85,
		0x3b, 0xc4, 0xc9, 0xc4, 0x97, 0xa4, 0xe1, 0xfa, 0x4c, 0x62, 0xca, 0x08, 0xdf, 0xcd, 0x22, 0xda,
		0x78, 0xb2, 0x14, 0x3e, 0x11, 0xaf, 0x22, 0x9f, 0x88, 0x17, 0xc7, 0x27, 0xca, 0xa6, 0x9f, 0xa8,
		0xd1, 0x4e, 0x4a, 0x66, 0x14, 0xf1, 0x63, 0x64, 0x14, 0xf1, 0xd2, 0x18, 0x45, 0x38, 0x4d, 0xad,
		0xd4, 0x30, 0xf2, 0xe4, 0x79, 0x35, 0x90, 0xbc, 0x75, 0x58, 0x46, 0x11, 0x3f, 0x45, 0x90, 0x9c,
		0xef, 0x1b, 0x24, 0x57, 0x4e, 0x45, 0xf4, 0x53, 0x10, 0xc5, 0xd4, 0xa3, 0x72, 0x2b, 0xf2, 0xfa,
		0x62, 0x92, 0xb9, 0x65, 0xa5, 0xf6, 0x79, 0x81, 0xec, 0xad, 0x29, 0xa5, 0x2d, 0x29, 0xe5, 0x40,
		0xea, 0x40, 0x20, 0x85, 0x40, 0x0a, 0x81, 0xf4, 0x0c, 0x03, 0x69, 0xc1, 0xb5, 0x97, 0x31, 0x30,
		0x53, 0xfd, 0x88, 0x9e, 0x51, 0x28, 0x96, 0x5e, 0x37, 0xe5, 0xd4, 0x2e, 0x5b, 0x2a, 0xa8, 0xa7,
		0xa8, 0xc5, 0x6d, 0xda, 0x60, 0x57, 0x29, 0x55, 0x5b, 0x1a, 0xef, 0xae, 0x71, 0x22, 0x2a, 0x6e,
		0x53, 0xfd, 0x3e, 0x47, 0x63, 0xdd, 0x70, 0x33, 0x44, 0xc5, 0x37, 0xfc, 0x46, 0x9e, 0x7c, 0x7f,
		0xd3, 0x05, 0xd7, 0xe7, 0x87, 0x96, 0x6f, 0xad, 0x8c, 0xfa, 0x8e, 0xbc, 0x53, 0x37, 0x11, 0xfa,
		0xbc, 0x36, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x73, 0xf8,
		0x17, 0x1b, 0x93, 0x00, 0x00,
	}
)

// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
func initΛEnumTypes() {
	ΛEnumTypes = map[string][]reflect.Type{
		"/parent/child/state/three": []reflect.Type{
			reflect.TypeOf((E_Child_Three)(0)),
		},
	}
}
