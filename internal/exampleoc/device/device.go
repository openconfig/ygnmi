/*
Package device is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /usr/local/google/home/dgrau/go/pkg/mod/github.com/openconfig/ygot@v0.18.0/genutil/names.go
using the following YANG input files:
	- ../../pathgen/testdata/yang/openconfig-simple.yang
	- ../../pathgen/testdata/yang/openconfig-withlistval.yang
Imported modules were sourced from:
*/
package device

import (
	oc "github.com/openconfig/ygnmi/internal/exampleoc"
	"github.com/openconfig/ygnmi/internal/exampleoc/device/simple"
	"github.com/openconfig/ygnmi/internal/exampleoc/device/withlistval"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Device represents the /device YANG schema element.
type Device struct {
	*ygot.DeviceRootBase
}

// DeviceRoot returns a new path object from which YANG paths can be constructed.
func DeviceRoot(id string) *Device {
	return &Device{ygot.NewDeviceRootBase(id)}
}

// Model (container):
// ----------------------------------------
// Defining module: "openconfig-withlistval"
// Instantiating module: "openconfig-withlistval"
// Path from parent: "model"
// Path from root: "/model"
func (n *Device) Model() *withlistval.Model {
	return &withlistval.Model{
		NodePath: ygot.NewNodePath(
			[]string{"model"},
			map[string]interface{}{},
			n,
		),
	}
}

// Parent (container): I am a parent container
// that has 4 children.
// ----------------------------------------
// Defining module: "openconfig-simple"
// Instantiating module: "openconfig-simple"
// Path from parent: "parent"
// Path from root: "/parent"
func (n *Device) Parent() *simple.Parent {
	return &simple.Parent{
		NodePath: ygot.NewNodePath(
			[]string{"parent"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemoteContainer (container):
// ----------------------------------------
// Defining module: "openconfig-remote"
// Instantiating module: "openconfig-simple"
// Path from parent: "remote-container"
// Path from root: "/remote-container"
func (n *Device) RemoteContainer() *simple.RemoteContainer {
	return &simple.RemoteContainer{
		NodePath: ygot.NewNodePath(
			[]string{"remote-container"},
			map[string]interface{}{},
			n,
		),
	}
}

// State returns a Query that can be used in gNMI operations.
func (n *Device) State() ygnmi.SingletonQuery[*oc.Device] {
	return ygnmi.NewNonLeafSingletonQuery[*oc.Device](
		"Device",
		true,
		n,
		&ytypes.Schema{
			Root:       &oc.Device{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Device) Config() ygnmi.ConfigQuery[*oc.Device] {
	return ygnmi.NewNonLeafConfigQuery[*oc.Device](
		"Device",
		false,
		n,
		&ytypes.Schema{
			Root:       &oc.Device{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}
