// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Package unione is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: (devel): (ygot: v0.34.0)
using the following YANG input files:
  - ../../pathgen/testdata/yang/openconfig-simple.yang
  - ../../pathgen/testdata/yang/openconfig-withlistval.yang
  - ../../pathgen/testdata/yang/openconfig-nested.yang
  - ../../pathgen/testdata/yang/openconfig-unione.yang

Imported modules were sourced from:
*/
package unione

import (
	"reflect"

	oc "github.com/openconfig/ygnmi/internal/exampleocunordered"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Component_E1Path represents the /openconfig-unione/platform/component/state/e1 YANG schema element.
type Component_E1Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_E1PathAny represents the wildcard version of the /openconfig-unione/platform/component/state/e1 YANG schema element.
type Component_E1PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *Component_E1Path) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/e1"
//	Path from root:       "/platform/component/state/e1"
func (n *Component_E1Path) State() ygnmi.SingletonQuery[oc.Component_E1_Union] {
	return ygnmi.NewSingletonQuery[oc.Component_E1_Union](
		"Component",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "e1"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_E1_Union, bool) {
			ret := gs.(*oc.Component).E1
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/e1"
//	Path from root:       "/platform/component/state/e1"
func (n *Component_E1PathAny) State() ygnmi.WildcardQuery[oc.Component_E1_Union] {
	return ygnmi.NewWildcardQuery[oc.Component_E1_Union](
		"Component",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "e1"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_E1_Union, bool) {
			ret := gs.(*oc.Component).E1
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_EnumeratedPath represents the /openconfig-unione/platform/component/state/enumerated YANG schema element.
type Component_EnumeratedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_EnumeratedPathAny represents the wildcard version of the /openconfig-unione/platform/component/state/enumerated YANG schema element.
type Component_EnumeratedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *Component_EnumeratedPath) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/enumerated"
//	Path from root:       "/platform/component/state/enumerated"
func (n *Component_EnumeratedPath) State() ygnmi.SingletonQuery[oc.Component_Enumerated_Union] {
	return ygnmi.NewSingletonQuery[oc.Component_Enumerated_Union](
		"Component",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enumerated"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_Enumerated_Union, bool) {
			ret := gs.(*oc.Component).Enumerated
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/enumerated"
//	Path from root:       "/platform/component/state/enumerated"
func (n *Component_EnumeratedPathAny) State() ygnmi.WildcardQuery[oc.Component_Enumerated_Union] {
	return ygnmi.NewWildcardQuery[oc.Component_Enumerated_Union](
		"Component",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enumerated"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_Enumerated_Union, bool) {
			ret := gs.(*oc.Component).Enumerated
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_NamePath represents the /openconfig-unione/platform/component/state/name YANG schema element.
type Component_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_NamePathAny represents the wildcard version of the /openconfig-unione/platform/component/state/name YANG schema element.
type Component_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *Component_NamePath) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/name"
//	Path from root:       "/platform/component/state/name"
func (n *Component_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/name"
//	Path from root:       "/platform/component/state/name"
func (n *Component_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "config/name"
//	Path from root:       "/platform/component/config/name"
func (n *Component_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "config/name"
//	Path from root:       "/platform/component/config/name"
func (n *Component_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_PowerPath represents the /openconfig-unione/platform/component/state/power YANG schema element.
type Component_PowerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_PowerPathAny represents the wildcard version of the /openconfig-unione/platform/component/state/power YANG schema element.
type Component_PowerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *Component_PowerPath) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/power"
//	Path from root:       "/platform/component/state/power"
func (n *Component_PowerPath) State() ygnmi.SingletonQuery[oc.Component_Power_Union] {
	return ygnmi.NewSingletonQuery[oc.Component_Power_Union](
		"Component",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_Power_Union, bool) {
			ret := gs.(*oc.Component).Power
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/power"
//	Path from root:       "/platform/component/state/power"
func (n *Component_PowerPathAny) State() ygnmi.WildcardQuery[oc.Component_Power_Union] {
	return ygnmi.NewWildcardQuery[oc.Component_Power_Union](
		"Component",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_Power_Union, bool) {
			ret := gs.(*oc.Component).Power
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_R1Path represents the /openconfig-unione/platform/component/state/r1 YANG schema element.
type Component_R1Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_R1PathAny represents the wildcard version of the /openconfig-unione/platform/component/state/r1 YANG schema element.
type Component_R1PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *Component_R1Path) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/r1"
//	Path from root:       "/platform/component/state/r1"
func (n *Component_R1Path) State() ygnmi.SingletonQuery[oc.Component_E1_Union] {
	return ygnmi.NewSingletonQuery[oc.Component_E1_Union](
		"Component",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "r1"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_E1_Union, bool) {
			ret := gs.(*oc.Component).R1
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/r1"
//	Path from root:       "/platform/component/state/r1"
func (n *Component_R1PathAny) State() ygnmi.WildcardQuery[oc.Component_E1_Union] {
	return ygnmi.NewWildcardQuery[oc.Component_E1_Union](
		"Component",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "r1"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_E1_Union, bool) {
			ret := gs.(*oc.Component).R1
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_TypePath represents the /openconfig-unione/platform/component/state/type YANG schema element.
type Component_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_TypePathAny represents the wildcard version of the /openconfig-unione/platform/component/state/type YANG schema element.
type Component_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *Component_TypePath) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/type"
//	Path from root:       "/platform/component/state/type"
func (n *Component_TypePath) State() ygnmi.SingletonQuery[oc.Component_Type_Union] {
	return ygnmi.NewSingletonQuery[oc.Component_Type_Union](
		"Component",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_Type_Union, bool) {
			ret := gs.(*oc.Component).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/type"
//	Path from root:       "/platform/component/state/type"
func (n *Component_TypePathAny) State() ygnmi.WildcardQuery[oc.Component_Type_Union] {
	return ygnmi.NewWildcardQuery[oc.Component_Type_Union](
		"Component",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_Type_Union, bool) {
			ret := gs.(*oc.Component).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// ComponentPath represents the /openconfig-unione/platform/component YANG schema element.
type ComponentPath struct {
	*ygnmi.NodePath
}

// ComponentPathAny represents the wildcard version of the /openconfig-unione/platform/component YANG schema element.
type ComponentPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *ComponentPath) PathOriginName() string {
	return "openconfig"
}

// ComponentPathMap represents the /openconfig-unione/platform/component YANG schema element.
type ComponentPathMap struct {
	*ygnmi.NodePath
}

// ComponentPathMapAny represents the wildcard version of the /openconfig-unione/platform/component YANG schema element.
type ComponentPathMapAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *ComponentPathMap) PathOriginName() string {
	return "openconfig"
}

// E1 (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/e1"
//	Path from root:       "/platform/component/state/e1"
func (n *ComponentPath) E1() *Component_E1Path {
	ps := &Component_E1Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "e1"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// E1 (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/e1"
//	Path from root:       "/platform/component/state/e1"
func (n *ComponentPathAny) E1() *Component_E1PathAny {
	ps := &Component_E1PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "e1"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enumerated (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/enumerated"
//	Path from root:       "/platform/component/state/enumerated"
func (n *ComponentPath) Enumerated() *Component_EnumeratedPath {
	ps := &Component_EnumeratedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "enumerated"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enumerated (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/enumerated"
//	Path from root:       "/platform/component/state/enumerated"
func (n *ComponentPathAny) Enumerated() *Component_EnumeratedPathAny {
	ps := &Component_EnumeratedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "enumerated"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "*/name"
//	Path from root:       "/platform/component/*/name"
func (n *ComponentPath) Name() *Component_NamePath {
	ps := &Component_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "*/name"
//	Path from root:       "/platform/component/*/name"
func (n *ComponentPathAny) Name() *Component_NamePathAny {
	ps := &Component_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Power (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/power"
//	Path from root:       "/platform/component/state/power"
func (n *ComponentPath) Power() *Component_PowerPath {
	ps := &Component_PowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "power"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Power (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/power"
//	Path from root:       "/platform/component/state/power"
func (n *ComponentPathAny) Power() *Component_PowerPathAny {
	ps := &Component_PowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "power"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// R1 (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/r1"
//	Path from root:       "/platform/component/state/r1"
func (n *ComponentPath) R1() *Component_R1Path {
	ps := &Component_R1Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "r1"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// R1 (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/r1"
//	Path from root:       "/platform/component/state/r1"
func (n *ComponentPathAny) R1() *Component_R1PathAny {
	ps := &Component_R1PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "r1"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/type"
//	Path from root:       "/platform/component/state/type"
func (n *ComponentPath) Type() *Component_TypePath {
	ps := &Component_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/type"
//	Path from root:       "/platform/component/state/type"
func (n *ComponentPathAny) Type() *Component_TypePathAny {
	ps := &Component_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *ComponentPath) State() ygnmi.SingletonQuery[*oc.Component] {
	return ygnmi.NewSingletonQuery[*oc.Component](
		"Component",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *ComponentPathAny) State() ygnmi.WildcardQuery[*oc.Component] {
	return ygnmi.NewWildcardQuery[*oc.Component](
		"Component",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *ComponentPath) Config() ygnmi.ConfigQuery[*oc.Component] {
	return ygnmi.NewConfigQuery[*oc.Component](
		"Component",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *ComponentPathAny) Config() ygnmi.WildcardQuery[*oc.Component] {
	return ygnmi.NewWildcardQuery[*oc.Component](
		"Component",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// DupEnum_APath represents the /openconfig-unione/dup-enum/state/A YANG schema element.
type DupEnum_APath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// DupEnum_APathAny represents the wildcard version of the /openconfig-unione/dup-enum/state/A YANG schema element.
type DupEnum_APathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *DupEnum_APath) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/A"
//	Path from root:       "/dup-enum/state/A"
func (n *DupEnum_APath) State() ygnmi.SingletonQuery[oc.E_DupEnum_A] {
	return ygnmi.NewSingletonQuery[oc.E_DupEnum_A](
		"DupEnum",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "A"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_DupEnum_A, bool) {
			ret := gs.(*oc.DupEnum).A
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.DupEnum) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/A"
//	Path from root:       "/dup-enum/state/A"
func (n *DupEnum_APathAny) State() ygnmi.WildcardQuery[oc.E_DupEnum_A] {
	return ygnmi.NewWildcardQuery[oc.E_DupEnum_A](
		"DupEnum",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "A"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_DupEnum_A, bool) {
			ret := gs.(*oc.DupEnum).A
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.DupEnum) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// DupEnum_BPath represents the /openconfig-unione/dup-enum/state/B YANG schema element.
type DupEnum_BPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// DupEnum_BPathAny represents the wildcard version of the /openconfig-unione/dup-enum/state/B YANG schema element.
type DupEnum_BPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *DupEnum_BPath) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/B"
//	Path from root:       "/dup-enum/state/B"
func (n *DupEnum_BPath) State() ygnmi.SingletonQuery[oc.E_DupEnum_B] {
	return ygnmi.NewSingletonQuery[oc.E_DupEnum_B](
		"DupEnum",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "B"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_DupEnum_B, bool) {
			ret := gs.(*oc.DupEnum).B
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.DupEnum) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/B"
//	Path from root:       "/dup-enum/state/B"
func (n *DupEnum_BPathAny) State() ygnmi.WildcardQuery[oc.E_DupEnum_B] {
	return ygnmi.NewWildcardQuery[oc.E_DupEnum_B](
		"DupEnum",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "B"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_DupEnum_B, bool) {
			ret := gs.(*oc.DupEnum).B
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.DupEnum) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// DupEnumPath represents the /openconfig-unione/dup-enum YANG schema element.
type DupEnumPath struct {
	*ygnmi.NodePath
}

// DupEnumPathAny represents the wildcard version of the /openconfig-unione/dup-enum YANG schema element.
type DupEnumPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *DupEnumPath) PathOriginName() string {
	return "openconfig"
}

// A (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/A"
//	Path from root:       "/dup-enum/state/A"
func (n *DupEnumPath) A() *DupEnum_APath {
	ps := &DupEnum_APath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "A"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// A (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/A"
//	Path from root:       "/dup-enum/state/A"
func (n *DupEnumPathAny) A() *DupEnum_APathAny {
	ps := &DupEnum_APathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "A"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// B (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/B"
//	Path from root:       "/dup-enum/state/B"
func (n *DupEnumPath) B() *DupEnum_BPath {
	ps := &DupEnum_BPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "B"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// B (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/B"
//	Path from root:       "/dup-enum/state/B"
func (n *DupEnumPathAny) B() *DupEnum_BPathAny {
	ps := &DupEnum_BPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "B"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *DupEnumPath) State() ygnmi.SingletonQuery[*oc.DupEnum] {
	return ygnmi.NewSingletonQuery[*oc.DupEnum](
		"DupEnum",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *DupEnumPathAny) State() ygnmi.WildcardQuery[*oc.DupEnum] {
	return ygnmi.NewWildcardQuery[*oc.DupEnum](
		"DupEnum",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DupEnumPath) Config() ygnmi.ConfigQuery[*oc.DupEnum] {
	return ygnmi.NewConfigQuery[*oc.DupEnum](
		"DupEnum",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DupEnumPathAny) Config() ygnmi.WildcardQuery[*oc.DupEnum] {
	return ygnmi.NewWildcardQuery[*oc.DupEnum](
		"DupEnum",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
