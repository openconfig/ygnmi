// Code generated by ygnmi version: (devel): (ygot: v0.34.0). DO NOT EDIT.

/*
Package exampleocunorderedpath is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: (devel): (ygot: v0.34.0)
using the following YANG input files:
  - ../../pathgen/testdata/yang/openconfig-simple.yang
  - ../../pathgen/testdata/yang/openconfig-withlistval.yang
  - ../../pathgen/testdata/yang/openconfig-nested.yang
  - ../../pathgen/testdata/yang/openconfig-unione.yang

Imported modules were sourced from:
*/
package exampleocunorderedpath

import (
	oc "github.com/openconfig/ygnmi/internal/exampleocunordered"
	"github.com/openconfig/ygnmi/internal/exampleocunordered/nested"
	"github.com/openconfig/ygnmi/internal/exampleocunordered/simple"
	"github.com/openconfig/ygnmi/internal/exampleocunordered/unione"
	"github.com/openconfig/ygnmi/internal/exampleocunordered/withlistval"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// RootPath represents the /root YANG schema element.
type RootPath struct {
	*ygnmi.DeviceRootBase
}

// Root returns a root path object from which YANG paths can be constructed.
func Root() *RootPath {
	return &RootPath{ygnmi.NewDeviceRootBase()}
}

// A (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "a"
//	Path from root:       "/a"
func (n *RootPath) A() *nested.APath {
	ps := &nested.APath{
		NodePath: ygnmi.NewNodePath(
			[]string{"a"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ComponentAny (list):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "platform/component"
//	Path from root:       "/platform/component"
func (n *RootPath) ComponentAny() *unione.ComponentPathAny {
	ps := &unione.ComponentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"platform", "component"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Component (list):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "platform/component"
//	Path from root:       "/platform/component"
//
//	Name: string
func (n *RootPath) Component(Name string) *unione.ComponentPath {
	ps := &unione.ComponentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"platform", "component"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Container (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "container"
//	Path from root:       "/container"
func (n *RootPath) Container() *nested.ContainerPath {
	ps := &nested.ContainerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"container"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DupEnum (container):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "dup-enum"
//	Path from root:       "/dup-enum"
func (n *RootPath) DupEnum() *unione.DupEnumPath {
	ps := &unione.DupEnumPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dup-enum"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Model (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "model"
//	Path from root:       "/model"
func (n *RootPath) Model() *withlistval.ModelPath {
	ps := &withlistval.ModelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"model"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Parent (container): I am a parent container
// that has 4 children.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "parent"
//	Path from root:       "/parent"
func (n *RootPath) Parent() *simple.ParentPath {
	ps := &simple.ParentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"parent"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RemoteContainer (container):
//
//	Defining module:      "openconfig-remote"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "remote-container"
//	Path from root:       "/remote-container"
func (n *RootPath) RemoteContainer() *simple.RemoteContainerPath {
	ps := &simple.RemoteContainerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-container"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Batch contains a collection of paths.
// Use batch to call Lookup, Watch, etc. on multiple paths at once.
type Batch struct {
	paths []ygnmi.PathStruct
}

// AddPaths adds the paths to the batch.
func (b *Batch) AddPaths(paths ...ygnmi.PathStruct) *Batch {
	b.paths = append(b.paths, paths...)
	return b
}

// State returns a Query that can be used in gNMI operations.
// The returned query is immutable, adding paths does not modify existing queries.
func (b *Batch) State() ygnmi.SingletonQuery[*oc.Root] {
	queryPaths := make([]ygnmi.PathStruct, len(b.paths))
	copy(queryPaths, b.paths)
	return ygnmi.NewSingletonQuery[*oc.Root](
		"Root",
		true,
		false,
		false,
		false,
		true,
		false,
		ygnmi.NewDeviceRootBase(),
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		queryPaths,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
// The returned query is immutable, adding paths does not modify existing queries.
func (b *Batch) Config() ygnmi.SingletonQuery[*oc.Root] {
	queryPaths := make([]ygnmi.PathStruct, len(b.paths))
	copy(queryPaths, b.paths)
	return ygnmi.NewSingletonQuery[*oc.Root](
		"Root",
		false,
		true,
		false,
		false,
		true,
		false,
		ygnmi.NewDeviceRootBase(),
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		queryPaths,
		nil,
	)
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *RootPath) State() ygnmi.SingletonQuery[*oc.Root] {
	return ygnmi.NewSingletonQuery[*oc.Root](
		"Root",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RootPath) Config() ygnmi.ConfigQuery[*oc.Root] {
	return ygnmi.NewConfigQuery[*oc.Root](
		"Root",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
