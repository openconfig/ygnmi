// Code generated by ygnmi version: (devel): (ygot: v0.34.0). DO NOT EDIT.

/*
Package exampleocconfigpath is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: (devel): (ygot: v0.34.0)
using the following YANG input files:
  - ../../pathgen/testdata/yang/openconfig-simple.yang
  - ../../pathgen/testdata/yang/openconfig-withlistval.yang
  - ../../pathgen/testdata/yang/openconfig-nested.yang
  - ../../pathgen/testdata/yang/openconfig-unione.yang

Imported modules were sourced from:
*/
package exampleocconfigpath

import (
	"reflect"

	oc "github.com/openconfig/ygnmi/internal/exampleocconfig"
	"github.com/openconfig/ygnmi/internal/exampleocconfig/a"
	"github.com/openconfig/ygnmi/internal/exampleocconfig/modelb"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// APath represents the /openconfig-nested/a YANG schema element.
type APath struct {
	*ygnmi.NodePath
}

// APathAny represents the wildcard version of the /openconfig-nested/a YANG schema element.
type APathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *APath) PathOriginName() string {
	return "openconfig"
}

// B (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "b"
//	Path from root:       "/a/b"
func (n *APath) B() *A_BPath {
	ps := &A_BPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"b"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// B (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "b"
//	Path from root:       "/a/b"
func (n *APathAny) B() *A_BPathAny {
	ps := &A_BPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *APath) State() ygnmi.SingletonQuery[*oc.A] {
	return ygnmi.NewSingletonQuery[*oc.A](
		"A",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *APathAny) State() ygnmi.WildcardQuery[*oc.A] {
	return ygnmi.NewWildcardQuery[*oc.A](
		"A",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *APath) Config() ygnmi.ConfigQuery[*oc.A] {
	return ygnmi.NewConfigQuery[*oc.A](
		"A",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *APathAny) Config() ygnmi.WildcardQuery[*oc.A] {
	return ygnmi.NewWildcardQuery[*oc.A](
		"A",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// A_BPath represents the /openconfig-nested/a/b YANG schema element.
type A_BPath struct {
	*ygnmi.NodePath
}

// A_BPathAny represents the wildcard version of the /openconfig-nested/a/b YANG schema element.
type A_BPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *A_BPath) PathOriginName() string {
	return "openconfig"
}

// C (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "c"
//	Path from root:       "/a/b/c"
func (n *A_BPath) C() *A_B_CPath {
	ps := &A_B_CPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"c"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// C (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "c"
//	Path from root:       "/a/b/c"
func (n *A_BPathAny) C() *A_B_CPathAny {
	ps := &A_B_CPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"c"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *A_BPath) State() ygnmi.SingletonQuery[*oc.A_B] {
	return ygnmi.NewSingletonQuery[*oc.A_B](
		"A_B",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *A_BPathAny) State() ygnmi.WildcardQuery[*oc.A_B] {
	return ygnmi.NewWildcardQuery[*oc.A_B](
		"A_B",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_BPath) Config() ygnmi.ConfigQuery[*oc.A_B] {
	return ygnmi.NewConfigQuery[*oc.A_B](
		"A_B",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_BPathAny) Config() ygnmi.WildcardQuery[*oc.A_B] {
	return ygnmi.NewWildcardQuery[*oc.A_B](
		"A_B",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// A_B_CPath represents the /openconfig-nested/a/b/c YANG schema element.
type A_B_CPath struct {
	*ygnmi.NodePath
}

// A_B_CPathAny represents the wildcard version of the /openconfig-nested/a/b/c YANG schema element.
type A_B_CPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *A_B_CPath) PathOriginName() string {
	return "openconfig"
}

// D (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "d"
//	Path from root:       "/a/b/c/d"
func (n *A_B_CPath) D() *A_B_C_DPath {
	ps := &A_B_C_DPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"d"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// D (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "d"
//	Path from root:       "/a/b/c/d"
func (n *A_B_CPathAny) D() *A_B_C_DPathAny {
	ps := &A_B_C_DPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"d"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *A_B_CPath) State() ygnmi.SingletonQuery[*oc.A_B_C] {
	return ygnmi.NewSingletonQuery[*oc.A_B_C](
		"A_B_C",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *A_B_CPathAny) State() ygnmi.WildcardQuery[*oc.A_B_C] {
	return ygnmi.NewWildcardQuery[*oc.A_B_C](
		"A_B_C",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_B_CPath) Config() ygnmi.ConfigQuery[*oc.A_B_C] {
	return ygnmi.NewConfigQuery[*oc.A_B_C](
		"A_B_C",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_B_CPathAny) Config() ygnmi.WildcardQuery[*oc.A_B_C] {
	return ygnmi.NewWildcardQuery[*oc.A_B_C](
		"A_B_C",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// A_B_C_DPath represents the /openconfig-nested/a/b/c/d YANG schema element.
type A_B_C_DPath struct {
	*ygnmi.NodePath
}

// A_B_C_DPathAny represents the wildcard version of the /openconfig-nested/a/b/c/d YANG schema element.
type A_B_C_DPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *A_B_C_DPath) PathOriginName() string {
	return "openconfig"
}

// E (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "e"
//	Path from root:       "/a/b/c/d/e"
func (n *A_B_C_DPath) E() *A_B_C_D_EPath {
	ps := &A_B_C_D_EPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"e"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// E (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "e"
//	Path from root:       "/a/b/c/d/e"
func (n *A_B_C_DPathAny) E() *A_B_C_D_EPathAny {
	ps := &A_B_C_D_EPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"e"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *A_B_C_DPath) State() ygnmi.SingletonQuery[*oc.A_B_C_D] {
	return ygnmi.NewSingletonQuery[*oc.A_B_C_D](
		"A_B_C_D",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *A_B_C_DPathAny) State() ygnmi.WildcardQuery[*oc.A_B_C_D] {
	return ygnmi.NewWildcardQuery[*oc.A_B_C_D](
		"A_B_C_D",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_B_C_DPath) Config() ygnmi.ConfigQuery[*oc.A_B_C_D] {
	return ygnmi.NewConfigQuery[*oc.A_B_C_D](
		"A_B_C_D",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_B_C_DPathAny) Config() ygnmi.WildcardQuery[*oc.A_B_C_D] {
	return ygnmi.NewWildcardQuery[*oc.A_B_C_D](
		"A_B_C_D",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// A_B_C_D_EPath represents the /openconfig-nested/a/b/c/d/e YANG schema element.
type A_B_C_D_EPath struct {
	*ygnmi.NodePath
}

// A_B_C_D_EPathAny represents the wildcard version of the /openconfig-nested/a/b/c/d/e YANG schema element.
type A_B_C_D_EPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *A_B_C_D_EPath) PathOriginName() string {
	return "openconfig"
}

// F (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "f"
//	Path from root:       "/a/b/c/d/e/f"
func (n *A_B_C_D_EPath) F() *A_B_C_D_E_FPath {
	ps := &A_B_C_D_E_FPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"f"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// F (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "f"
//	Path from root:       "/a/b/c/d/e/f"
func (n *A_B_C_D_EPathAny) F() *A_B_C_D_E_FPathAny {
	ps := &A_B_C_D_E_FPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"f"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_EPath) State() ygnmi.SingletonQuery[*oc.A_B_C_D_E] {
	return ygnmi.NewSingletonQuery[*oc.A_B_C_D_E](
		"A_B_C_D_E",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_EPathAny) State() ygnmi.WildcardQuery[*oc.A_B_C_D_E] {
	return ygnmi.NewWildcardQuery[*oc.A_B_C_D_E](
		"A_B_C_D_E",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_EPath) Config() ygnmi.ConfigQuery[*oc.A_B_C_D_E] {
	return ygnmi.NewConfigQuery[*oc.A_B_C_D_E](
		"A_B_C_D_E",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_EPathAny) Config() ygnmi.WildcardQuery[*oc.A_B_C_D_E] {
	return ygnmi.NewWildcardQuery[*oc.A_B_C_D_E](
		"A_B_C_D_E",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// A_B_C_D_E_FPath represents the /openconfig-nested/a/b/c/d/e/f YANG schema element.
type A_B_C_D_E_FPath struct {
	*ygnmi.NodePath
}

// A_B_C_D_E_FPathAny represents the wildcard version of the /openconfig-nested/a/b/c/d/e/f YANG schema element.
type A_B_C_D_E_FPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *A_B_C_D_E_FPath) PathOriginName() string {
	return "openconfig"
}

// G (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "g"
//	Path from root:       "/a/b/c/d/e/f/g"
func (n *A_B_C_D_E_FPath) G() *A_B_C_D_E_F_GPath {
	ps := &A_B_C_D_E_F_GPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"g"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// G (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "g"
//	Path from root:       "/a/b/c/d/e/f/g"
func (n *A_B_C_D_E_FPathAny) G() *A_B_C_D_E_F_GPathAny {
	ps := &A_B_C_D_E_F_GPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"g"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_FPath) State() ygnmi.SingletonQuery[*oc.A_B_C_D_E_F] {
	return ygnmi.NewSingletonQuery[*oc.A_B_C_D_E_F](
		"A_B_C_D_E_F",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_FPathAny) State() ygnmi.WildcardQuery[*oc.A_B_C_D_E_F] {
	return ygnmi.NewWildcardQuery[*oc.A_B_C_D_E_F](
		"A_B_C_D_E_F",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_FPath) Config() ygnmi.ConfigQuery[*oc.A_B_C_D_E_F] {
	return ygnmi.NewConfigQuery[*oc.A_B_C_D_E_F](
		"A_B_C_D_E_F",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_FPathAny) Config() ygnmi.WildcardQuery[*oc.A_B_C_D_E_F] {
	return ygnmi.NewWildcardQuery[*oc.A_B_C_D_E_F](
		"A_B_C_D_E_F",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// A_B_C_D_E_F_GPath represents the /openconfig-nested/a/b/c/d/e/f/g YANG schema element.
type A_B_C_D_E_F_GPath struct {
	*ygnmi.NodePath
}

// A_B_C_D_E_F_GPathAny represents the wildcard version of the /openconfig-nested/a/b/c/d/e/f/g YANG schema element.
type A_B_C_D_E_F_GPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *A_B_C_D_E_F_GPath) PathOriginName() string {
	return "openconfig"
}

// H (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "h"
//	Path from root:       "/a/b/c/d/e/f/g/h"
func (n *A_B_C_D_E_F_GPath) H() *A_B_C_D_E_F_G_HPath {
	ps := &A_B_C_D_E_F_G_HPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"h"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// H (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "h"
//	Path from root:       "/a/b/c/d/e/f/g/h"
func (n *A_B_C_D_E_F_GPathAny) H() *A_B_C_D_E_F_G_HPathAny {
	ps := &A_B_C_D_E_F_G_HPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"h"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_GPath) State() ygnmi.SingletonQuery[*oc.A_B_C_D_E_F_G] {
	return ygnmi.NewSingletonQuery[*oc.A_B_C_D_E_F_G](
		"A_B_C_D_E_F_G",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_GPathAny) State() ygnmi.WildcardQuery[*oc.A_B_C_D_E_F_G] {
	return ygnmi.NewWildcardQuery[*oc.A_B_C_D_E_F_G](
		"A_B_C_D_E_F_G",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_GPath) Config() ygnmi.ConfigQuery[*oc.A_B_C_D_E_F_G] {
	return ygnmi.NewConfigQuery[*oc.A_B_C_D_E_F_G](
		"A_B_C_D_E_F_G",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_GPathAny) Config() ygnmi.WildcardQuery[*oc.A_B_C_D_E_F_G] {
	return ygnmi.NewWildcardQuery[*oc.A_B_C_D_E_F_G](
		"A_B_C_D_E_F_G",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// A_B_C_D_E_F_G_HPath represents the /openconfig-nested/a/b/c/d/e/f/g/h YANG schema element.
type A_B_C_D_E_F_G_HPath struct {
	*ygnmi.NodePath
}

// A_B_C_D_E_F_G_HPathAny represents the wildcard version of the /openconfig-nested/a/b/c/d/e/f/g/h YANG schema element.
type A_B_C_D_E_F_G_HPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *A_B_C_D_E_F_G_HPath) PathOriginName() string {
	return "openconfig"
}

// I (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "i"
//	Path from root:       "/a/b/c/d/e/f/g/h/i"
func (n *A_B_C_D_E_F_G_HPath) I() *A_B_C_D_E_F_G_H_IPath {
	ps := &A_B_C_D_E_F_G_H_IPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"i"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// I (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "i"
//	Path from root:       "/a/b/c/d/e/f/g/h/i"
func (n *A_B_C_D_E_F_G_HPathAny) I() *A_B_C_D_E_F_G_H_IPathAny {
	ps := &A_B_C_D_E_F_G_H_IPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"i"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_HPath) State() ygnmi.SingletonQuery[*oc.A_B_C_D_E_F_G_H] {
	return ygnmi.NewSingletonQuery[*oc.A_B_C_D_E_F_G_H](
		"A_B_C_D_E_F_G_H",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_HPathAny) State() ygnmi.WildcardQuery[*oc.A_B_C_D_E_F_G_H] {
	return ygnmi.NewWildcardQuery[*oc.A_B_C_D_E_F_G_H](
		"A_B_C_D_E_F_G_H",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_HPath) Config() ygnmi.ConfigQuery[*oc.A_B_C_D_E_F_G_H] {
	return ygnmi.NewConfigQuery[*oc.A_B_C_D_E_F_G_H](
		"A_B_C_D_E_F_G_H",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_HPathAny) Config() ygnmi.WildcardQuery[*oc.A_B_C_D_E_F_G_H] {
	return ygnmi.NewWildcardQuery[*oc.A_B_C_D_E_F_G_H](
		"A_B_C_D_E_F_G_H",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// A_B_C_D_E_F_G_H_IPath represents the /openconfig-nested/a/b/c/d/e/f/g/h/i YANG schema element.
type A_B_C_D_E_F_G_H_IPath struct {
	*ygnmi.NodePath
}

// A_B_C_D_E_F_G_H_IPathAny represents the wildcard version of the /openconfig-nested/a/b/c/d/e/f/g/h/i YANG schema element.
type A_B_C_D_E_F_G_H_IPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *A_B_C_D_E_F_G_H_IPath) PathOriginName() string {
	return "openconfig"
}

// J (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "j"
//	Path from root:       "/a/b/c/d/e/f/g/h/i/j"
func (n *A_B_C_D_E_F_G_H_IPath) J() *A_B_C_D_E_F_G_H_I_JPath {
	ps := &A_B_C_D_E_F_G_H_I_JPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"j"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// J (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "j"
//	Path from root:       "/a/b/c/d/e/f/g/h/i/j"
func (n *A_B_C_D_E_F_G_H_IPathAny) J() *A_B_C_D_E_F_G_H_I_JPathAny {
	ps := &A_B_C_D_E_F_G_H_I_JPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"j"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_H_IPath) State() ygnmi.SingletonQuery[*oc.A_B_C_D_E_F_G_H_I] {
	return ygnmi.NewSingletonQuery[*oc.A_B_C_D_E_F_G_H_I](
		"A_B_C_D_E_F_G_H_I",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_H_IPathAny) State() ygnmi.WildcardQuery[*oc.A_B_C_D_E_F_G_H_I] {
	return ygnmi.NewWildcardQuery[*oc.A_B_C_D_E_F_G_H_I](
		"A_B_C_D_E_F_G_H_I",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_H_IPath) Config() ygnmi.ConfigQuery[*oc.A_B_C_D_E_F_G_H_I] {
	return ygnmi.NewConfigQuery[*oc.A_B_C_D_E_F_G_H_I](
		"A_B_C_D_E_F_G_H_I",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_H_IPathAny) Config() ygnmi.WildcardQuery[*oc.A_B_C_D_E_F_G_H_I] {
	return ygnmi.NewWildcardQuery[*oc.A_B_C_D_E_F_G_H_I](
		"A_B_C_D_E_F_G_H_I",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// A_B_C_D_E_F_G_H_I_JPath represents the /openconfig-nested/a/b/c/d/e/f/g/h/i/j YANG schema element.
type A_B_C_D_E_F_G_H_I_JPath struct {
	*ygnmi.NodePath
}

// A_B_C_D_E_F_G_H_I_JPathAny represents the wildcard version of the /openconfig-nested/a/b/c/d/e/f/g/h/i/j YANG schema element.
type A_B_C_D_E_F_G_H_I_JPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *A_B_C_D_E_F_G_H_I_JPath) PathOriginName() string {
	return "openconfig"
}

// K (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "k"
//	Path from root:       "/a/b/c/d/e/f/g/h/i/j/k"
func (n *A_B_C_D_E_F_G_H_I_JPath) K() *A_B_C_D_E_F_G_H_I_J_KPath {
	ps := &A_B_C_D_E_F_G_H_I_J_KPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"k"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// K (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "k"
//	Path from root:       "/a/b/c/d/e/f/g/h/i/j/k"
func (n *A_B_C_D_E_F_G_H_I_JPathAny) K() *A_B_C_D_E_F_G_H_I_J_KPathAny {
	ps := &A_B_C_D_E_F_G_H_I_J_KPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"k"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_H_I_JPath) State() ygnmi.SingletonQuery[*oc.A_B_C_D_E_F_G_H_I_J] {
	return ygnmi.NewSingletonQuery[*oc.A_B_C_D_E_F_G_H_I_J](
		"A_B_C_D_E_F_G_H_I_J",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_H_I_JPathAny) State() ygnmi.WildcardQuery[*oc.A_B_C_D_E_F_G_H_I_J] {
	return ygnmi.NewWildcardQuery[*oc.A_B_C_D_E_F_G_H_I_J](
		"A_B_C_D_E_F_G_H_I_J",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_H_I_JPath) Config() ygnmi.ConfigQuery[*oc.A_B_C_D_E_F_G_H_I_J] {
	return ygnmi.NewConfigQuery[*oc.A_B_C_D_E_F_G_H_I_J](
		"A_B_C_D_E_F_G_H_I_J",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_H_I_JPathAny) Config() ygnmi.WildcardQuery[*oc.A_B_C_D_E_F_G_H_I_J] {
	return ygnmi.NewWildcardQuery[*oc.A_B_C_D_E_F_G_H_I_J](
		"A_B_C_D_E_F_G_H_I_J",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// A_B_C_D_E_F_G_H_I_J_KPath represents the /openconfig-nested/a/b/c/d/e/f/g/h/i/j/k YANG schema element.
type A_B_C_D_E_F_G_H_I_J_KPath struct {
	*ygnmi.NodePath
}

// A_B_C_D_E_F_G_H_I_J_KPathAny represents the wildcard version of the /openconfig-nested/a/b/c/d/e/f/g/h/i/j/k YANG schema element.
type A_B_C_D_E_F_G_H_I_J_KPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *A_B_C_D_E_F_G_H_I_J_KPath) PathOriginName() string {
	return "openconfig"
}

// L (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "l"
//	Path from root:       "/a/b/c/d/e/f/g/h/i/j/k/l"
func (n *A_B_C_D_E_F_G_H_I_J_KPath) L() *A_B_C_D_E_F_G_H_I_J_K_LPath {
	ps := &A_B_C_D_E_F_G_H_I_J_K_LPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"l"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "l"
//	Path from root:       "/a/b/c/d/e/f/g/h/i/j/k/l"
func (n *A_B_C_D_E_F_G_H_I_J_KPathAny) L() *A_B_C_D_E_F_G_H_I_J_K_LPathAny {
	ps := &A_B_C_D_E_F_G_H_I_J_K_LPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"l"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_H_I_J_KPath) State() ygnmi.SingletonQuery[*oc.A_B_C_D_E_F_G_H_I_J_K] {
	return ygnmi.NewSingletonQuery[*oc.A_B_C_D_E_F_G_H_I_J_K](
		"A_B_C_D_E_F_G_H_I_J_K",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_H_I_J_KPathAny) State() ygnmi.WildcardQuery[*oc.A_B_C_D_E_F_G_H_I_J_K] {
	return ygnmi.NewWildcardQuery[*oc.A_B_C_D_E_F_G_H_I_J_K](
		"A_B_C_D_E_F_G_H_I_J_K",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_H_I_J_KPath) Config() ygnmi.ConfigQuery[*oc.A_B_C_D_E_F_G_H_I_J_K] {
	return ygnmi.NewConfigQuery[*oc.A_B_C_D_E_F_G_H_I_J_K](
		"A_B_C_D_E_F_G_H_I_J_K",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_H_I_J_KPathAny) Config() ygnmi.WildcardQuery[*oc.A_B_C_D_E_F_G_H_I_J_K] {
	return ygnmi.NewWildcardQuery[*oc.A_B_C_D_E_F_G_H_I_J_K](
		"A_B_C_D_E_F_G_H_I_J_K",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// A_B_C_D_E_F_G_H_I_J_K_LPath represents the /openconfig-nested/a/b/c/d/e/f/g/h/i/j/k/l YANG schema element.
type A_B_C_D_E_F_G_H_I_J_K_LPath struct {
	*ygnmi.NodePath
}

// A_B_C_D_E_F_G_H_I_J_K_LPathAny represents the wildcard version of the /openconfig-nested/a/b/c/d/e/f/g/h/i/j/k/l YANG schema element.
type A_B_C_D_E_F_G_H_I_J_K_LPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *A_B_C_D_E_F_G_H_I_J_K_LPath) PathOriginName() string {
	return "openconfig"
}

// M (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "m"
//	Path from root:       "/a/b/c/d/e/f/g/h/i/j/k/l/m"
func (n *A_B_C_D_E_F_G_H_I_J_K_LPath) M() *A_B_C_D_E_F_G_H_I_J_K_L_MPath {
	ps := &A_B_C_D_E_F_G_H_I_J_K_L_MPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"m"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// M (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "m"
//	Path from root:       "/a/b/c/d/e/f/g/h/i/j/k/l/m"
func (n *A_B_C_D_E_F_G_H_I_J_K_LPathAny) M() *A_B_C_D_E_F_G_H_I_J_K_L_MPathAny {
	ps := &A_B_C_D_E_F_G_H_I_J_K_L_MPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"m"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_H_I_J_K_LPath) State() ygnmi.SingletonQuery[*oc.A_B_C_D_E_F_G_H_I_J_K_L] {
	return ygnmi.NewSingletonQuery[*oc.A_B_C_D_E_F_G_H_I_J_K_L](
		"A_B_C_D_E_F_G_H_I_J_K_L",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_H_I_J_K_LPathAny) State() ygnmi.WildcardQuery[*oc.A_B_C_D_E_F_G_H_I_J_K_L] {
	return ygnmi.NewWildcardQuery[*oc.A_B_C_D_E_F_G_H_I_J_K_L](
		"A_B_C_D_E_F_G_H_I_J_K_L",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_H_I_J_K_LPath) Config() ygnmi.ConfigQuery[*oc.A_B_C_D_E_F_G_H_I_J_K_L] {
	return ygnmi.NewConfigQuery[*oc.A_B_C_D_E_F_G_H_I_J_K_L](
		"A_B_C_D_E_F_G_H_I_J_K_L",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_H_I_J_K_LPathAny) Config() ygnmi.WildcardQuery[*oc.A_B_C_D_E_F_G_H_I_J_K_L] {
	return ygnmi.NewWildcardQuery[*oc.A_B_C_D_E_F_G_H_I_J_K_L](
		"A_B_C_D_E_F_G_H_I_J_K_L",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// A_B_C_D_E_F_G_H_I_J_K_L_M_FooPath represents the /openconfig-nested/a/b/c/d/e/f/g/h/i/j/k/l/m/state/foo YANG schema element.
type A_B_C_D_E_F_G_H_I_J_K_L_M_FooPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// A_B_C_D_E_F_G_H_I_J_K_L_M_FooPathAny represents the wildcard version of the /openconfig-nested/a/b/c/d/e/f/g/h/i/j/k/l/m/state/foo YANG schema element.
type A_B_C_D_E_F_G_H_I_J_K_L_M_FooPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *A_B_C_D_E_F_G_H_I_J_K_L_M_FooPath) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "state/foo"
//	Path from root:       "/a/b/c/d/e/f/g/h/i/j/k/l/m/state/foo"
func (n *A_B_C_D_E_F_G_H_I_J_K_L_M_FooPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"A_B_C_D_E_F_G_H_I_J_K_L_M",
		true,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "foo"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.A_B_C_D_E_F_G_H_I_J_K_L_M).Foo
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.A_B_C_D_E_F_G_H_I_J_K_L_M) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "state/foo"
//	Path from root:       "/a/b/c/d/e/f/g/h/i/j/k/l/m/state/foo"
func (n *A_B_C_D_E_F_G_H_I_J_K_L_M_FooPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"A_B_C_D_E_F_G_H_I_J_K_L_M",
		true,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "foo"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.A_B_C_D_E_F_G_H_I_J_K_L_M).Foo
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.A_B_C_D_E_F_G_H_I_J_K_L_M) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// A_B_C_D_E_F_G_H_I_J_K_L_MPath represents the /openconfig-nested/a/b/c/d/e/f/g/h/i/j/k/l/m YANG schema element.
type A_B_C_D_E_F_G_H_I_J_K_L_MPath struct {
	*ygnmi.NodePath
}

// A_B_C_D_E_F_G_H_I_J_K_L_MPathAny represents the wildcard version of the /openconfig-nested/a/b/c/d/e/f/g/h/i/j/k/l/m YANG schema element.
type A_B_C_D_E_F_G_H_I_J_K_L_MPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *A_B_C_D_E_F_G_H_I_J_K_L_MPath) PathOriginName() string {
	return "openconfig"
}

// Foo (leaf):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "state/foo"
//	Path from root:       "/a/b/c/d/e/f/g/h/i/j/k/l/m/state/foo"
func (n *A_B_C_D_E_F_G_H_I_J_K_L_MPath) Foo() *A_B_C_D_E_F_G_H_I_J_K_L_M_FooPath {
	ps := &A_B_C_D_E_F_G_H_I_J_K_L_M_FooPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "foo"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Foo (leaf):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "state/foo"
//	Path from root:       "/a/b/c/d/e/f/g/h/i/j/k/l/m/state/foo"
func (n *A_B_C_D_E_F_G_H_I_J_K_L_MPathAny) Foo() *A_B_C_D_E_F_G_H_I_J_K_L_M_FooPathAny {
	ps := &A_B_C_D_E_F_G_H_I_J_K_L_M_FooPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "foo"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_H_I_J_K_L_MPath) State() ygnmi.SingletonQuery[*oc.A_B_C_D_E_F_G_H_I_J_K_L_M] {
	return ygnmi.NewSingletonQuery[*oc.A_B_C_D_E_F_G_H_I_J_K_L_M](
		"A_B_C_D_E_F_G_H_I_J_K_L_M",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_H_I_J_K_L_MPathAny) State() ygnmi.WildcardQuery[*oc.A_B_C_D_E_F_G_H_I_J_K_L_M] {
	return ygnmi.NewWildcardQuery[*oc.A_B_C_D_E_F_G_H_I_J_K_L_M](
		"A_B_C_D_E_F_G_H_I_J_K_L_M",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_H_I_J_K_L_MPath) Config() ygnmi.ConfigQuery[*oc.A_B_C_D_E_F_G_H_I_J_K_L_M] {
	return ygnmi.NewConfigQuery[*oc.A_B_C_D_E_F_G_H_I_J_K_L_M](
		"A_B_C_D_E_F_G_H_I_J_K_L_M",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *A_B_C_D_E_F_G_H_I_J_K_L_MPathAny) Config() ygnmi.WildcardQuery[*oc.A_B_C_D_E_F_G_H_I_J_K_L_M] {
	return ygnmi.NewWildcardQuery[*oc.A_B_C_D_E_F_G_H_I_J_K_L_M](
		"A_B_C_D_E_F_G_H_I_J_K_L_M",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_E1Path represents the /openconfig-unione/platform/component/state/e1 YANG schema element.
type Component_E1Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_E1PathAny represents the wildcard version of the /openconfig-unione/platform/component/state/e1 YANG schema element.
type Component_E1PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *Component_E1Path) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/e1"
//	Path from root:       "/platform/component/state/e1"
func (n *Component_E1Path) State() ygnmi.SingletonQuery[oc.Component_E1_Union] {
	return ygnmi.NewSingletonQuery[oc.Component_E1_Union](
		"Component",
		true,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "e1"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_E1_Union, bool) {
			ret := gs.(*oc.Component).E1
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/e1"
//	Path from root:       "/platform/component/state/e1"
func (n *Component_E1PathAny) State() ygnmi.WildcardQuery[oc.Component_E1_Union] {
	return ygnmi.NewWildcardQuery[oc.Component_E1_Union](
		"Component",
		true,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "e1"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_E1_Union, bool) {
			ret := gs.(*oc.Component).E1
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_EnumeratedPath represents the /openconfig-unione/platform/component/state/enumerated YANG schema element.
type Component_EnumeratedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_EnumeratedPathAny represents the wildcard version of the /openconfig-unione/platform/component/state/enumerated YANG schema element.
type Component_EnumeratedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *Component_EnumeratedPath) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/enumerated"
//	Path from root:       "/platform/component/state/enumerated"
func (n *Component_EnumeratedPath) State() ygnmi.SingletonQuery[oc.Component_Enumerated_Union] {
	return ygnmi.NewSingletonQuery[oc.Component_Enumerated_Union](
		"Component",
		true,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enumerated"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_Enumerated_Union, bool) {
			ret := gs.(*oc.Component).Enumerated
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/enumerated"
//	Path from root:       "/platform/component/state/enumerated"
func (n *Component_EnumeratedPathAny) State() ygnmi.WildcardQuery[oc.Component_Enumerated_Union] {
	return ygnmi.NewWildcardQuery[oc.Component_Enumerated_Union](
		"Component",
		true,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enumerated"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_Enumerated_Union, bool) {
			ret := gs.(*oc.Component).Enumerated
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_NamePath represents the /openconfig-unione/platform/component/config/name YANG schema element.
type Component_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_NamePathAny represents the wildcard version of the /openconfig-unione/platform/component/config/name YANG schema element.
type Component_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *Component_NamePath) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/name"
//	Path from root:       "/platform/component/state/name"
func (n *Component_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component",
		true,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/name"
//	Path from root:       "/platform/component/state/name"
func (n *Component_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		true,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "config/name"
//	Path from root:       "/platform/component/config/name"
func (n *Component_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component",
		false,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "config/name"
//	Path from root:       "/platform/component/config/name"
func (n *Component_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component",
		false,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_PowerPath represents the /openconfig-unione/platform/component/state/power YANG schema element.
type Component_PowerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_PowerPathAny represents the wildcard version of the /openconfig-unione/platform/component/state/power YANG schema element.
type Component_PowerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *Component_PowerPath) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/power"
//	Path from root:       "/platform/component/state/power"
func (n *Component_PowerPath) State() ygnmi.SingletonQuery[oc.Component_Power_Union] {
	return ygnmi.NewSingletonQuery[oc.Component_Power_Union](
		"Component",
		true,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_Power_Union, bool) {
			ret := gs.(*oc.Component).Power
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/power"
//	Path from root:       "/platform/component/state/power"
func (n *Component_PowerPathAny) State() ygnmi.WildcardQuery[oc.Component_Power_Union] {
	return ygnmi.NewWildcardQuery[oc.Component_Power_Union](
		"Component",
		true,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_Power_Union, bool) {
			ret := gs.(*oc.Component).Power
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_R1Path represents the /openconfig-unione/platform/component/state/r1 YANG schema element.
type Component_R1Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_R1PathAny represents the wildcard version of the /openconfig-unione/platform/component/state/r1 YANG schema element.
type Component_R1PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *Component_R1Path) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/r1"
//	Path from root:       "/platform/component/state/r1"
func (n *Component_R1Path) State() ygnmi.SingletonQuery[oc.Component_E1_Union] {
	return ygnmi.NewSingletonQuery[oc.Component_E1_Union](
		"Component",
		true,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "r1"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_E1_Union, bool) {
			ret := gs.(*oc.Component).R1
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/r1"
//	Path from root:       "/platform/component/state/r1"
func (n *Component_R1PathAny) State() ygnmi.WildcardQuery[oc.Component_E1_Union] {
	return ygnmi.NewWildcardQuery[oc.Component_E1_Union](
		"Component",
		true,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "r1"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_E1_Union, bool) {
			ret := gs.(*oc.Component).R1
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_TypePath represents the /openconfig-unione/platform/component/state/type YANG schema element.
type Component_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_TypePathAny represents the wildcard version of the /openconfig-unione/platform/component/state/type YANG schema element.
type Component_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *Component_TypePath) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/type"
//	Path from root:       "/platform/component/state/type"
func (n *Component_TypePath) State() ygnmi.SingletonQuery[oc.Component_Type_Union] {
	return ygnmi.NewSingletonQuery[oc.Component_Type_Union](
		"Component",
		true,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_Type_Union, bool) {
			ret := gs.(*oc.Component).Type
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/type"
//	Path from root:       "/platform/component/state/type"
func (n *Component_TypePathAny) State() ygnmi.WildcardQuery[oc.Component_Type_Union] {
	return ygnmi.NewWildcardQuery[oc.Component_Type_Union](
		"Component",
		true,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_Type_Union, bool) {
			ret := gs.(*oc.Component).Type
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// ComponentPath represents the /openconfig-unione/platform/component YANG schema element.
type ComponentPath struct {
	*ygnmi.NodePath
}

// ComponentPathAny represents the wildcard version of the /openconfig-unione/platform/component YANG schema element.
type ComponentPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *ComponentPath) PathOriginName() string {
	return "openconfig"
}

// ComponentPathMap represents the /openconfig-unione/platform/component YANG schema element.
type ComponentPathMap struct {
	*ygnmi.NodePath
}

// ComponentPathMapAny represents the wildcard version of the /openconfig-unione/platform/component YANG schema element.
type ComponentPathMapAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *ComponentPathMap) PathOriginName() string {
	return "openconfig"
}

// E1 (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/e1"
//	Path from root:       "/platform/component/state/e1"
func (n *ComponentPath) E1() *Component_E1Path {
	ps := &Component_E1Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "e1"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// E1 (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/e1"
//	Path from root:       "/platform/component/state/e1"
func (n *ComponentPathAny) E1() *Component_E1PathAny {
	ps := &Component_E1PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "e1"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enumerated (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/enumerated"
//	Path from root:       "/platform/component/state/enumerated"
func (n *ComponentPath) Enumerated() *Component_EnumeratedPath {
	ps := &Component_EnumeratedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "enumerated"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enumerated (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/enumerated"
//	Path from root:       "/platform/component/state/enumerated"
func (n *ComponentPathAny) Enumerated() *Component_EnumeratedPathAny {
	ps := &Component_EnumeratedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "enumerated"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "*/name"
//	Path from root:       "/platform/component/*/name"
func (n *ComponentPath) Name() *Component_NamePath {
	ps := &Component_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "*/name"
//	Path from root:       "/platform/component/*/name"
func (n *ComponentPathAny) Name() *Component_NamePathAny {
	ps := &Component_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Power (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/power"
//	Path from root:       "/platform/component/state/power"
func (n *ComponentPath) Power() *Component_PowerPath {
	ps := &Component_PowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "power"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Power (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/power"
//	Path from root:       "/platform/component/state/power"
func (n *ComponentPathAny) Power() *Component_PowerPathAny {
	ps := &Component_PowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "power"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// R1 (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/r1"
//	Path from root:       "/platform/component/state/r1"
func (n *ComponentPath) R1() *Component_R1Path {
	ps := &Component_R1Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "r1"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// R1 (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/r1"
//	Path from root:       "/platform/component/state/r1"
func (n *ComponentPathAny) R1() *Component_R1PathAny {
	ps := &Component_R1PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "r1"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/type"
//	Path from root:       "/platform/component/state/type"
func (n *ComponentPath) Type() *Component_TypePath {
	ps := &Component_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/type"
//	Path from root:       "/platform/component/state/type"
func (n *ComponentPathAny) Type() *Component_TypePathAny {
	ps := &Component_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *ComponentPath) State() ygnmi.SingletonQuery[*oc.Component] {
	return ygnmi.NewSingletonQuery[*oc.Component](
		"Component",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *ComponentPathAny) State() ygnmi.WildcardQuery[*oc.Component] {
	return ygnmi.NewWildcardQuery[*oc.Component](
		"Component",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *ComponentPath) Config() ygnmi.ConfigQuery[*oc.Component] {
	return ygnmi.NewConfigQuery[*oc.Component](
		"Component",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *ComponentPathAny) Config() ygnmi.WildcardQuery[*oc.Component] {
	return ygnmi.NewWildcardQuery[*oc.Component](
		"Component",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *ComponentPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Component] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Component](
		"Root",
		true,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component, bool) {
			ret := gs.(*oc.Root).Component
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-unione:platform"},
			PostRelPath: []string{"openconfig-unione:component"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *ComponentPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Component] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component](
		"Root",
		true,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component, bool) {
			ret := gs.(*oc.Root).Component
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-unione:platform"},
			PostRelPath: []string{"openconfig-unione:component"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *ComponentPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Component] {
	return ygnmi.NewConfigQuery[map[string]*oc.Component](
		"Root",
		false,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component, bool) {
			ret := gs.(*oc.Root).Component
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-unione:platform"},
			PostRelPath: []string{"openconfig-unione:component"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *ComponentPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Component] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component](
		"Root",
		false,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component, bool) {
			ret := gs.(*oc.Root).Component
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-unione:platform"},
			PostRelPath: []string{"openconfig-unione:component"},
		},
	)
}

// ContainerPath represents the /openconfig-nested/container YANG schema element.
type ContainerPath struct {
	*ygnmi.NodePath
}

// ContainerPathAny represents the wildcard version of the /openconfig-nested/container YANG schema element.
type ContainerPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *ContainerPath) PathOriginName() string {
	return "openconfig"
}

// State returns a Query that can be used in gNMI operations.
func (n *ContainerPath) State() ygnmi.SingletonQuery[*oc.Container] {
	return ygnmi.NewSingletonQuery[*oc.Container](
		"Container",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *ContainerPathAny) State() ygnmi.WildcardQuery[*oc.Container] {
	return ygnmi.NewWildcardQuery[*oc.Container](
		"Container",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *ContainerPath) Config() ygnmi.ConfigQuery[*oc.Container] {
	return ygnmi.NewConfigQuery[*oc.Container](
		"Container",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *ContainerPathAny) Config() ygnmi.WildcardQuery[*oc.Container] {
	return ygnmi.NewWildcardQuery[*oc.Container](
		"Container",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// DupEnum_APath represents the /openconfig-unione/dup-enum/state/A YANG schema element.
type DupEnum_APath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// DupEnum_APathAny represents the wildcard version of the /openconfig-unione/dup-enum/state/A YANG schema element.
type DupEnum_APathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *DupEnum_APath) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/A"
//	Path from root:       "/dup-enum/state/A"
func (n *DupEnum_APath) State() ygnmi.SingletonQuery[oc.E_DupEnum_A] {
	return ygnmi.NewSingletonQuery[oc.E_DupEnum_A](
		"DupEnum",
		true,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "A"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_DupEnum_A, bool) {
			ret := gs.(*oc.DupEnum).A
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.DupEnum) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/A"
//	Path from root:       "/dup-enum/state/A"
func (n *DupEnum_APathAny) State() ygnmi.WildcardQuery[oc.E_DupEnum_A] {
	return ygnmi.NewWildcardQuery[oc.E_DupEnum_A](
		"DupEnum",
		true,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "A"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_DupEnum_A, bool) {
			ret := gs.(*oc.DupEnum).A
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.DupEnum) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// DupEnum_BPath represents the /openconfig-unione/dup-enum/state/B YANG schema element.
type DupEnum_BPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// DupEnum_BPathAny represents the wildcard version of the /openconfig-unione/dup-enum/state/B YANG schema element.
type DupEnum_BPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *DupEnum_BPath) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/B"
//	Path from root:       "/dup-enum/state/B"
func (n *DupEnum_BPath) State() ygnmi.SingletonQuery[oc.E_DupEnum_B] {
	return ygnmi.NewSingletonQuery[oc.E_DupEnum_B](
		"DupEnum",
		true,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "B"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_DupEnum_B, bool) {
			ret := gs.(*oc.DupEnum).B
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.DupEnum) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/B"
//	Path from root:       "/dup-enum/state/B"
func (n *DupEnum_BPathAny) State() ygnmi.WildcardQuery[oc.E_DupEnum_B] {
	return ygnmi.NewWildcardQuery[oc.E_DupEnum_B](
		"DupEnum",
		true,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "B"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_DupEnum_B, bool) {
			ret := gs.(*oc.DupEnum).B
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.DupEnum) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// DupEnumPath represents the /openconfig-unione/dup-enum YANG schema element.
type DupEnumPath struct {
	*ygnmi.NodePath
}

// DupEnumPathAny represents the wildcard version of the /openconfig-unione/dup-enum YANG schema element.
type DupEnumPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *DupEnumPath) PathOriginName() string {
	return "openconfig"
}

// A (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/A"
//	Path from root:       "/dup-enum/state/A"
func (n *DupEnumPath) A() *DupEnum_APath {
	ps := &DupEnum_APath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "A"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// A (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/A"
//	Path from root:       "/dup-enum/state/A"
func (n *DupEnumPathAny) A() *DupEnum_APathAny {
	ps := &DupEnum_APathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "A"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// B (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/B"
//	Path from root:       "/dup-enum/state/B"
func (n *DupEnumPath) B() *DupEnum_BPath {
	ps := &DupEnum_BPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "B"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// B (leaf):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "state/B"
//	Path from root:       "/dup-enum/state/B"
func (n *DupEnumPathAny) B() *DupEnum_BPathAny {
	ps := &DupEnum_BPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "B"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *DupEnumPath) State() ygnmi.SingletonQuery[*oc.DupEnum] {
	return ygnmi.NewSingletonQuery[*oc.DupEnum](
		"DupEnum",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *DupEnumPathAny) State() ygnmi.WildcardQuery[*oc.DupEnum] {
	return ygnmi.NewWildcardQuery[*oc.DupEnum](
		"DupEnum",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DupEnumPath) Config() ygnmi.ConfigQuery[*oc.DupEnum] {
	return ygnmi.NewConfigQuery[*oc.DupEnum](
		"DupEnum",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DupEnumPathAny) Config() ygnmi.WildcardQuery[*oc.DupEnum] {
	return ygnmi.NewWildcardQuery[*oc.DupEnum](
		"DupEnum",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// ModelPath represents the /openconfig-withlistval/model YANG schema element.
type ModelPath struct {
	*ygnmi.NodePath
}

// ModelPathAny represents the wildcard version of the /openconfig-withlistval/model YANG schema element.
type ModelPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *ModelPath) PathOriginName() string {
	return "openconfig"
}

// MultiKeyAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "b/multi-key"
//	Path from root:       "/model/b/multi-key"
func (n *ModelPath) MultiKeyAny() *modelb.Model_MultiKeyPathAny {
	ps := &modelb.Model_MultiKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": "*", "key2": "*"},
			n,
		),
	}
	return ps
}

// MultiKeyAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "b/multi-key"
//	Path from root:       "/model/b/multi-key"
func (n *ModelPathAny) MultiKeyAny() *modelb.Model_MultiKeyPathAny {
	ps := &modelb.Model_MultiKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": "*", "key2": "*"},
			n,
		),
	}
	return ps
}

// MultiKey (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "b/multi-key"
//	Path from root:       "/model/b/multi-key"
//
//	Key1: uint32
//	Key2: uint64
func (n *ModelPath) MultiKey(Key1 uint32, Key2 uint64) *modelb.Model_MultiKeyPath {
	ps := &modelb.Model_MultiKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": Key1, "key2": Key2},
			n,
		),
	}
	return ps
}

// MultiKey (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "b/multi-key"
//	Path from root:       "/model/b/multi-key"
//
//	Key1: uint32
//	Key2: uint64
func (n *ModelPathAny) MultiKey(Key1 uint32, Key2 uint64) *modelb.Model_MultiKeyPathAny {
	ps := &modelb.Model_MultiKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": Key1, "key2": Key2},
			n,
		),
	}
	return ps
}

// MultiKeyMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "b/multi-key"
//	Path from root:       "/model/b/multi-key"
func (n *ModelPath) MultiKeyMap() *modelb.Model_MultiKeyPathMap {
	ps := &modelb.Model_MultiKeyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"b"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MultiKeyMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "b/multi-key"
//	Path from root:       "/model/b/multi-key"
func (n *ModelPathAny) MultiKeyMap() *modelb.Model_MultiKeyPathMapAny {
	ps := &modelb.Model_MultiKeyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NoKeyAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "c/no-key"
//	Path from root:       "/model/c/no-key"
func (n *ModelPath) NoKeyAny() *Model_NoKeyPathAny {
	ps := &Model_NoKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"c", "no-key"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NoKeyAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "c/no-key"
//	Path from root:       "/model/c/no-key"
func (n *ModelPathAny) NoKeyAny() *Model_NoKeyPathAny {
	ps := &Model_NoKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"c", "no-key"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SingleKeyAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "a/single-key"
//	Path from root:       "/model/a/single-key"
func (n *ModelPath) SingleKeyAny() *a.Model_SingleKeyPathAny {
	ps := &a.Model_SingleKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
	return ps
}

// SingleKeyAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "a/single-key"
//	Path from root:       "/model/a/single-key"
func (n *ModelPathAny) SingleKeyAny() *a.Model_SingleKeyPathAny {
	ps := &a.Model_SingleKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
	return ps
}

// SingleKey (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "a/single-key"
//	Path from root:       "/model/a/single-key"
//
//	Key: string
func (n *ModelPath) SingleKey(Key string) *a.Model_SingleKeyPath {
	ps := &a.Model_SingleKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
	return ps
}

// SingleKey (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "a/single-key"
//	Path from root:       "/model/a/single-key"
//
//	Key: string
func (n *ModelPathAny) SingleKey(Key string) *a.Model_SingleKeyPathAny {
	ps := &a.Model_SingleKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
	return ps
}

// SingleKeyMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "a/single-key"
//	Path from root:       "/model/a/single-key"
func (n *ModelPath) SingleKeyMap() *a.Model_SingleKeyPathMap {
	ps := &a.Model_SingleKeyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"a"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SingleKeyMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "a/single-key"
//	Path from root:       "/model/a/single-key"
func (n *ModelPathAny) SingleKeyMap() *a.Model_SingleKeyPathMapAny {
	ps := &a.Model_SingleKeyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *ModelPath) State() ygnmi.SingletonQuery[*oc.Model] {
	return ygnmi.NewSingletonQuery[*oc.Model](
		"Model",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *ModelPathAny) State() ygnmi.WildcardQuery[*oc.Model] {
	return ygnmi.NewWildcardQuery[*oc.Model](
		"Model",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *ModelPath) Config() ygnmi.ConfigQuery[*oc.Model] {
	return ygnmi.NewConfigQuery[*oc.Model](
		"Model",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *ModelPathAny) Config() ygnmi.WildcardQuery[*oc.Model] {
	return ygnmi.NewWildcardQuery[*oc.Model](
		"Model",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Model_NoKeyPath represents the /openconfig-withlistval/model/c/no-key YANG schema element.
type Model_NoKeyPath struct {
	*ygnmi.NodePath
}

// Model_NoKeyPathAny represents the wildcard version of the /openconfig-withlistval/model/c/no-key YANG schema element.
type Model_NoKeyPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Model_NoKeyPath) PathOriginName() string {
	return "openconfig"
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_NoKeyPath) State() ygnmi.SingletonQuery[*oc.Model_NoKey] {
	return ygnmi.NewSingletonQuery[*oc.Model_NoKey](
		"Model_NoKey",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_NoKeyPathAny) State() ygnmi.WildcardQuery[*oc.Model_NoKey] {
	return ygnmi.NewWildcardQuery[*oc.Model_NoKey](
		"Model_NoKey",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Model_NoKey_Foo_KeyPath represents the /openconfig-withlistval/model/c/no-key/foo/state/key YANG schema element.
type Model_NoKey_Foo_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Model_NoKey_Foo_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/c/no-key/foo/state/key YANG schema element.
type Model_NoKey_Foo_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *Model_NoKey_Foo_KeyPath) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/key"
//	Path from root:       "/model/c/no-key/foo/state/key"
func (n *Model_NoKey_Foo_KeyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Model_NoKey_Foo",
		true,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Model_NoKey_Foo).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_NoKey_Foo) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/key"
//	Path from root:       "/model/c/no-key/foo/state/key"
func (n *Model_NoKey_Foo_KeyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Model_NoKey_Foo",
		true,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Model_NoKey_Foo).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_NoKey_Foo) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Model_NoKey_Foo_ValuePath represents the /openconfig-withlistval/model/c/no-key/foo/state/value YANG schema element.
type Model_NoKey_Foo_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Model_NoKey_Foo_ValuePathAny represents the wildcard version of the /openconfig-withlistval/model/c/no-key/foo/state/value YANG schema element.
type Model_NoKey_Foo_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *Model_NoKey_Foo_ValuePath) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/value"
//	Path from root:       "/model/c/no-key/foo/state/value"
func (n *Model_NoKey_Foo_ValuePath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"Model_NoKey_Foo",
		true,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Model_NoKey_Foo).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_NoKey_Foo) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/value"
//	Path from root:       "/model/c/no-key/foo/state/value"
func (n *Model_NoKey_Foo_ValuePathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Model_NoKey_Foo",
		true,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Model_NoKey_Foo).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_NoKey_Foo) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Model_NoKey_FooPath represents the /openconfig-withlistval/model/c/no-key/foo YANG schema element.
type Model_NoKey_FooPath struct {
	*ygnmi.NodePath
}

// Model_NoKey_FooPathAny represents the wildcard version of the /openconfig-withlistval/model/c/no-key/foo YANG schema element.
type Model_NoKey_FooPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Model_NoKey_FooPath) PathOriginName() string {
	return "openconfig"
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/key"
//	Path from root:       "/model/c/no-key/foo/state/key"
func (n *Model_NoKey_FooPath) Key() *Model_NoKey_Foo_KeyPath {
	ps := &Model_NoKey_Foo_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/key"
//	Path from root:       "/model/c/no-key/foo/state/key"
func (n *Model_NoKey_FooPathAny) Key() *Model_NoKey_Foo_KeyPathAny {
	ps := &Model_NoKey_Foo_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/value"
//	Path from root:       "/model/c/no-key/foo/state/value"
func (n *Model_NoKey_FooPath) Value() *Model_NoKey_Foo_ValuePath {
	ps := &Model_NoKey_Foo_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/value"
//	Path from root:       "/model/c/no-key/foo/state/value"
func (n *Model_NoKey_FooPathAny) Value() *Model_NoKey_Foo_ValuePathAny {
	ps := &Model_NoKey_Foo_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_NoKey_FooPath) State() ygnmi.SingletonQuery[*oc.Model_NoKey_Foo] {
	return ygnmi.NewSingletonQuery[*oc.Model_NoKey_Foo](
		"Model_NoKey_Foo",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_NoKey_FooPathAny) State() ygnmi.WildcardQuery[*oc.Model_NoKey_Foo] {
	return ygnmi.NewWildcardQuery[*oc.Model_NoKey_Foo](
		"Model_NoKey_Foo",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// ParentPath represents the /openconfig-simple/parent YANG schema element.
type ParentPath struct {
	*ygnmi.NodePath
}

// ParentPathAny represents the wildcard version of the /openconfig-simple/parent YANG schema element.
type ParentPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *ParentPath) PathOriginName() string {
	return "openconfig"
}

// Child (container):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "child"
//	Path from root:       "/parent/child"
func (n *ParentPath) Child() *Parent_ChildPath {
	ps := &Parent_ChildPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"child"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Child (container):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "child"
//	Path from root:       "/parent/child"
func (n *ParentPathAny) Child() *Parent_ChildPathAny {
	ps := &Parent_ChildPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"child"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *ParentPath) State() ygnmi.SingletonQuery[*oc.Parent] {
	return ygnmi.NewSingletonQuery[*oc.Parent](
		"Parent",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *ParentPathAny) State() ygnmi.WildcardQuery[*oc.Parent] {
	return ygnmi.NewWildcardQuery[*oc.Parent](
		"Parent",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *ParentPath) Config() ygnmi.ConfigQuery[*oc.Parent] {
	return ygnmi.NewConfigQuery[*oc.Parent](
		"Parent",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *ParentPathAny) Config() ygnmi.WildcardQuery[*oc.Parent] {
	return ygnmi.NewWildcardQuery[*oc.Parent](
		"Parent",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Parent_Child_FivePath represents the /openconfig-simple/parent/child/config/five YANG schema element.
type Parent_Child_FivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Parent_Child_FivePathAny represents the wildcard version of the /openconfig-simple/parent/child/config/five YANG schema element.
type Parent_Child_FivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *Parent_Child_FivePath) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "state/five"
//	Path from root:       "/parent/child/state/five"
func (n *Parent_Child_FivePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"Parent_Child",
		true,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "five"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Parent_Child).Five
			v := reflect.ValueOf(ret)
			return ygot.BinaryToFloat32(ret), v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Parent_Child) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "state/five"
//	Path from root:       "/parent/child/state/five"
func (n *Parent_Child_FivePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Parent_Child",
		true,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "five"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Parent_Child).Five
			v := reflect.ValueOf(ret)
			return ygot.BinaryToFloat32(ret), v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Parent_Child) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "config/five"
//	Path from root:       "/parent/child/config/five"
func (n *Parent_Child_FivePath) Config() ygnmi.ConfigQuery[float32] {
	return ygnmi.NewConfigQuery[float32](
		"Parent_Child",
		false,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "five"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Parent_Child).Five
			v := reflect.ValueOf(ret)
			return ygot.BinaryToFloat32(ret), v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Parent_Child) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "config/five"
//	Path from root:       "/parent/child/config/five"
func (n *Parent_Child_FivePathAny) Config() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"Parent_Child",
		false,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "five"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Parent_Child).Five
			v := reflect.ValueOf(ret)
			return ygot.BinaryToFloat32(ret), v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Parent_Child) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Parent_Child_FourPath represents the /openconfig-simple/parent/child/config/four YANG schema element.
type Parent_Child_FourPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Parent_Child_FourPathAny represents the wildcard version of the /openconfig-simple/parent/child/config/four YANG schema element.
type Parent_Child_FourPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *Parent_Child_FourPath) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "state/four"
//	Path from root:       "/parent/child/state/four"
func (n *Parent_Child_FourPath) State() ygnmi.SingletonQuery[oc.Binary] {
	return ygnmi.NewSingletonQuery[oc.Binary](
		"Parent_Child",
		true,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "four"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Binary, bool) {
			ret := gs.(*oc.Parent_Child).Four
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Parent_Child) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "state/four"
//	Path from root:       "/parent/child/state/four"
func (n *Parent_Child_FourPathAny) State() ygnmi.WildcardQuery[oc.Binary] {
	return ygnmi.NewWildcardQuery[oc.Binary](
		"Parent_Child",
		true,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "four"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Binary, bool) {
			ret := gs.(*oc.Parent_Child).Four
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Parent_Child) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "config/four"
//	Path from root:       "/parent/child/config/four"
func (n *Parent_Child_FourPath) Config() ygnmi.ConfigQuery[oc.Binary] {
	return ygnmi.NewConfigQuery[oc.Binary](
		"Parent_Child",
		false,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "four"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Binary, bool) {
			ret := gs.(*oc.Parent_Child).Four
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Parent_Child) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "config/four"
//	Path from root:       "/parent/child/config/four"
func (n *Parent_Child_FourPathAny) Config() ygnmi.WildcardQuery[oc.Binary] {
	return ygnmi.NewWildcardQuery[oc.Binary](
		"Parent_Child",
		false,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "four"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Binary, bool) {
			ret := gs.(*oc.Parent_Child).Four
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Parent_Child) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Parent_Child_OnePath represents the /openconfig-simple/parent/child/config/one YANG schema element.
type Parent_Child_OnePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Parent_Child_OnePathAny represents the wildcard version of the /openconfig-simple/parent/child/config/one YANG schema element.
type Parent_Child_OnePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *Parent_Child_OnePath) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "state/one"
//	Path from root:       "/parent/child/state/one"
func (n *Parent_Child_OnePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Parent_Child",
		true,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "one"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Parent_Child).One
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Parent_Child) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "state/one"
//	Path from root:       "/parent/child/state/one"
func (n *Parent_Child_OnePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Parent_Child",
		true,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "one"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Parent_Child).One
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Parent_Child) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "config/one"
//	Path from root:       "/parent/child/config/one"
func (n *Parent_Child_OnePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Parent_Child",
		false,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "one"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Parent_Child).One
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Parent_Child) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "config/one"
//	Path from root:       "/parent/child/config/one"
func (n *Parent_Child_OnePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Parent_Child",
		false,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "one"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Parent_Child).One
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Parent_Child) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Parent_Child_SixPath represents the /openconfig-simple/parent/child/config/six YANG schema element.
type Parent_Child_SixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Parent_Child_SixPathAny represents the wildcard version of the /openconfig-simple/parent/child/config/six YANG schema element.
type Parent_Child_SixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *Parent_Child_SixPath) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "state/six"
//	Path from root:       "/parent/child/state/six"
func (n *Parent_Child_SixPath) State() ygnmi.SingletonQuery[[]float32] {
	return ygnmi.NewSingletonQuery[[]float32](
		"Parent_Child",
		true,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "six"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]float32, bool) {
			ret := gs.(*oc.Parent_Child).Six
			v := reflect.ValueOf(ret)
			return binarySliceToFloatSlice(ret), v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Parent_Child) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "state/six"
//	Path from root:       "/parent/child/state/six"
func (n *Parent_Child_SixPathAny) State() ygnmi.WildcardQuery[[]float32] {
	return ygnmi.NewWildcardQuery[[]float32](
		"Parent_Child",
		true,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "six"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]float32, bool) {
			ret := gs.(*oc.Parent_Child).Six
			v := reflect.ValueOf(ret)
			return binarySliceToFloatSlice(ret), v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Parent_Child) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "config/six"
//	Path from root:       "/parent/child/config/six"
func (n *Parent_Child_SixPath) Config() ygnmi.ConfigQuery[[]float32] {
	return ygnmi.NewConfigQuery[[]float32](
		"Parent_Child",
		false,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "six"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]float32, bool) {
			ret := gs.(*oc.Parent_Child).Six
			v := reflect.ValueOf(ret)
			return binarySliceToFloatSlice(ret), v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Parent_Child) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "config/six"
//	Path from root:       "/parent/child/config/six"
func (n *Parent_Child_SixPathAny) Config() ygnmi.WildcardQuery[[]float32] {
	return ygnmi.NewWildcardQuery[[]float32](
		"Parent_Child",
		false,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "six"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]float32, bool) {
			ret := gs.(*oc.Parent_Child).Six
			v := reflect.ValueOf(ret)
			return binarySliceToFloatSlice(ret), v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Parent_Child) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Parent_Child_ThreePath represents the /openconfig-simple/parent/child/config/three YANG schema element.
type Parent_Child_ThreePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Parent_Child_ThreePathAny represents the wildcard version of the /openconfig-simple/parent/child/config/three YANG schema element.
type Parent_Child_ThreePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *Parent_Child_ThreePath) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "state/three"
//	Path from root:       "/parent/child/state/three"
func (n *Parent_Child_ThreePath) State() ygnmi.SingletonQuery[oc.E_Child_Three] {
	return ygnmi.NewSingletonQuery[oc.E_Child_Three](
		"Parent_Child",
		true,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "three"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Child_Three, bool) {
			ret := gs.(*oc.Parent_Child).Three
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Parent_Child) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "state/three"
//	Path from root:       "/parent/child/state/three"
func (n *Parent_Child_ThreePathAny) State() ygnmi.WildcardQuery[oc.E_Child_Three] {
	return ygnmi.NewWildcardQuery[oc.E_Child_Three](
		"Parent_Child",
		true,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "three"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Child_Three, bool) {
			ret := gs.(*oc.Parent_Child).Three
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Parent_Child) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "config/three"
//	Path from root:       "/parent/child/config/three"
func (n *Parent_Child_ThreePath) Config() ygnmi.ConfigQuery[oc.E_Child_Three] {
	return ygnmi.NewConfigQuery[oc.E_Child_Three](
		"Parent_Child",
		false,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "three"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Child_Three, bool) {
			ret := gs.(*oc.Parent_Child).Three
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Parent_Child) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "config/three"
//	Path from root:       "/parent/child/config/three"
func (n *Parent_Child_ThreePathAny) Config() ygnmi.WildcardQuery[oc.E_Child_Three] {
	return ygnmi.NewWildcardQuery[oc.E_Child_Three](
		"Parent_Child",
		false,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "three"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Child_Three, bool) {
			ret := gs.(*oc.Parent_Child).Three
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Parent_Child) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Parent_Child_TwoPath represents the /openconfig-simple/parent/child/state/two YANG schema element.
type Parent_Child_TwoPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Parent_Child_TwoPathAny represents the wildcard version of the /openconfig-simple/parent/child/state/two YANG schema element.
type Parent_Child_TwoPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *Parent_Child_TwoPath) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "state/two"
//	Path from root:       "/parent/child/state/two"
func (n *Parent_Child_TwoPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Parent_Child",
		true,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "two"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Parent_Child).Two
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Parent_Child) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "state/two"
//	Path from root:       "/parent/child/state/two"
func (n *Parent_Child_TwoPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Parent_Child",
		true,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "two"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Parent_Child).Two
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Parent_Child) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Parent_ChildPath represents the /openconfig-simple/parent/child YANG schema element.
type Parent_ChildPath struct {
	*ygnmi.NodePath
}

// Parent_ChildPathAny represents the wildcard version of the /openconfig-simple/parent/child YANG schema element.
type Parent_ChildPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Parent_ChildPath) PathOriginName() string {
	return "openconfig"
}

// Five (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "*/five"
//	Path from root:       "/parent/child/*/five"
func (n *Parent_ChildPath) Five() *Parent_Child_FivePath {
	ps := &Parent_Child_FivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "five"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Five (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "*/five"
//	Path from root:       "/parent/child/*/five"
func (n *Parent_ChildPathAny) Five() *Parent_Child_FivePathAny {
	ps := &Parent_Child_FivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "five"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Four (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "*/four"
//	Path from root:       "/parent/child/*/four"
func (n *Parent_ChildPath) Four() *Parent_Child_FourPath {
	ps := &Parent_Child_FourPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "four"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Four (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "*/four"
//	Path from root:       "/parent/child/*/four"
func (n *Parent_ChildPathAny) Four() *Parent_Child_FourPathAny {
	ps := &Parent_Child_FourPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "four"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// One (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "*/one"
//	Path from root:       "/parent/child/*/one"
func (n *Parent_ChildPath) One() *Parent_Child_OnePath {
	ps := &Parent_Child_OnePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "one"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// One (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "*/one"
//	Path from root:       "/parent/child/*/one"
func (n *Parent_ChildPathAny) One() *Parent_Child_OnePathAny {
	ps := &Parent_Child_OnePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "one"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Six (leaf-list):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "*/six"
//	Path from root:       "/parent/child/*/six"
func (n *Parent_ChildPath) Six() *Parent_Child_SixPath {
	ps := &Parent_Child_SixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "six"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Six (leaf-list):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "*/six"
//	Path from root:       "/parent/child/*/six"
func (n *Parent_ChildPathAny) Six() *Parent_Child_SixPathAny {
	ps := &Parent_Child_SixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "six"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Three (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "*/three"
//	Path from root:       "/parent/child/*/three"
func (n *Parent_ChildPath) Three() *Parent_Child_ThreePath {
	ps := &Parent_Child_ThreePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "three"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Three (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "*/three"
//	Path from root:       "/parent/child/*/three"
func (n *Parent_ChildPathAny) Three() *Parent_Child_ThreePathAny {
	ps := &Parent_Child_ThreePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "three"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Two (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "state/two"
//	Path from root:       "/parent/child/state/two"
func (n *Parent_ChildPath) Two() *Parent_Child_TwoPath {
	ps := &Parent_Child_TwoPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "two"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Two (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "state/two"
//	Path from root:       "/parent/child/state/two"
func (n *Parent_ChildPathAny) Two() *Parent_Child_TwoPathAny {
	ps := &Parent_Child_TwoPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "two"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Parent_ChildPath) State() ygnmi.SingletonQuery[*oc.Parent_Child] {
	return ygnmi.NewSingletonQuery[*oc.Parent_Child](
		"Parent_Child",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Parent_ChildPathAny) State() ygnmi.WildcardQuery[*oc.Parent_Child] {
	return ygnmi.NewWildcardQuery[*oc.Parent_Child](
		"Parent_Child",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Parent_ChildPath) Config() ygnmi.ConfigQuery[*oc.Parent_Child] {
	return ygnmi.NewConfigQuery[*oc.Parent_Child](
		"Parent_Child",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Parent_ChildPathAny) Config() ygnmi.WildcardQuery[*oc.Parent_Child] {
	return ygnmi.NewWildcardQuery[*oc.Parent_Child](
		"Parent_Child",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RemoteContainer_ALeafPath represents the /openconfig-simple/remote-container/config/a-leaf YANG schema element.
type RemoteContainer_ALeafPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RemoteContainer_ALeafPathAny represents the wildcard version of the /openconfig-simple/remote-container/config/a-leaf YANG schema element.
type RemoteContainer_ALeafPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// PathOrigin returns the name of the origin for the path object.
func (n *RemoteContainer_ALeafPath) PathOriginName() string {
	return ""
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-remote"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "state/a-leaf"
//	Path from root:       "/remote-container/state/a-leaf"
func (n *RemoteContainer_ALeafPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RemoteContainer",
		true,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "a-leaf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RemoteContainer).ALeaf
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RemoteContainer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-remote"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "state/a-leaf"
//	Path from root:       "/remote-container/state/a-leaf"
func (n *RemoteContainer_ALeafPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RemoteContainer",
		true,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "a-leaf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RemoteContainer).ALeaf
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RemoteContainer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-remote"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "config/a-leaf"
//	Path from root:       "/remote-container/config/a-leaf"
func (n *RemoteContainer_ALeafPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RemoteContainer",
		false,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "a-leaf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RemoteContainer).ALeaf
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RemoteContainer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-remote"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "config/a-leaf"
//	Path from root:       "/remote-container/config/a-leaf"
func (n *RemoteContainer_ALeafPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RemoteContainer",
		false,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "a-leaf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RemoteContainer).ALeaf
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RemoteContainer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RemoteContainerPath represents the /openconfig-simple/remote-container YANG schema element.
type RemoteContainerPath struct {
	*ygnmi.NodePath
}

// RemoteContainerPathAny represents the wildcard version of the /openconfig-simple/remote-container YANG schema element.
type RemoteContainerPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *RemoteContainerPath) PathOriginName() string {
	return "openconfig"
}

// ALeaf (leaf):
//
//	Defining module:      "openconfig-remote"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "*/a-leaf"
//	Path from root:       "/remote-container/*/a-leaf"
func (n *RemoteContainerPath) ALeaf() *RemoteContainer_ALeafPath {
	ps := &RemoteContainer_ALeafPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "a-leaf"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ALeaf (leaf):
//
//	Defining module:      "openconfig-remote"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "*/a-leaf"
//	Path from root:       "/remote-container/*/a-leaf"
func (n *RemoteContainerPathAny) ALeaf() *RemoteContainer_ALeafPathAny {
	ps := &RemoteContainer_ALeafPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "a-leaf"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RemoteContainerPath) State() ygnmi.SingletonQuery[*oc.RemoteContainer] {
	return ygnmi.NewSingletonQuery[*oc.RemoteContainer](
		"RemoteContainer",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RemoteContainerPathAny) State() ygnmi.WildcardQuery[*oc.RemoteContainer] {
	return ygnmi.NewWildcardQuery[*oc.RemoteContainer](
		"RemoteContainer",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RemoteContainerPath) Config() ygnmi.ConfigQuery[*oc.RemoteContainer] {
	return ygnmi.NewConfigQuery[*oc.RemoteContainer](
		"RemoteContainer",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RemoteContainerPathAny) Config() ygnmi.WildcardQuery[*oc.RemoteContainer] {
	return ygnmi.NewWildcardQuery[*oc.RemoteContainer](
		"RemoteContainer",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RootPath represents the /root YANG schema element.
type RootPath struct {
	*ygnmi.DeviceRootBase
}

// Root returns a root path object from which YANG paths can be constructed.
func Root() *RootPath {
	return &RootPath{ygnmi.NewDeviceRootBase()}
}

// A (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "a"
//	Path from root:       "/a"
func (n *RootPath) A() *APath {
	ps := &APath{
		NodePath: ygnmi.NewNodePath(
			[]string{"a"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ComponentAny (list):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "platform/component"
//	Path from root:       "/platform/component"
func (n *RootPath) ComponentAny() *ComponentPathAny {
	ps := &ComponentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"platform", "component"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Component (list):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "platform/component"
//	Path from root:       "/platform/component"
//
//	Name: string
func (n *RootPath) Component(Name string) *ComponentPath {
	ps := &ComponentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"platform", "component"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// ComponentMap (list):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "platform/component"
//	Path from root:       "/platform/component"
func (n *RootPath) ComponentMap() *ComponentPathMap {
	ps := &ComponentPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"platform"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Container (container):
//
//	Defining module:      "openconfig-nested"
//	Instantiating module: "openconfig-nested"
//	Path from parent:     "container"
//	Path from root:       "/container"
func (n *RootPath) Container() *ContainerPath {
	ps := &ContainerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"container"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DupEnum (container):
//
//	Defining module:      "openconfig-unione"
//	Instantiating module: "openconfig-unione"
//	Path from parent:     "dup-enum"
//	Path from root:       "/dup-enum"
func (n *RootPath) DupEnum() *DupEnumPath {
	ps := &DupEnumPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dup-enum"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Model (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "model"
//	Path from root:       "/model"
func (n *RootPath) Model() *ModelPath {
	ps := &ModelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"model"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Parent (container): I am a parent container
// that has 4 children.
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "parent"
//	Path from root:       "/parent"
func (n *RootPath) Parent() *ParentPath {
	ps := &ParentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"parent"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RemoteContainer (container):
//
//	Defining module:      "openconfig-remote"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "remote-container"
//	Path from root:       "/remote-container"
func (n *RootPath) RemoteContainer() *RemoteContainerPath {
	ps := &RemoteContainerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-container"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Batch contains a collection of paths.
// Use batch to call Lookup, Watch, etc. on multiple paths at once.
type Batch struct {
	paths []ygnmi.PathStruct
}

// AddPaths adds the paths to the batch.
func (b *Batch) AddPaths(paths ...ygnmi.PathStruct) *Batch {
	b.paths = append(b.paths, paths...)
	return b
}

// State returns a Query that can be used in gNMI operations.
// The returned query is immutable, adding paths does not modify existing queries.
func (b *Batch) State() ygnmi.SingletonQuery[*oc.Root] {
	queryPaths := make([]ygnmi.PathStruct, len(b.paths))
	copy(queryPaths, b.paths)
	return ygnmi.NewSingletonQuery[*oc.Root](
		"Root",
		true,
		true,
		false,
		false,
		true,
		false,
		ygnmi.NewDeviceRootBase(),
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		queryPaths,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
// The returned query is immutable, adding paths does not modify existing queries.
func (b *Batch) Config() ygnmi.SingletonQuery[*oc.Root] {
	queryPaths := make([]ygnmi.PathStruct, len(b.paths))
	copy(queryPaths, b.paths)
	return ygnmi.NewSingletonQuery[*oc.Root](
		"Root",
		false,
		false,
		false,
		false,
		true,
		false,
		ygnmi.NewDeviceRootBase(),
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		queryPaths,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RootPath) State() ygnmi.SingletonQuery[*oc.Root] {
	return ygnmi.NewSingletonQuery[*oc.Root](
		"Root",
		true,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RootPath) Config() ygnmi.ConfigQuery[*oc.Root] {
	return ygnmi.NewConfigQuery[*oc.Root](
		"Root",
		false,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
