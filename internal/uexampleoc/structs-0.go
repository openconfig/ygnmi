// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Package uexampleoc is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by ygnmi version: (devel): (ygot: v0.29.20)
using the following YANG input files:
  - ../../pathgen/testdata/yang/openconfig-simple.yang
  - ../../pathgen/testdata/yang/openconfig-withlistval.yang
  - ../../pathgen/testdata/yang/openconfig-nested.yang

Imported modules were sourced from:
*/
package uexampleoc

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Device{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	A               *OpenconfigNested_A               `path:"a" module:"openconfig-nested"`
	Container       *OpenconfigNested_Container       `path:"container" module:"openconfig-nested"`
	Model           *OpenconfigWithlistval_Model      `path:"model" module:"openconfig-withlistval"`
	Parent          *OpenconfigSimple_Parent          `path:"parent" module:"openconfig-simple"`
	RemoteContainer *OpenconfigSimple_RemoteContainer `path:"remote-container" module:"openconfig-simple"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// GetOrCreateA retrieves the value of the A field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateA() *OpenconfigNested_A {
	if t.A != nil {
		return t.A
	}
	t.A = &OpenconfigNested_A{}
	return t.A
}

// GetOrCreateContainer retrieves the value of the Container field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateContainer() *OpenconfigNested_Container {
	if t.Container != nil {
		return t.Container
	}
	t.Container = &OpenconfigNested_Container{}
	return t.Container
}

// GetOrCreateModel retrieves the value of the Model field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateModel() *OpenconfigWithlistval_Model {
	if t.Model != nil {
		return t.Model
	}
	t.Model = &OpenconfigWithlistval_Model{}
	return t.Model
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateParent() *OpenconfigSimple_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &OpenconfigSimple_Parent{}
	return t.Parent
}

// GetOrCreateRemoteContainer retrieves the value of the RemoteContainer field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateRemoteContainer() *OpenconfigSimple_RemoteContainer {
	if t.RemoteContainer != nil {
		return t.RemoteContainer
	}
	t.RemoteContainer = &OpenconfigSimple_RemoteContainer{}
	return t.RemoteContainer
}

// GetA returns the value of the A struct pointer
// from Device. If the receiver or the field A is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetA() *OpenconfigNested_A {
	if t != nil && t.A != nil {
		return t.A
	}
	return nil
}

// GetContainer returns the value of the Container struct pointer
// from Device. If the receiver or the field Container is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetContainer() *OpenconfigNested_Container {
	if t != nil && t.Container != nil {
		return t.Container
	}
	return nil
}

// GetModel returns the value of the Model struct pointer
// from Device. If the receiver or the field Model is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetModel() *OpenconfigWithlistval_Model {
	if t != nil && t.Model != nil {
		return t.Model
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from Device. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetParent() *OpenconfigSimple_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRemoteContainer returns the value of the RemoteContainer struct pointer
// from Device. If the receiver or the field RemoteContainer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetRemoteContainer() *OpenconfigSimple_RemoteContainer {
	if t != nil && t.RemoteContainer != nil {
		return t.RemoteContainer
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Device
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Device) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.A.PopulateDefaults()
	t.Container.PopulateDefaults()
	t.Model.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.RemoteContainer.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Device.
func (*Device) ΛBelongingModule() string {
	return ""
}

// OpenconfigNested_A represents the /openconfig-nested/a YANG schema element.
type OpenconfigNested_A struct {
	B *OpenconfigNested_A_B `path:"b" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that OpenconfigNested_A implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNested_A) IsYANGGoStruct() {}

// GetOrCreateB retrieves the value of the B field
// or returns the existing field if it already exists.
func (t *OpenconfigNested_A) GetOrCreateB() *OpenconfigNested_A_B {
	if t.B != nil {
		return t.B
	}
	t.B = &OpenconfigNested_A_B{}
	return t.B
}

// GetB returns the value of the B struct pointer
// from OpenconfigNested_A. If the receiver or the field B is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNested_A) GetB() *OpenconfigNested_A_B {
	if t != nil && t.B != nil {
		return t.B
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigNested_A
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigNested_A) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.B.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNested_A"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNested_A) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNested_A.
func (*OpenconfigNested_A) ΛBelongingModule() string {
	return "openconfig-nested"
}

// OpenconfigNested_A_B represents the /openconfig-nested/a/b YANG schema element.
type OpenconfigNested_A_B struct {
	C *OpenconfigNested_A_B_C `path:"c" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that OpenconfigNested_A_B implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNested_A_B) IsYANGGoStruct() {}

// GetOrCreateC retrieves the value of the C field
// or returns the existing field if it already exists.
func (t *OpenconfigNested_A_B) GetOrCreateC() *OpenconfigNested_A_B_C {
	if t.C != nil {
		return t.C
	}
	t.C = &OpenconfigNested_A_B_C{}
	return t.C
}

// GetC returns the value of the C struct pointer
// from OpenconfigNested_A_B. If the receiver or the field C is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNested_A_B) GetC() *OpenconfigNested_A_B_C {
	if t != nil && t.C != nil {
		return t.C
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigNested_A_B
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigNested_A_B) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.C.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNested_A_B"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNested_A_B) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNested_A_B.
func (*OpenconfigNested_A_B) ΛBelongingModule() string {
	return "openconfig-nested"
}

// OpenconfigNested_A_B_C represents the /openconfig-nested/a/b/c YANG schema element.
type OpenconfigNested_A_B_C struct {
	D *OpenconfigNested_A_B_C_D `path:"d" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that OpenconfigNested_A_B_C implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNested_A_B_C) IsYANGGoStruct() {}

// GetOrCreateD retrieves the value of the D field
// or returns the existing field if it already exists.
func (t *OpenconfigNested_A_B_C) GetOrCreateD() *OpenconfigNested_A_B_C_D {
	if t.D != nil {
		return t.D
	}
	t.D = &OpenconfigNested_A_B_C_D{}
	return t.D
}

// GetD returns the value of the D struct pointer
// from OpenconfigNested_A_B_C. If the receiver or the field D is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNested_A_B_C) GetD() *OpenconfigNested_A_B_C_D {
	if t != nil && t.D != nil {
		return t.D
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigNested_A_B_C
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigNested_A_B_C) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.D.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNested_A_B_C"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNested_A_B_C) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNested_A_B_C.
func (*OpenconfigNested_A_B_C) ΛBelongingModule() string {
	return "openconfig-nested"
}

// OpenconfigNested_A_B_C_D represents the /openconfig-nested/a/b/c/d YANG schema element.
type OpenconfigNested_A_B_C_D struct {
	E *OpenconfigNested_A_B_C_D_E `path:"e" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that OpenconfigNested_A_B_C_D implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNested_A_B_C_D) IsYANGGoStruct() {}

// GetOrCreateE retrieves the value of the E field
// or returns the existing field if it already exists.
func (t *OpenconfigNested_A_B_C_D) GetOrCreateE() *OpenconfigNested_A_B_C_D_E {
	if t.E != nil {
		return t.E
	}
	t.E = &OpenconfigNested_A_B_C_D_E{}
	return t.E
}

// GetE returns the value of the E struct pointer
// from OpenconfigNested_A_B_C_D. If the receiver or the field E is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNested_A_B_C_D) GetE() *OpenconfigNested_A_B_C_D_E {
	if t != nil && t.E != nil {
		return t.E
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigNested_A_B_C_D
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigNested_A_B_C_D) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.E.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C_D) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNested_A_B_C_D"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C_D) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNested_A_B_C_D) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNested_A_B_C_D.
func (*OpenconfigNested_A_B_C_D) ΛBelongingModule() string {
	return "openconfig-nested"
}

// OpenconfigNested_A_B_C_D_E represents the /openconfig-nested/a/b/c/d/e YANG schema element.
type OpenconfigNested_A_B_C_D_E struct {
	F *OpenconfigNested_A_B_C_D_E_F `path:"f" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that OpenconfigNested_A_B_C_D_E implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNested_A_B_C_D_E) IsYANGGoStruct() {}

// GetOrCreateF retrieves the value of the F field
// or returns the existing field if it already exists.
func (t *OpenconfigNested_A_B_C_D_E) GetOrCreateF() *OpenconfigNested_A_B_C_D_E_F {
	if t.F != nil {
		return t.F
	}
	t.F = &OpenconfigNested_A_B_C_D_E_F{}
	return t.F
}

// GetF returns the value of the F struct pointer
// from OpenconfigNested_A_B_C_D_E. If the receiver or the field F is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNested_A_B_C_D_E) GetF() *OpenconfigNested_A_B_C_D_E_F {
	if t != nil && t.F != nil {
		return t.F
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigNested_A_B_C_D_E
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigNested_A_B_C_D_E) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.F.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C_D_E) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNested_A_B_C_D_E"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C_D_E) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNested_A_B_C_D_E) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNested_A_B_C_D_E.
func (*OpenconfigNested_A_B_C_D_E) ΛBelongingModule() string {
	return "openconfig-nested"
}

// OpenconfigNested_A_B_C_D_E_F represents the /openconfig-nested/a/b/c/d/e/f YANG schema element.
type OpenconfigNested_A_B_C_D_E_F struct {
	G *OpenconfigNested_A_B_C_D_E_F_G `path:"g" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that OpenconfigNested_A_B_C_D_E_F implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNested_A_B_C_D_E_F) IsYANGGoStruct() {}

// GetOrCreateG retrieves the value of the G field
// or returns the existing field if it already exists.
func (t *OpenconfigNested_A_B_C_D_E_F) GetOrCreateG() *OpenconfigNested_A_B_C_D_E_F_G {
	if t.G != nil {
		return t.G
	}
	t.G = &OpenconfigNested_A_B_C_D_E_F_G{}
	return t.G
}

// GetG returns the value of the G struct pointer
// from OpenconfigNested_A_B_C_D_E_F. If the receiver or the field G is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNested_A_B_C_D_E_F) GetG() *OpenconfigNested_A_B_C_D_E_F_G {
	if t != nil && t.G != nil {
		return t.G
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigNested_A_B_C_D_E_F
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigNested_A_B_C_D_E_F) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.G.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C_D_E_F) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNested_A_B_C_D_E_F"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C_D_E_F) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNested_A_B_C_D_E_F) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNested_A_B_C_D_E_F.
func (*OpenconfigNested_A_B_C_D_E_F) ΛBelongingModule() string {
	return "openconfig-nested"
}

// OpenconfigNested_A_B_C_D_E_F_G represents the /openconfig-nested/a/b/c/d/e/f/g YANG schema element.
type OpenconfigNested_A_B_C_D_E_F_G struct {
	H *OpenconfigNested_A_B_C_D_E_F_G_H `path:"h" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that OpenconfigNested_A_B_C_D_E_F_G implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNested_A_B_C_D_E_F_G) IsYANGGoStruct() {}

// GetOrCreateH retrieves the value of the H field
// or returns the existing field if it already exists.
func (t *OpenconfigNested_A_B_C_D_E_F_G) GetOrCreateH() *OpenconfigNested_A_B_C_D_E_F_G_H {
	if t.H != nil {
		return t.H
	}
	t.H = &OpenconfigNested_A_B_C_D_E_F_G_H{}
	return t.H
}

// GetH returns the value of the H struct pointer
// from OpenconfigNested_A_B_C_D_E_F_G. If the receiver or the field H is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNested_A_B_C_D_E_F_G) GetH() *OpenconfigNested_A_B_C_D_E_F_G_H {
	if t != nil && t.H != nil {
		return t.H
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigNested_A_B_C_D_E_F_G
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigNested_A_B_C_D_E_F_G) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.H.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C_D_E_F_G) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNested_A_B_C_D_E_F_G"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C_D_E_F_G) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNested_A_B_C_D_E_F_G) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNested_A_B_C_D_E_F_G.
func (*OpenconfigNested_A_B_C_D_E_F_G) ΛBelongingModule() string {
	return "openconfig-nested"
}

// OpenconfigNested_A_B_C_D_E_F_G_H represents the /openconfig-nested/a/b/c/d/e/f/g/h YANG schema element.
type OpenconfigNested_A_B_C_D_E_F_G_H struct {
	I *OpenconfigNested_A_B_C_D_E_F_G_H_I `path:"i" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that OpenconfigNested_A_B_C_D_E_F_G_H implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNested_A_B_C_D_E_F_G_H) IsYANGGoStruct() {}

// GetOrCreateI retrieves the value of the I field
// or returns the existing field if it already exists.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H) GetOrCreateI() *OpenconfigNested_A_B_C_D_E_F_G_H_I {
	if t.I != nil {
		return t.I
	}
	t.I = &OpenconfigNested_A_B_C_D_E_F_G_H_I{}
	return t.I
}

// GetI returns the value of the I struct pointer
// from OpenconfigNested_A_B_C_D_E_F_G_H. If the receiver or the field I is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H) GetI() *OpenconfigNested_A_B_C_D_E_F_G_H_I {
	if t != nil && t.I != nil {
		return t.I
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigNested_A_B_C_D_E_F_G_H
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.I.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNested_A_B_C_D_E_F_G_H"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNested_A_B_C_D_E_F_G_H.
func (*OpenconfigNested_A_B_C_D_E_F_G_H) ΛBelongingModule() string {
	return "openconfig-nested"
}

// OpenconfigNested_A_B_C_D_E_F_G_H_I represents the /openconfig-nested/a/b/c/d/e/f/g/h/i YANG schema element.
type OpenconfigNested_A_B_C_D_E_F_G_H_I struct {
	J *OpenconfigNested_A_B_C_D_E_F_G_H_I_J `path:"j" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that OpenconfigNested_A_B_C_D_E_F_G_H_I implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNested_A_B_C_D_E_F_G_H_I) IsYANGGoStruct() {}

// GetOrCreateJ retrieves the value of the J field
// or returns the existing field if it already exists.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I) GetOrCreateJ() *OpenconfigNested_A_B_C_D_E_F_G_H_I_J {
	if t.J != nil {
		return t.J
	}
	t.J = &OpenconfigNested_A_B_C_D_E_F_G_H_I_J{}
	return t.J
}

// GetJ returns the value of the J struct pointer
// from OpenconfigNested_A_B_C_D_E_F_G_H_I. If the receiver or the field J is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I) GetJ() *OpenconfigNested_A_B_C_D_E_F_G_H_I_J {
	if t != nil && t.J != nil {
		return t.J
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigNested_A_B_C_D_E_F_G_H_I
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.J.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNested_A_B_C_D_E_F_G_H_I"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNested_A_B_C_D_E_F_G_H_I.
func (*OpenconfigNested_A_B_C_D_E_F_G_H_I) ΛBelongingModule() string {
	return "openconfig-nested"
}

// OpenconfigNested_A_B_C_D_E_F_G_H_I_J represents the /openconfig-nested/a/b/c/d/e/f/g/h/i/j YANG schema element.
type OpenconfigNested_A_B_C_D_E_F_G_H_I_J struct {
	K *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K `path:"k" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that OpenconfigNested_A_B_C_D_E_F_G_H_I_J implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNested_A_B_C_D_E_F_G_H_I_J) IsYANGGoStruct() {}

// GetOrCreateK retrieves the value of the K field
// or returns the existing field if it already exists.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J) GetOrCreateK() *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K {
	if t.K != nil {
		return t.K
	}
	t.K = &OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K{}
	return t.K
}

// GetK returns the value of the K struct pointer
// from OpenconfigNested_A_B_C_D_E_F_G_H_I_J. If the receiver or the field K is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J) GetK() *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K {
	if t != nil && t.K != nil {
		return t.K
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigNested_A_B_C_D_E_F_G_H_I_J
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.K.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNested_A_B_C_D_E_F_G_H_I_J"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNested_A_B_C_D_E_F_G_H_I_J.
func (*OpenconfigNested_A_B_C_D_E_F_G_H_I_J) ΛBelongingModule() string {
	return "openconfig-nested"
}

// OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K represents the /openconfig-nested/a/b/c/d/e/f/g/h/i/j/k YANG schema element.
type OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K struct {
	L *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L `path:"l" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K) IsYANGGoStruct() {}

// GetOrCreateL retrieves the value of the L field
// or returns the existing field if it already exists.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K) GetOrCreateL() *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L {
	if t.L != nil {
		return t.L
	}
	t.L = &OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L{}
	return t.L
}

// GetL returns the value of the L struct pointer
// from OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K. If the receiver or the field L is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K) GetL() *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L {
	if t != nil && t.L != nil {
		return t.L
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.L.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K.
func (*OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K) ΛBelongingModule() string {
	return "openconfig-nested"
}

// OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L represents the /openconfig-nested/a/b/c/d/e/f/g/h/i/j/k/l YANG schema element.
type OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L struct {
	M *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M `path:"m" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L) IsYANGGoStruct() {}

// GetOrCreateM retrieves the value of the M field
// or returns the existing field if it already exists.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L) GetOrCreateM() *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M {
	if t.M != nil {
		return t.M
	}
	t.M = &OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M{}
	return t.M
}

// GetM returns the value of the M struct pointer
// from OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L. If the receiver or the field M is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L) GetM() *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M {
	if t != nil && t.M != nil {
		return t.M
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.M.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L.
func (*OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L) ΛBelongingModule() string {
	return "openconfig-nested"
}

// OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M represents the /openconfig-nested/a/b/c/d/e/f/g/h/i/j/k/l/m YANG schema element.
type OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M struct {
	State *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M_State `path:"state" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M) IsYANGGoStruct() {}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M) GetOrCreateState() *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M) GetState() *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.State.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M.
func (*OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M) ΛBelongingModule() string {
	return "openconfig-nested"
}

// OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M_State represents the /openconfig-nested/a/b/c/d/e/f/g/h/i/j/k/l/m/state YANG schema element.
type OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M_State struct {
	Foo *string `path:"foo" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M_State) IsYANGGoStruct() {}

// GetFoo retrieves the value of the leaf Foo from the OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Foo is set, it can
// safely use t.GetFoo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Foo == nil' before retrieving the leaf's value.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M_State) GetFoo() string {
	if t == nil || t.Foo == nil {
		return ""
	}
	return *t.Foo
}

// SetFoo sets the value of the leaf Foo in the OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M_State
// struct.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M_State) SetFoo(v string) {
	t.Foo = &v
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M_State
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M_State) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M_State.
func (*OpenconfigNested_A_B_C_D_E_F_G_H_I_J_K_L_M_State) ΛBelongingModule() string {
	return "openconfig-nested"
}

// OpenconfigNested_Container represents the /openconfig-nested/container YANG schema element.
type OpenconfigNested_Container struct {
	Enabled *bool `path:"enabled" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that OpenconfigNested_Container implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNested_Container) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the OpenconfigNested_Container
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *OpenconfigNested_Container) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// SetEnabled sets the value of the leaf Enabled in the OpenconfigNested_Container
// struct.
func (t *OpenconfigNested_Container) SetEnabled(v bool) {
	t.Enabled = &v
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigNested_Container
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigNested_Container) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_Container) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNested_Container"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNested_Container) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNested_Container) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNested_Container.
func (*OpenconfigNested_Container) ΛBelongingModule() string {
	return "openconfig-nested"
}

// OpenconfigSimple_Parent represents the /openconfig-simple/parent YANG schema element.
type OpenconfigSimple_Parent struct {
	Child *OpenconfigSimple_Parent_Child `path:"child" module:"openconfig-simple"`
}

// IsYANGGoStruct ensures that OpenconfigSimple_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSimple_Parent) IsYANGGoStruct() {}

// GetOrCreateChild retrieves the value of the Child field
// or returns the existing field if it already exists.
func (t *OpenconfigSimple_Parent) GetOrCreateChild() *OpenconfigSimple_Parent_Child {
	if t.Child != nil {
		return t.Child
	}
	t.Child = &OpenconfigSimple_Parent_Child{}
	return t.Child
}

// GetChild returns the value of the Child struct pointer
// from OpenconfigSimple_Parent. If the receiver or the field Child is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSimple_Parent) GetChild() *OpenconfigSimple_Parent_Child {
	if t != nil && t.Child != nil {
		return t.Child
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigSimple_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigSimple_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Child.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSimple_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSimple_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSimple_Parent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSimple_Parent) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSimple_Parent.
func (*OpenconfigSimple_Parent) ΛBelongingModule() string {
	return "openconfig-simple"
}

// OpenconfigSimple_Parent_Child represents the /openconfig-simple/parent/child YANG schema element.
type OpenconfigSimple_Parent_Child struct {
	Config *OpenconfigSimple_Parent_Child_Config `path:"config" module:"openconfig-simple"`
	State  *OpenconfigSimple_Parent_Child_State  `path:"state" module:"openconfig-simple"`
}

// IsYANGGoStruct ensures that OpenconfigSimple_Parent_Child implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSimple_Parent_Child) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSimple_Parent_Child) GetOrCreateConfig() *OpenconfigSimple_Parent_Child_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSimple_Parent_Child_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSimple_Parent_Child) GetOrCreateState() *OpenconfigSimple_Parent_Child_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSimple_Parent_Child_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSimple_Parent_Child. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSimple_Parent_Child) GetConfig() *OpenconfigSimple_Parent_Child_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSimple_Parent_Child. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSimple_Parent_Child) GetState() *OpenconfigSimple_Parent_Child_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigSimple_Parent_Child
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigSimple_Parent_Child) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Config.PopulateDefaults()
	t.State.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSimple_Parent_Child) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSimple_Parent_Child"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSimple_Parent_Child) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSimple_Parent_Child) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSimple_Parent_Child.
func (*OpenconfigSimple_Parent_Child) ΛBelongingModule() string {
	return "openconfig-simple"
}

// OpenconfigSimple_Parent_Child_Config represents the /openconfig-simple/parent/child/config YANG schema element.
type OpenconfigSimple_Parent_Child_Config struct {
	Five  Binary                             `path:"five" module:"openconfig-simple"`
	Four  Binary                             `path:"four" module:"openconfig-simple"`
	One   *string                            `path:"one" module:"openconfig-simple"`
	Six   []Binary                           `path:"six" module:"openconfig-simple"`
	Three E_Simple_Parent_Child_Config_Three `path:"three" module:"openconfig-simple"`
}

// IsYANGGoStruct ensures that OpenconfigSimple_Parent_Child_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSimple_Parent_Child_Config) IsYANGGoStruct() {}

// GetFive retrieves the value of the leaf Five from the OpenconfigSimple_Parent_Child_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Five is set, it can
// safely use t.GetFive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Five == nil' before retrieving the leaf's value.
func (t *OpenconfigSimple_Parent_Child_Config) GetFive() Binary {
	if t == nil || t.Five == nil {
		return nil
	}
	return t.Five
}

// GetFour retrieves the value of the leaf Four from the OpenconfigSimple_Parent_Child_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Four is set, it can
// safely use t.GetFour() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Four == nil' before retrieving the leaf's value.
func (t *OpenconfigSimple_Parent_Child_Config) GetFour() Binary {
	if t == nil || t.Four == nil {
		return nil
	}
	return t.Four
}

// GetOne retrieves the value of the leaf One from the OpenconfigSimple_Parent_Child_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if One is set, it can
// safely use t.GetOne() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.One == nil' before retrieving the leaf's value.
func (t *OpenconfigSimple_Parent_Child_Config) GetOne() string {
	if t == nil || t.One == nil {
		return ""
	}
	return *t.One
}

// GetSix retrieves the value of the leaf Six from the OpenconfigSimple_Parent_Child_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Six is set, it can
// safely use t.GetSix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Six == nil' before retrieving the leaf's value.
func (t *OpenconfigSimple_Parent_Child_Config) GetSix() []Binary {
	if t == nil || t.Six == nil {
		return nil
	}
	return t.Six
}

// GetThree retrieves the value of the leaf Three from the OpenconfigSimple_Parent_Child_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Three is set, it can
// safely use t.GetThree() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Three == nil' before retrieving the leaf's value.
func (t *OpenconfigSimple_Parent_Child_Config) GetThree() E_Simple_Parent_Child_Config_Three {
	if t == nil || t.Three == 0 {
		return 0
	}
	return t.Three
}

// SetFive sets the value of the leaf Five in the OpenconfigSimple_Parent_Child_Config
// struct.
func (t *OpenconfigSimple_Parent_Child_Config) SetFive(v Binary) {
	t.Five = v
}

// SetFour sets the value of the leaf Four in the OpenconfigSimple_Parent_Child_Config
// struct.
func (t *OpenconfigSimple_Parent_Child_Config) SetFour(v Binary) {
	t.Four = v
}

// SetOne sets the value of the leaf One in the OpenconfigSimple_Parent_Child_Config
// struct.
func (t *OpenconfigSimple_Parent_Child_Config) SetOne(v string) {
	t.One = &v
}

// SetSix sets the value of the leaf Six in the OpenconfigSimple_Parent_Child_Config
// struct.
func (t *OpenconfigSimple_Parent_Child_Config) SetSix(v []Binary) {
	t.Six = v
}

// SetThree sets the value of the leaf Three in the OpenconfigSimple_Parent_Child_Config
// struct.
func (t *OpenconfigSimple_Parent_Child_Config) SetThree(v E_Simple_Parent_Child_Config_Three) {
	t.Three = v
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigSimple_Parent_Child_Config
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigSimple_Parent_Child_Config) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSimple_Parent_Child_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSimple_Parent_Child_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSimple_Parent_Child_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSimple_Parent_Child_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSimple_Parent_Child_Config.
func (*OpenconfigSimple_Parent_Child_Config) ΛBelongingModule() string {
	return "openconfig-simple"
}

// OpenconfigSimple_Parent_Child_State represents the /openconfig-simple/parent/child/state YANG schema element.
type OpenconfigSimple_Parent_Child_State struct {
	Five  Binary                             `path:"five" module:"openconfig-simple"`
	Four  Binary                             `path:"four" module:"openconfig-simple"`
	One   *string                            `path:"one" module:"openconfig-simple"`
	Six   []Binary                           `path:"six" module:"openconfig-simple"`
	Three E_Simple_Parent_Child_Config_Three `path:"three" module:"openconfig-simple"`
	Two   *string                            `path:"two" module:"openconfig-simple"`
}

// IsYANGGoStruct ensures that OpenconfigSimple_Parent_Child_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSimple_Parent_Child_State) IsYANGGoStruct() {}

// GetFive retrieves the value of the leaf Five from the OpenconfigSimple_Parent_Child_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Five is set, it can
// safely use t.GetFive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Five == nil' before retrieving the leaf's value.
func (t *OpenconfigSimple_Parent_Child_State) GetFive() Binary {
	if t == nil || t.Five == nil {
		return nil
	}
	return t.Five
}

// GetFour retrieves the value of the leaf Four from the OpenconfigSimple_Parent_Child_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Four is set, it can
// safely use t.GetFour() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Four == nil' before retrieving the leaf's value.
func (t *OpenconfigSimple_Parent_Child_State) GetFour() Binary {
	if t == nil || t.Four == nil {
		return nil
	}
	return t.Four
}

// GetOne retrieves the value of the leaf One from the OpenconfigSimple_Parent_Child_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if One is set, it can
// safely use t.GetOne() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.One == nil' before retrieving the leaf's value.
func (t *OpenconfigSimple_Parent_Child_State) GetOne() string {
	if t == nil || t.One == nil {
		return ""
	}
	return *t.One
}

// GetSix retrieves the value of the leaf Six from the OpenconfigSimple_Parent_Child_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Six is set, it can
// safely use t.GetSix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Six == nil' before retrieving the leaf's value.
func (t *OpenconfigSimple_Parent_Child_State) GetSix() []Binary {
	if t == nil || t.Six == nil {
		return nil
	}
	return t.Six
}

// GetThree retrieves the value of the leaf Three from the OpenconfigSimple_Parent_Child_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Three is set, it can
// safely use t.GetThree() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Three == nil' before retrieving the leaf's value.
func (t *OpenconfigSimple_Parent_Child_State) GetThree() E_Simple_Parent_Child_Config_Three {
	if t == nil || t.Three == 0 {
		return 0
	}
	return t.Three
}

// GetTwo retrieves the value of the leaf Two from the OpenconfigSimple_Parent_Child_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Two is set, it can
// safely use t.GetTwo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Two == nil' before retrieving the leaf's value.
func (t *OpenconfigSimple_Parent_Child_State) GetTwo() string {
	if t == nil || t.Two == nil {
		return ""
	}
	return *t.Two
}

// SetFive sets the value of the leaf Five in the OpenconfigSimple_Parent_Child_State
// struct.
func (t *OpenconfigSimple_Parent_Child_State) SetFive(v Binary) {
	t.Five = v
}

// SetFour sets the value of the leaf Four in the OpenconfigSimple_Parent_Child_State
// struct.
func (t *OpenconfigSimple_Parent_Child_State) SetFour(v Binary) {
	t.Four = v
}

// SetOne sets the value of the leaf One in the OpenconfigSimple_Parent_Child_State
// struct.
func (t *OpenconfigSimple_Parent_Child_State) SetOne(v string) {
	t.One = &v
}

// SetSix sets the value of the leaf Six in the OpenconfigSimple_Parent_Child_State
// struct.
func (t *OpenconfigSimple_Parent_Child_State) SetSix(v []Binary) {
	t.Six = v
}

// SetThree sets the value of the leaf Three in the OpenconfigSimple_Parent_Child_State
// struct.
func (t *OpenconfigSimple_Parent_Child_State) SetThree(v E_Simple_Parent_Child_Config_Three) {
	t.Three = v
}

// SetTwo sets the value of the leaf Two in the OpenconfigSimple_Parent_Child_State
// struct.
func (t *OpenconfigSimple_Parent_Child_State) SetTwo(v string) {
	t.Two = &v
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigSimple_Parent_Child_State
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigSimple_Parent_Child_State) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSimple_Parent_Child_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSimple_Parent_Child_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSimple_Parent_Child_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSimple_Parent_Child_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSimple_Parent_Child_State.
func (*OpenconfigSimple_Parent_Child_State) ΛBelongingModule() string {
	return "openconfig-simple"
}

// OpenconfigSimple_RemoteContainer represents the /openconfig-simple/remote-container YANG schema element.
type OpenconfigSimple_RemoteContainer struct {
	Config *OpenconfigSimple_RemoteContainer_Config `path:"config" module:"openconfig-simple"`
	State  *OpenconfigSimple_RemoteContainer_State  `path:"state" module:"openconfig-simple"`
}

// IsYANGGoStruct ensures that OpenconfigSimple_RemoteContainer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSimple_RemoteContainer) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSimple_RemoteContainer) GetOrCreateConfig() *OpenconfigSimple_RemoteContainer_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSimple_RemoteContainer_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSimple_RemoteContainer) GetOrCreateState() *OpenconfigSimple_RemoteContainer_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSimple_RemoteContainer_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSimple_RemoteContainer. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSimple_RemoteContainer) GetConfig() *OpenconfigSimple_RemoteContainer_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSimple_RemoteContainer. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSimple_RemoteContainer) GetState() *OpenconfigSimple_RemoteContainer_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigSimple_RemoteContainer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigSimple_RemoteContainer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Config.PopulateDefaults()
	t.State.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSimple_RemoteContainer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSimple_RemoteContainer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSimple_RemoteContainer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSimple_RemoteContainer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSimple_RemoteContainer.
func (*OpenconfigSimple_RemoteContainer) ΛBelongingModule() string {
	return "openconfig-simple"
}

// OpenconfigSimple_RemoteContainer_Config represents the /openconfig-simple/remote-container/config YANG schema element.
type OpenconfigSimple_RemoteContainer_Config struct {
	ALeaf *string `path:"a-leaf" module:"openconfig-simple"`
}

// IsYANGGoStruct ensures that OpenconfigSimple_RemoteContainer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSimple_RemoteContainer_Config) IsYANGGoStruct() {}

// GetALeaf retrieves the value of the leaf ALeaf from the OpenconfigSimple_RemoteContainer_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ALeaf is set, it can
// safely use t.GetALeaf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ALeaf == nil' before retrieving the leaf's value.
func (t *OpenconfigSimple_RemoteContainer_Config) GetALeaf() string {
	if t == nil || t.ALeaf == nil {
		return ""
	}
	return *t.ALeaf
}

// SetALeaf sets the value of the leaf ALeaf in the OpenconfigSimple_RemoteContainer_Config
// struct.
func (t *OpenconfigSimple_RemoteContainer_Config) SetALeaf(v string) {
	t.ALeaf = &v
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigSimple_RemoteContainer_Config
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigSimple_RemoteContainer_Config) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSimple_RemoteContainer_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSimple_RemoteContainer_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSimple_RemoteContainer_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSimple_RemoteContainer_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSimple_RemoteContainer_Config.
func (*OpenconfigSimple_RemoteContainer_Config) ΛBelongingModule() string {
	return "openconfig-simple"
}

// OpenconfigSimple_RemoteContainer_State represents the /openconfig-simple/remote-container/state YANG schema element.
type OpenconfigSimple_RemoteContainer_State struct {
	ALeaf *string `path:"a-leaf" module:"openconfig-simple"`
}

// IsYANGGoStruct ensures that OpenconfigSimple_RemoteContainer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSimple_RemoteContainer_State) IsYANGGoStruct() {}

// GetALeaf retrieves the value of the leaf ALeaf from the OpenconfigSimple_RemoteContainer_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ALeaf is set, it can
// safely use t.GetALeaf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ALeaf == nil' before retrieving the leaf's value.
func (t *OpenconfigSimple_RemoteContainer_State) GetALeaf() string {
	if t == nil || t.ALeaf == nil {
		return ""
	}
	return *t.ALeaf
}

// SetALeaf sets the value of the leaf ALeaf in the OpenconfigSimple_RemoteContainer_State
// struct.
func (t *OpenconfigSimple_RemoteContainer_State) SetALeaf(v string) {
	t.ALeaf = &v
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigSimple_RemoteContainer_State
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigSimple_RemoteContainer_State) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSimple_RemoteContainer_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSimple_RemoteContainer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSimple_RemoteContainer_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSimple_RemoteContainer_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSimple_RemoteContainer_State.
func (*OpenconfigSimple_RemoteContainer_State) ΛBelongingModule() string {
	return "openconfig-simple"
}

// OpenconfigWithlistval_Model represents the /openconfig-withlistval/model YANG schema element.
type OpenconfigWithlistval_Model struct {
	A *OpenconfigWithlistval_Model_A `path:"a" module:"openconfig-withlistval"`
	B *OpenconfigWithlistval_Model_B `path:"b" module:"openconfig-withlistval"`
	C *OpenconfigWithlistval_Model_C `path:"c" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model) IsYANGGoStruct() {}

// GetOrCreateA retrieves the value of the A field
// or returns the existing field if it already exists.
func (t *OpenconfigWithlistval_Model) GetOrCreateA() *OpenconfigWithlistval_Model_A {
	if t.A != nil {
		return t.A
	}
	t.A = &OpenconfigWithlistval_Model_A{}
	return t.A
}

// GetOrCreateB retrieves the value of the B field
// or returns the existing field if it already exists.
func (t *OpenconfigWithlistval_Model) GetOrCreateB() *OpenconfigWithlistval_Model_B {
	if t.B != nil {
		return t.B
	}
	t.B = &OpenconfigWithlistval_Model_B{}
	return t.B
}

// GetOrCreateC retrieves the value of the C field
// or returns the existing field if it already exists.
func (t *OpenconfigWithlistval_Model) GetOrCreateC() *OpenconfigWithlistval_Model_C {
	if t.C != nil {
		return t.C
	}
	t.C = &OpenconfigWithlistval_Model_C{}
	return t.C
}

// GetA returns the value of the A struct pointer
// from OpenconfigWithlistval_Model. If the receiver or the field A is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigWithlistval_Model) GetA() *OpenconfigWithlistval_Model_A {
	if t != nil && t.A != nil {
		return t.A
	}
	return nil
}

// GetB returns the value of the B struct pointer
// from OpenconfigWithlistval_Model. If the receiver or the field B is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigWithlistval_Model) GetB() *OpenconfigWithlistval_Model_B {
	if t != nil && t.B != nil {
		return t.B
	}
	return nil
}

// GetC returns the value of the C struct pointer
// from OpenconfigWithlistval_Model. If the receiver or the field C is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigWithlistval_Model) GetC() *OpenconfigWithlistval_Model_C {
	if t != nil && t.C != nil {
		return t.C
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.A.PopulateDefaults()
	t.B.PopulateDefaults()
	t.C.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model.
func (*OpenconfigWithlistval_Model) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_A represents the /openconfig-withlistval/model/a YANG schema element.
type OpenconfigWithlistval_Model_A struct {
	SingleKey map[string]*OpenconfigWithlistval_Model_A_SingleKey `path:"single-key" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_A implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_A) IsYANGGoStruct() {}

// NewSingleKey creates a new entry in the SingleKey list of the
// OpenconfigWithlistval_Model_A struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigWithlistval_Model_A) NewSingleKey(Key string) (*OpenconfigWithlistval_Model_A_SingleKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SingleKey == nil {
		t.SingleKey = make(map[string]*OpenconfigWithlistval_Model_A_SingleKey)
	}

	key := Key

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SingleKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SingleKey", key)
	}

	t.SingleKey[key] = &OpenconfigWithlistval_Model_A_SingleKey{
		Key: &Key,
	}

	return t.SingleKey[key], nil
}

// RenameSingleKey renames an entry in the list SingleKey within
// the OpenconfigWithlistval_Model_A struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigWithlistval_Model_A) RenameSingleKey(oldK, newK string) error {
	if _, ok := t.SingleKey[newK]; ok {
		return fmt.Errorf("key %v already exists in SingleKey", newK)
	}

	e, ok := t.SingleKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SingleKey", oldK)
	}
	e.Key = &newK

	t.SingleKey[newK] = e
	delete(t.SingleKey, oldK)
	return nil
}

// GetOrCreateSingleKeyMap returns the list (map) from OpenconfigWithlistval_Model_A.
//
// It initializes the field if not already initialized.
func (t *OpenconfigWithlistval_Model_A) GetOrCreateSingleKeyMap() map[string]*OpenconfigWithlistval_Model_A_SingleKey {
	if t.SingleKey == nil {
		t.SingleKey = make(map[string]*OpenconfigWithlistval_Model_A_SingleKey)
	}
	return t.SingleKey
}

// GetOrCreateSingleKey retrieves the value with the specified keys from
// the receiver OpenconfigWithlistval_Model_A. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigWithlistval_Model_A) GetOrCreateSingleKey(Key string) *OpenconfigWithlistval_Model_A_SingleKey {

	key := Key

	if v, ok := t.SingleKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSingleKey(Key)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSingleKey got unexpected error: %v", err))
	}
	return v
}

// GetSingleKey retrieves the value with the specified key from
// the SingleKey map field of OpenconfigWithlistval_Model_A. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigWithlistval_Model_A) GetSingleKey(Key string) *OpenconfigWithlistval_Model_A_SingleKey {

	if t == nil {
		return nil
	}

	key := Key

	if lm, ok := t.SingleKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteSingleKey deletes the value with the specified keys from
// the receiver OpenconfigWithlistval_Model_A. If there is no such element, the function
// is a no-op.
func (t *OpenconfigWithlistval_Model_A) DeleteSingleKey(Key string) {
	key := Key

	delete(t.SingleKey, key)
}

// AppendSingleKey appends the supplied OpenconfigWithlistval_Model_A_SingleKey struct to the
// list SingleKey of OpenconfigWithlistval_Model_A. If the key value(s) specified in
// the supplied OpenconfigWithlistval_Model_A_SingleKey already exist in the list, an error is
// returned.
func (t *OpenconfigWithlistval_Model_A) AppendSingleKey(v *OpenconfigWithlistval_Model_A_SingleKey) error {
	if v.Key == nil {
		return fmt.Errorf("invalid nil key received for Key")
	}

	key := *v.Key

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SingleKey == nil {
		t.SingleKey = make(map[string]*OpenconfigWithlistval_Model_A_SingleKey)
	}

	if _, ok := t.SingleKey[key]; ok {
		return fmt.Errorf("duplicate key for list SingleKey %v", key)
	}

	t.SingleKey[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_A
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_A) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.SingleKey {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_A"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_A) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_A.
func (*OpenconfigWithlistval_Model_A) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_A_SingleKey represents the /openconfig-withlistval/model/a/single-key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey struct {
	Config       *OpenconfigWithlistval_Model_A_SingleKey_Config       `path:"config" module:"openconfig-withlistval"`
	InnerA       *OpenconfigWithlistval_Model_A_SingleKey_InnerA       `path:"inner-a" module:"openconfig-withlistval"`
	Key          *string                                               `path:"key" module:"openconfig-withlistval"`
	NestedLists  *OpenconfigWithlistval_Model_A_SingleKey_NestedLists  `path:"nested-lists" module:"openconfig-withlistval"`
	OrderedLists *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists `path:"ordered-lists" module:"openconfig-withlistval"`
	State        *OpenconfigWithlistval_Model_A_SingleKey_State        `path:"state" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_A_SingleKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_A_SingleKey) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigWithlistval_Model_A_SingleKey) GetOrCreateConfig() *OpenconfigWithlistval_Model_A_SingleKey_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigWithlistval_Model_A_SingleKey_Config{}
	return t.Config
}

// GetOrCreateInnerA retrieves the value of the InnerA field
// or returns the existing field if it already exists.
func (t *OpenconfigWithlistval_Model_A_SingleKey) GetOrCreateInnerA() *OpenconfigWithlistval_Model_A_SingleKey_InnerA {
	if t.InnerA != nil {
		return t.InnerA
	}
	t.InnerA = &OpenconfigWithlistval_Model_A_SingleKey_InnerA{}
	return t.InnerA
}

// GetOrCreateNestedLists retrieves the value of the NestedLists field
// or returns the existing field if it already exists.
func (t *OpenconfigWithlistval_Model_A_SingleKey) GetOrCreateNestedLists() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists {
	if t.NestedLists != nil {
		return t.NestedLists
	}
	t.NestedLists = &OpenconfigWithlistval_Model_A_SingleKey_NestedLists{}
	return t.NestedLists
}

// GetOrCreateOrderedLists retrieves the value of the OrderedLists field
// or returns the existing field if it already exists.
func (t *OpenconfigWithlistval_Model_A_SingleKey) GetOrCreateOrderedLists() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists {
	if t.OrderedLists != nil {
		return t.OrderedLists
	}
	t.OrderedLists = &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists{}
	return t.OrderedLists
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigWithlistval_Model_A_SingleKey) GetOrCreateState() *OpenconfigWithlistval_Model_A_SingleKey_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigWithlistval_Model_A_SingleKey_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigWithlistval_Model_A_SingleKey. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigWithlistval_Model_A_SingleKey) GetConfig() *OpenconfigWithlistval_Model_A_SingleKey_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetInnerA returns the value of the InnerA struct pointer
// from OpenconfigWithlistval_Model_A_SingleKey. If the receiver or the field InnerA is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigWithlistval_Model_A_SingleKey) GetInnerA() *OpenconfigWithlistval_Model_A_SingleKey_InnerA {
	if t != nil && t.InnerA != nil {
		return t.InnerA
	}
	return nil
}

// GetNestedLists returns the value of the NestedLists struct pointer
// from OpenconfigWithlistval_Model_A_SingleKey. If the receiver or the field NestedLists is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigWithlistval_Model_A_SingleKey) GetNestedLists() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists {
	if t != nil && t.NestedLists != nil {
		return t.NestedLists
	}
	return nil
}

// GetOrderedLists returns the value of the OrderedLists struct pointer
// from OpenconfigWithlistval_Model_A_SingleKey. If the receiver or the field OrderedLists is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigWithlistval_Model_A_SingleKey) GetOrderedLists() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists {
	if t != nil && t.OrderedLists != nil {
		return t.OrderedLists
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigWithlistval_Model_A_SingleKey. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigWithlistval_Model_A_SingleKey) GetState() *OpenconfigWithlistval_Model_A_SingleKey_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetKey retrieves the value of the leaf Key from the OpenconfigWithlistval_Model_A_SingleKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_A_SingleKey) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// SetKey sets the value of the leaf Key in the OpenconfigWithlistval_Model_A_SingleKey
// struct.
func (t *OpenconfigWithlistval_Model_A_SingleKey) SetKey(v string) {
	t.Key = &v
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_A_SingleKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_A_SingleKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Config.PopulateDefaults()
	t.InnerA.PopulateDefaults()
	t.NestedLists.PopulateDefaults()
	t.OrderedLists.PopulateDefaults()
	t.State.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the OpenconfigWithlistval_Model_A_SingleKey struct, which is a YANG list entry.
func (t *OpenconfigWithlistval_Model_A_SingleKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Key == nil {
		return nil, fmt.Errorf("nil value for key Key")
	}

	return map[string]interface{}{
		"key": *t.Key,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_A_SingleKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_A_SingleKey) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_A_SingleKey.
func (*OpenconfigWithlistval_Model_A_SingleKey) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_A_SingleKey_Config represents the /openconfig-withlistval/model/a/single-key/config YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_Config struct {
	Key   *string `path:"key" module:"openconfig-withlistval"`
	Value *int64  `path:"value" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_A_SingleKey_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_A_SingleKey_Config) IsYANGGoStruct() {}

// GetKey retrieves the value of the leaf Key from the OpenconfigWithlistval_Model_A_SingleKey_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_A_SingleKey_Config) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// GetValue retrieves the value of the leaf Value from the OpenconfigWithlistval_Model_A_SingleKey_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_A_SingleKey_Config) GetValue() int64 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// SetKey sets the value of the leaf Key in the OpenconfigWithlistval_Model_A_SingleKey_Config
// struct.
func (t *OpenconfigWithlistval_Model_A_SingleKey_Config) SetKey(v string) {
	t.Key = &v
}

// SetValue sets the value of the leaf Value in the OpenconfigWithlistval_Model_A_SingleKey_Config
// struct.
func (t *OpenconfigWithlistval_Model_A_SingleKey_Config) SetValue(v int64) {
	t.Value = &v
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_A_SingleKey_Config
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_A_SingleKey_Config) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_A_SingleKey_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_A_SingleKey_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_A_SingleKey_Config.
func (*OpenconfigWithlistval_Model_A_SingleKey_Config) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA represents the /openconfig-withlistval/model/a/single-key/inner-a YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA struct {
	SingleKey map[string]*OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey `path:"single-key" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_A_SingleKey_InnerA implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_A_SingleKey_InnerA) IsYANGGoStruct() {}

// NewSingleKey creates a new entry in the SingleKey list of the
// OpenconfigWithlistval_Model_A_SingleKey_InnerA struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA) NewSingleKey(Key string) (*OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SingleKey == nil {
		t.SingleKey = make(map[string]*OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey)
	}

	key := Key

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SingleKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SingleKey", key)
	}

	t.SingleKey[key] = &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey{
		Key: &Key,
	}

	return t.SingleKey[key], nil
}

// RenameSingleKey renames an entry in the list SingleKey within
// the OpenconfigWithlistval_Model_A_SingleKey_InnerA struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA) RenameSingleKey(oldK, newK string) error {
	if _, ok := t.SingleKey[newK]; ok {
		return fmt.Errorf("key %v already exists in SingleKey", newK)
	}

	e, ok := t.SingleKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SingleKey", oldK)
	}
	e.Key = &newK

	t.SingleKey[newK] = e
	delete(t.SingleKey, oldK)
	return nil
}

// GetOrCreateSingleKeyMap returns the list (map) from OpenconfigWithlistval_Model_A_SingleKey_InnerA.
//
// It initializes the field if not already initialized.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA) GetOrCreateSingleKeyMap() map[string]*OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey {
	if t.SingleKey == nil {
		t.SingleKey = make(map[string]*OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey)
	}
	return t.SingleKey
}

// GetOrCreateSingleKey retrieves the value with the specified keys from
// the receiver OpenconfigWithlistval_Model_A_SingleKey_InnerA. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA) GetOrCreateSingleKey(Key string) *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey {

	key := Key

	if v, ok := t.SingleKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSingleKey(Key)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSingleKey got unexpected error: %v", err))
	}
	return v
}

// GetSingleKey retrieves the value with the specified key from
// the SingleKey map field of OpenconfigWithlistval_Model_A_SingleKey_InnerA. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA) GetSingleKey(Key string) *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey {

	if t == nil {
		return nil
	}

	key := Key

	if lm, ok := t.SingleKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteSingleKey deletes the value with the specified keys from
// the receiver OpenconfigWithlistval_Model_A_SingleKey_InnerA. If there is no such element, the function
// is a no-op.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA) DeleteSingleKey(Key string) {
	key := Key

	delete(t.SingleKey, key)
}

// AppendSingleKey appends the supplied OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey struct to the
// list SingleKey of OpenconfigWithlistval_Model_A_SingleKey_InnerA. If the key value(s) specified in
// the supplied OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey already exist in the list, an error is
// returned.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA) AppendSingleKey(v *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey) error {
	if v.Key == nil {
		return fmt.Errorf("invalid nil key received for Key")
	}

	key := *v.Key

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SingleKey == nil {
		t.SingleKey = make(map[string]*OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey)
	}

	if _, ok := t.SingleKey[key]; ok {
		return fmt.Errorf("duplicate key for list SingleKey %v", key)
	}

	t.SingleKey[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_A_SingleKey_InnerA
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.SingleKey {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_A_SingleKey_InnerA"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_A_SingleKey_InnerA.
func (*OpenconfigWithlistval_Model_A_SingleKey_InnerA) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey struct {
	Config *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config `path:"config" module:"openconfig-withlistval"`
	Key    *string                                                          `path:"key" module:"openconfig-withlistval"`
	State  *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State  `path:"state" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey) GetOrCreateConfig() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey) GetOrCreateState() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey) GetConfig() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey) GetState() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetKey retrieves the value of the leaf Key from the OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// SetKey sets the value of the leaf Key in the OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey
// struct.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey) SetKey(v string) {
	t.Key = &v
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Config.PopulateDefaults()
	t.State.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey struct, which is a YANG list entry.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Key == nil {
		return nil, fmt.Errorf("nil value for key Key")
	}

	return map[string]interface{}{
		"key": *t.Key,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey.
func (*OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key/config YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config struct {
	Key   *string `path:"key" module:"openconfig-withlistval"`
	Value *int64  `path:"value" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config) IsYANGGoStruct() {}

// GetKey retrieves the value of the leaf Key from the OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// GetValue retrieves the value of the leaf Value from the OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config) GetValue() int64 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// SetKey sets the value of the leaf Key in the OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config
// struct.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config) SetKey(v string) {
	t.Key = &v
}

// SetValue sets the value of the leaf Value in the OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config
// struct.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config) SetValue(v int64) {
	t.Value = &v
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config.
func (*OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key/state YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State struct {
	Key   *string `path:"key" module:"openconfig-withlistval"`
	Value *int64  `path:"value" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State) IsYANGGoStruct() {}

// GetKey retrieves the value of the leaf Key from the OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// GetValue retrieves the value of the leaf Value from the OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State) GetValue() int64 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// SetKey sets the value of the leaf Key in the OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State
// struct.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State) SetKey(v string) {
	t.Key = &v
}

// SetValue sets the value of the leaf Value in the OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State
// struct.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State) SetValue(v int64) {
	t.Value = &v
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State.
func (*OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedLists represents the /openconfig-withlistval/model/a/single-key/nested-lists YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedLists struct {
	NestedList map[string]*OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList `path:"nested-list" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_A_SingleKey_NestedLists implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_A_SingleKey_NestedLists) IsYANGGoStruct() {}

// NewNestedList creates a new entry in the NestedList list of the
// OpenconfigWithlistval_Model_A_SingleKey_NestedLists struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists) NewNestedList(Key string) (*OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NestedList == nil {
		t.NestedList = make(map[string]*OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList)
	}

	key := Key

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NestedList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NestedList", key)
	}

	t.NestedList[key] = &OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList{
		Key: &Key,
	}

	return t.NestedList[key], nil
}

// RenameNestedList renames an entry in the list NestedList within
// the OpenconfigWithlistval_Model_A_SingleKey_NestedLists struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists) RenameNestedList(oldK, newK string) error {
	if _, ok := t.NestedList[newK]; ok {
		return fmt.Errorf("key %v already exists in NestedList", newK)
	}

	e, ok := t.NestedList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NestedList", oldK)
	}
	e.Key = &newK

	t.NestedList[newK] = e
	delete(t.NestedList, oldK)
	return nil
}

// GetOrCreateNestedListMap returns the list (map) from OpenconfigWithlistval_Model_A_SingleKey_NestedLists.
//
// It initializes the field if not already initialized.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists) GetOrCreateNestedListMap() map[string]*OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList {
	if t.NestedList == nil {
		t.NestedList = make(map[string]*OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList)
	}
	return t.NestedList
}

// GetOrCreateNestedList retrieves the value with the specified keys from
// the receiver OpenconfigWithlistval_Model_A_SingleKey_NestedLists. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists) GetOrCreateNestedList(Key string) *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList {

	key := Key

	if v, ok := t.NestedList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNestedList(Key)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNestedList got unexpected error: %v", err))
	}
	return v
}

// GetNestedList retrieves the value with the specified key from
// the NestedList map field of OpenconfigWithlistval_Model_A_SingleKey_NestedLists. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists) GetNestedList(Key string) *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList {

	if t == nil {
		return nil
	}

	key := Key

	if lm, ok := t.NestedList[key]; ok {
		return lm
	}
	return nil
}

// DeleteNestedList deletes the value with the specified keys from
// the receiver OpenconfigWithlistval_Model_A_SingleKey_NestedLists. If there is no such element, the function
// is a no-op.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists) DeleteNestedList(Key string) {
	key := Key

	delete(t.NestedList, key)
}

// AppendNestedList appends the supplied OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList struct to the
// list NestedList of OpenconfigWithlistval_Model_A_SingleKey_NestedLists. If the key value(s) specified in
// the supplied OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList already exist in the list, an error is
// returned.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists) AppendNestedList(v *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList) error {
	if v.Key == nil {
		return fmt.Errorf("invalid nil key received for Key")
	}

	key := *v.Key

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NestedList == nil {
		t.NestedList = make(map[string]*OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList)
	}

	if _, ok := t.NestedList[key]; ok {
		return fmt.Errorf("duplicate key for list NestedList %v", key)
	}

	t.NestedList[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_A_SingleKey_NestedLists
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.NestedList {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_A_SingleKey_NestedLists"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_A_SingleKey_NestedLists.
func (*OpenconfigWithlistval_Model_A_SingleKey_NestedLists) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList represents the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList struct {
	Config *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config `path:"config" module:"openconfig-withlistval"`
	Key    *string                                                                `path:"key" module:"openconfig-withlistval"`
	State  *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State  `path:"state" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList) GetOrCreateConfig() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList) GetOrCreateState() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList) GetConfig() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList) GetState() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetKey retrieves the value of the leaf Key from the OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// SetKey sets the value of the leaf Key in the OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList
// struct.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList) SetKey(v string) {
	t.Key = &v
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Config.PopulateDefaults()
	t.State.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList struct, which is a YANG list entry.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Key == nil {
		return nil, fmt.Errorf("nil value for key Key")
	}

	return map[string]interface{}{
		"key": *t.Key,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList.
func (*OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config represents the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list/config YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config struct {
	Key   *string `path:"key" module:"openconfig-withlistval"`
	Value *int64  `path:"value" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config) IsYANGGoStruct() {}

// GetKey retrieves the value of the leaf Key from the OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// GetValue retrieves the value of the leaf Value from the OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config) GetValue() int64 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// SetKey sets the value of the leaf Key in the OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config
// struct.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config) SetKey(v string) {
	t.Key = &v
}

// SetValue sets the value of the leaf Value in the OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config
// struct.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config) SetValue(v int64) {
	t.Value = &v
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config.
func (*OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State represents the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list/state YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State struct {
	Key   *string `path:"key" module:"openconfig-withlistval"`
	Value *int64  `path:"value" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State) IsYANGGoStruct() {}

// GetKey retrieves the value of the leaf Key from the OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// GetValue retrieves the value of the leaf Value from the OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State) GetValue() int64 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// SetKey sets the value of the leaf Key in the OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State
// struct.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State) SetKey(v string) {
	t.Key = &v
}

// SetValue sets the value of the leaf Value in the OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State
// struct.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State) SetValue(v int64) {
	t.Value = &v
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State.
func (*OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists represents the /openconfig-withlistval/model/a/single-key/ordered-lists YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists struct {
	OrderedList *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap `path:"ordered-list" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_A_SingleKey_OrderedLists implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_A_SingleKey_OrderedLists) IsYANGGoStruct() {}

// GetOrCreateOrderedListMap returns the ordered map field
// OrderedList from OpenconfigWithlistval_Model_A_SingleKey_OrderedLists.
//
// It initializes the field if not already initialized.
func (s *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists) GetOrCreateOrderedListMap() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap {
	if s.OrderedList == nil {
		s.OrderedList = &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap{}
	}
	return s.OrderedList
}

// AppendNewOrderedList creates a new entry in the OrderedList
// ordered map of the OpenconfigWithlistval_Model_A_SingleKey_OrderedLists struct. The keys of the list are
// populated from the input arguments.
func (s *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists) AppendNewOrderedList(Key string) (*OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList, error) {
	if s.OrderedList == nil {
		s.OrderedList = &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap{}
	}
	return s.OrderedList.AppendNew(Key)
}

// AppendOrderedList appends the supplied OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList struct
// to the list OrderedList of OpenconfigWithlistval_Model_A_SingleKey_OrderedLists. If the key value(s)
// specified in the supplied OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList already exist in the list, an
// error is returned.
func (s *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists) AppendOrderedList(v *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList) error {
	if s.OrderedList == nil {
		s.OrderedList = &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap{}
	}
	return s.OrderedList.Append(v)
}

// GetOrderedList retrieves the value with the specified key from the
// OrderedList map field of OpenconfigWithlistval_Model_A_SingleKey_OrderedLists. If the receiver
// is nil, or the specified key is not present in the list, nil is returned
// such that Get* methods may be safely chained.
func (s *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists) GetOrderedList(Key string) *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList {
	if s == nil {
		return nil
	}
	key := Key
	return s.OrderedList.Get(key)
}

// DeleteOrderedList deletes the value with the specified keys from
// the receiver OpenconfigWithlistval_Model_A_SingleKey_OrderedLists. If there is no such element, the
// function is a no-op.
func (s *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists) DeleteOrderedList(Key string) bool {
	key := Key
	return s.OrderedList.Delete(key)
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap is an ordered map that represents the "ordered-by user"
// list elements at /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap struct {
	keys     []string
	valueMap map[string]*OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList
}

// IsYANGOrderedList ensures that OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap implements the
// ygot.GoOrderedMap interface.
func (*OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap) IsYANGOrderedList() {
}

// init initializes any uninitialized values.
func (o *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap) init() {
	if o == nil {
		return
	}
	if o.valueMap == nil {
		o.valueMap = map[string]*OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList{}
	}
}

// Keys returns a copy of the list's keys.
func (o *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap) Keys() []string {
	if o == nil {
		return nil
	}
	return append([]string{}, o.keys...)
}

// Values returns the current set of the list's values in order.
func (o *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap) Values() []*OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList {
	if o == nil {
		return nil
	}
	var values []*OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList
	for _, key := range o.keys {
		values = append(values, o.valueMap[key])
	}
	return values
}

// Len returns a size of OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap
func (o *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap) Len() int {
	if o == nil {
		return 0
	}
	return len(o.keys)
}

// Get returns the value corresponding to the key. If the key is not found, nil
// is returned.
func (o *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap) Get(key string) *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList {
	if o == nil {
		return nil
	}
	val, _ := o.valueMap[key]
	return val
}

// Delete deletes an element.
func (o *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap) Delete(key string) bool {
	if o == nil {
		return false
	}
	if _, ok := o.valueMap[key]; !ok {
		return false
	}
	for i, k := range o.keys {
		if k == key {
			o.keys = append(o.keys[:i], o.keys[i+1:]...)
			delete(o.valueMap, key)
			return true
		}
	}
	return false
}

// Append appends a OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList, returning an error if the key
// already exists in the ordered list or if the key is unspecified.
func (o *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap) Append(v *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList) error {
	if o == nil {
		return fmt.Errorf("nil ordered map, cannot append OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList")
	}
	if v == nil {
		return fmt.Errorf("nil OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList")
	}
	if v.Key == nil {
		return fmt.Errorf("invalid nil key received for Key")
	}

	key := *v.Key

	if _, ok := o.valueMap[key]; ok {
		return fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	o.init()
	o.valueMap[key] = v
	return nil
}

// AppendNew creates and appends a new OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList, returning the
// newly-initialized v. It returns an error if the v already exists.
func (o *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap) AppendNew(Key string) (*OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList, error) {
	if o == nil {
		return nil, fmt.Errorf("nil ordered map, cannot append OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList")
	}
	key := Key

	if _, ok := o.valueMap[key]; ok {
		return nil, fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	newElement := &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList{
		Key: &Key,
	}
	o.init()
	o.valueMap[key] = newElement
	return newElement, nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_A_SingleKey_OrderedLists
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.OrderedList.Values() {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_A_SingleKey_OrderedLists"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_A_SingleKey_OrderedLists.
func (*OpenconfigWithlistval_Model_A_SingleKey_OrderedLists) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList represents the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList struct {
	Config *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config `path:"config" module:"openconfig-withlistval"`
	Key    *string                                                                  `path:"key" module:"openconfig-withlistval"`
	State  *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State  `path:"state" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList) GetOrCreateConfig() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList) GetOrCreateState() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList) GetConfig() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList) GetState() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetKey retrieves the value of the leaf Key from the OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// SetKey sets the value of the leaf Key in the OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList
// struct.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList) SetKey(v string) {
	t.Key = &v
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Config.PopulateDefaults()
	t.State.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList struct, which is a YANG list entry.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Key == nil {
		return nil, fmt.Errorf("nil value for key Key")
	}

	return map[string]interface{}{
		"key": *t.Key,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList.
func (*OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config represents the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/config YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config struct {
	Key   *string `path:"key" module:"openconfig-withlistval"`
	Value *int64  `path:"value" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config) IsYANGGoStruct() {}

// GetKey retrieves the value of the leaf Key from the OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// GetValue retrieves the value of the leaf Value from the OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config) GetValue() int64 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// SetKey sets the value of the leaf Key in the OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config
// struct.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config) SetKey(v string) {
	t.Key = &v
}

// SetValue sets the value of the leaf Value in the OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config
// struct.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config) SetValue(v int64) {
	t.Value = &v
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config.
func (*OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State represents the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/state YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State struct {
	Key   *string `path:"key" module:"openconfig-withlistval"`
	Value *int64  `path:"value" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State) IsYANGGoStruct() {}

// GetKey retrieves the value of the leaf Key from the OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// GetValue retrieves the value of the leaf Value from the OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State) GetValue() int64 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// SetKey sets the value of the leaf Key in the OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State
// struct.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State) SetKey(v string) {
	t.Key = &v
}

// SetValue sets the value of the leaf Value in the OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State
// struct.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State) SetValue(v int64) {
	t.Value = &v
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State.
func (*OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_A_SingleKey_State represents the /openconfig-withlistval/model/a/single-key/state YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_State struct {
	Counter  Binary   `path:"counter" module:"openconfig-withlistval"`
	Counters []Binary `path:"counters" module:"openconfig-withlistval"`
	Key      *string  `path:"key" module:"openconfig-withlistval"`
	Value    *int64   `path:"value" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_A_SingleKey_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_A_SingleKey_State) IsYANGGoStruct() {}

// GetCounter retrieves the value of the leaf Counter from the OpenconfigWithlistval_Model_A_SingleKey_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Counter is set, it can
// safely use t.GetCounter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Counter == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_A_SingleKey_State) GetCounter() Binary {
	if t == nil || t.Counter == nil {
		return nil
	}
	return t.Counter
}

// GetCounters retrieves the value of the leaf Counters from the OpenconfigWithlistval_Model_A_SingleKey_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Counters is set, it can
// safely use t.GetCounters() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Counters == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_A_SingleKey_State) GetCounters() []Binary {
	if t == nil || t.Counters == nil {
		return nil
	}
	return t.Counters
}

// GetKey retrieves the value of the leaf Key from the OpenconfigWithlistval_Model_A_SingleKey_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_A_SingleKey_State) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// GetValue retrieves the value of the leaf Value from the OpenconfigWithlistval_Model_A_SingleKey_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_A_SingleKey_State) GetValue() int64 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// SetCounter sets the value of the leaf Counter in the OpenconfigWithlistval_Model_A_SingleKey_State
// struct.
func (t *OpenconfigWithlistval_Model_A_SingleKey_State) SetCounter(v Binary) {
	t.Counter = v
}

// SetCounters sets the value of the leaf Counters in the OpenconfigWithlistval_Model_A_SingleKey_State
// struct.
func (t *OpenconfigWithlistval_Model_A_SingleKey_State) SetCounters(v []Binary) {
	t.Counters = v
}

// SetKey sets the value of the leaf Key in the OpenconfigWithlistval_Model_A_SingleKey_State
// struct.
func (t *OpenconfigWithlistval_Model_A_SingleKey_State) SetKey(v string) {
	t.Key = &v
}

// SetValue sets the value of the leaf Value in the OpenconfigWithlistval_Model_A_SingleKey_State
// struct.
func (t *OpenconfigWithlistval_Model_A_SingleKey_State) SetValue(v int64) {
	t.Value = &v
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_A_SingleKey_State
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_A_SingleKey_State) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_A_SingleKey_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_A_SingleKey_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_A_SingleKey_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_A_SingleKey_State.
func (*OpenconfigWithlistval_Model_A_SingleKey_State) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_B represents the /openconfig-withlistval/model/b YANG schema element.
type OpenconfigWithlistval_Model_B struct {
	MultiKey map[OpenconfigWithlistval_Model_B_MultiKey_Key]*OpenconfigWithlistval_Model_B_MultiKey `path:"multi-key" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_B implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_B) IsYANGGoStruct() {}

// OpenconfigWithlistval_Model_B_MultiKey_Key represents the key for list MultiKey of element /openconfig-withlistval/model/b.
type OpenconfigWithlistval_Model_B_MultiKey_Key struct {
	Key1 uint32 `path:"key1"`
	Key2 uint64 `path:"key2"`
}

// IsYANGGoKeyStruct ensures that OpenconfigWithlistval_Model_B_MultiKey_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OpenconfigWithlistval_Model_B_MultiKey_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the OpenconfigWithlistval_Model_B_MultiKey_Key key struct.
func (t OpenconfigWithlistval_Model_B_MultiKey_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"key1": t.Key1,
		"key2": t.Key2,
	}, nil
}

// NewMultiKey creates a new entry in the MultiKey list of the
// OpenconfigWithlistval_Model_B struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigWithlistval_Model_B) NewMultiKey(Key1 uint32, Key2 uint64) (*OpenconfigWithlistval_Model_B_MultiKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MultiKey == nil {
		t.MultiKey = make(map[OpenconfigWithlistval_Model_B_MultiKey_Key]*OpenconfigWithlistval_Model_B_MultiKey)
	}

	key := OpenconfigWithlistval_Model_B_MultiKey_Key{
		Key1: Key1,
		Key2: Key2,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MultiKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MultiKey", key)
	}

	t.MultiKey[key] = &OpenconfigWithlistval_Model_B_MultiKey{
		Key1: &Key1,
		Key2: &Key2,
	}

	return t.MultiKey[key], nil
}

// RenameMultiKey renames an entry in the list MultiKey within
// the OpenconfigWithlistval_Model_B struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigWithlistval_Model_B) RenameMultiKey(oldK, newK OpenconfigWithlistval_Model_B_MultiKey_Key) error {
	if _, ok := t.MultiKey[newK]; ok {
		return fmt.Errorf("key %v already exists in MultiKey", newK)
	}

	e, ok := t.MultiKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MultiKey", oldK)
	}
	e.Key1 = &newK.Key1
	e.Key2 = &newK.Key2

	t.MultiKey[newK] = e
	delete(t.MultiKey, oldK)
	return nil
}

// GetOrCreateMultiKeyMap returns the list (map) from OpenconfigWithlistval_Model_B.
//
// It initializes the field if not already initialized.
func (t *OpenconfigWithlistval_Model_B) GetOrCreateMultiKeyMap() map[OpenconfigWithlistval_Model_B_MultiKey_Key]*OpenconfigWithlistval_Model_B_MultiKey {
	if t.MultiKey == nil {
		t.MultiKey = make(map[OpenconfigWithlistval_Model_B_MultiKey_Key]*OpenconfigWithlistval_Model_B_MultiKey)
	}
	return t.MultiKey
}

// GetOrCreateMultiKey retrieves the value with the specified keys from
// the receiver OpenconfigWithlistval_Model_B. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigWithlistval_Model_B) GetOrCreateMultiKey(Key1 uint32, Key2 uint64) *OpenconfigWithlistval_Model_B_MultiKey {

	key := OpenconfigWithlistval_Model_B_MultiKey_Key{
		Key1: Key1,
		Key2: Key2,
	}

	if v, ok := t.MultiKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMultiKey(Key1, Key2)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMultiKey got unexpected error: %v", err))
	}
	return v
}

// GetMultiKey retrieves the value with the specified key from
// the MultiKey map field of OpenconfigWithlistval_Model_B. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigWithlistval_Model_B) GetMultiKey(Key1 uint32, Key2 uint64) *OpenconfigWithlistval_Model_B_MultiKey {

	if t == nil {
		return nil
	}

	key := OpenconfigWithlistval_Model_B_MultiKey_Key{
		Key1: Key1,
		Key2: Key2,
	}

	if lm, ok := t.MultiKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteMultiKey deletes the value with the specified keys from
// the receiver OpenconfigWithlistval_Model_B. If there is no such element, the function
// is a no-op.
func (t *OpenconfigWithlistval_Model_B) DeleteMultiKey(Key1 uint32, Key2 uint64) {
	key := OpenconfigWithlistval_Model_B_MultiKey_Key{
		Key1: Key1,
		Key2: Key2,
	}

	delete(t.MultiKey, key)
}

// AppendMultiKey appends the supplied OpenconfigWithlistval_Model_B_MultiKey struct to the
// list MultiKey of OpenconfigWithlistval_Model_B. If the key value(s) specified in
// the supplied OpenconfigWithlistval_Model_B_MultiKey already exist in the list, an error is
// returned.
func (t *OpenconfigWithlistval_Model_B) AppendMultiKey(v *OpenconfigWithlistval_Model_B_MultiKey) error {
	if v.Key1 == nil {
		return fmt.Errorf("invalid nil key for Key1")
	}

	if v.Key2 == nil {
		return fmt.Errorf("invalid nil key for Key2")
	}

	key := OpenconfigWithlistval_Model_B_MultiKey_Key{
		Key1: *v.Key1,
		Key2: *v.Key2,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MultiKey == nil {
		t.MultiKey = make(map[OpenconfigWithlistval_Model_B_MultiKey_Key]*OpenconfigWithlistval_Model_B_MultiKey)
	}

	if _, ok := t.MultiKey[key]; ok {
		return fmt.Errorf("duplicate key for list MultiKey %v", key)
	}

	t.MultiKey[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_B
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_B) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MultiKey {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_B) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_B"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_B) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_B) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_B.
func (*OpenconfigWithlistval_Model_B) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_B_MultiKey represents the /openconfig-withlistval/model/b/multi-key YANG schema element.
type OpenconfigWithlistval_Model_B_MultiKey struct {
	Config *OpenconfigWithlistval_Model_B_MultiKey_Config `path:"config" module:"openconfig-withlistval"`
	Key1   *uint32                                        `path:"key1" module:"openconfig-withlistval"`
	Key2   *uint64                                        `path:"key2" module:"openconfig-withlistval"`
	State  *OpenconfigWithlistval_Model_B_MultiKey_State  `path:"state" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_B_MultiKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_B_MultiKey) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigWithlistval_Model_B_MultiKey) GetOrCreateConfig() *OpenconfigWithlistval_Model_B_MultiKey_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigWithlistval_Model_B_MultiKey_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigWithlistval_Model_B_MultiKey) GetOrCreateState() *OpenconfigWithlistval_Model_B_MultiKey_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigWithlistval_Model_B_MultiKey_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigWithlistval_Model_B_MultiKey. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigWithlistval_Model_B_MultiKey) GetConfig() *OpenconfigWithlistval_Model_B_MultiKey_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigWithlistval_Model_B_MultiKey. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigWithlistval_Model_B_MultiKey) GetState() *OpenconfigWithlistval_Model_B_MultiKey_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetKey1 retrieves the value of the leaf Key1 from the OpenconfigWithlistval_Model_B_MultiKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key1 is set, it can
// safely use t.GetKey1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key1 == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_B_MultiKey) GetKey1() uint32 {
	if t == nil || t.Key1 == nil {
		return 0
	}
	return *t.Key1
}

// GetKey2 retrieves the value of the leaf Key2 from the OpenconfigWithlistval_Model_B_MultiKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key2 is set, it can
// safely use t.GetKey2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key2 == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_B_MultiKey) GetKey2() uint64 {
	if t == nil || t.Key2 == nil {
		return 0
	}
	return *t.Key2
}

// SetKey1 sets the value of the leaf Key1 in the OpenconfigWithlistval_Model_B_MultiKey
// struct.
func (t *OpenconfigWithlistval_Model_B_MultiKey) SetKey1(v uint32) {
	t.Key1 = &v
}

// SetKey2 sets the value of the leaf Key2 in the OpenconfigWithlistval_Model_B_MultiKey
// struct.
func (t *OpenconfigWithlistval_Model_B_MultiKey) SetKey2(v uint64) {
	t.Key2 = &v
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_B_MultiKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_B_MultiKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Config.PopulateDefaults()
	t.State.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the OpenconfigWithlistval_Model_B_MultiKey struct, which is a YANG list entry.
func (t *OpenconfigWithlistval_Model_B_MultiKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Key1 == nil {
		return nil, fmt.Errorf("nil value for key Key1")
	}

	if t.Key2 == nil {
		return nil, fmt.Errorf("nil value for key Key2")
	}

	return map[string]interface{}{
		"key1": *t.Key1,
		"key2": *t.Key2,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_B_MultiKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_B_MultiKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_B_MultiKey) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_B_MultiKey) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_B_MultiKey.
func (*OpenconfigWithlistval_Model_B_MultiKey) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_B_MultiKey_Config represents the /openconfig-withlistval/model/b/multi-key/config YANG schema element.
type OpenconfigWithlistval_Model_B_MultiKey_Config struct {
	Key1 *uint32 `path:"key1" module:"openconfig-withlistval"`
	Key2 *uint64 `path:"key2" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_B_MultiKey_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_B_MultiKey_Config) IsYANGGoStruct() {}

// GetKey1 retrieves the value of the leaf Key1 from the OpenconfigWithlistval_Model_B_MultiKey_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key1 is set, it can
// safely use t.GetKey1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key1 == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_B_MultiKey_Config) GetKey1() uint32 {
	if t == nil || t.Key1 == nil {
		return 0
	}
	return *t.Key1
}

// GetKey2 retrieves the value of the leaf Key2 from the OpenconfigWithlistval_Model_B_MultiKey_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key2 is set, it can
// safely use t.GetKey2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key2 == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_B_MultiKey_Config) GetKey2() uint64 {
	if t == nil || t.Key2 == nil {
		return 0
	}
	return *t.Key2
}

// SetKey1 sets the value of the leaf Key1 in the OpenconfigWithlistval_Model_B_MultiKey_Config
// struct.
func (t *OpenconfigWithlistval_Model_B_MultiKey_Config) SetKey1(v uint32) {
	t.Key1 = &v
}

// SetKey2 sets the value of the leaf Key2 in the OpenconfigWithlistval_Model_B_MultiKey_Config
// struct.
func (t *OpenconfigWithlistval_Model_B_MultiKey_Config) SetKey2(v uint64) {
	t.Key2 = &v
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_B_MultiKey_Config
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_B_MultiKey_Config) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_B_MultiKey_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_B_MultiKey_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_B_MultiKey_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_B_MultiKey_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_B_MultiKey_Config.
func (*OpenconfigWithlistval_Model_B_MultiKey_Config) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_B_MultiKey_State represents the /openconfig-withlistval/model/b/multi-key/state YANG schema element.
type OpenconfigWithlistval_Model_B_MultiKey_State struct {
	Key1 *uint32 `path:"key1" module:"openconfig-withlistval"`
	Key2 *uint64 `path:"key2" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_B_MultiKey_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_B_MultiKey_State) IsYANGGoStruct() {}

// GetKey1 retrieves the value of the leaf Key1 from the OpenconfigWithlistval_Model_B_MultiKey_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key1 is set, it can
// safely use t.GetKey1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key1 == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_B_MultiKey_State) GetKey1() uint32 {
	if t == nil || t.Key1 == nil {
		return 0
	}
	return *t.Key1
}

// GetKey2 retrieves the value of the leaf Key2 from the OpenconfigWithlistval_Model_B_MultiKey_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key2 is set, it can
// safely use t.GetKey2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key2 == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_B_MultiKey_State) GetKey2() uint64 {
	if t == nil || t.Key2 == nil {
		return 0
	}
	return *t.Key2
}

// SetKey1 sets the value of the leaf Key1 in the OpenconfigWithlistval_Model_B_MultiKey_State
// struct.
func (t *OpenconfigWithlistval_Model_B_MultiKey_State) SetKey1(v uint32) {
	t.Key1 = &v
}

// SetKey2 sets the value of the leaf Key2 in the OpenconfigWithlistval_Model_B_MultiKey_State
// struct.
func (t *OpenconfigWithlistval_Model_B_MultiKey_State) SetKey2(v uint64) {
	t.Key2 = &v
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_B_MultiKey_State
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_B_MultiKey_State) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_B_MultiKey_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_B_MultiKey_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_B_MultiKey_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_B_MultiKey_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_B_MultiKey_State.
func (*OpenconfigWithlistval_Model_B_MultiKey_State) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_C represents the /openconfig-withlistval/model/c YANG schema element.
type OpenconfigWithlistval_Model_C struct {
	NoKey []*OpenconfigWithlistval_Model_C_NoKey `path:"no-key" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_C implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_C) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_C
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_C) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.NoKey {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_C) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_C"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_C) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_C) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_C.
func (*OpenconfigWithlistval_Model_C) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_C_NoKey represents the /openconfig-withlistval/model/c/no-key YANG schema element.
type OpenconfigWithlistval_Model_C_NoKey struct {
	Foo *OpenconfigWithlistval_Model_C_NoKey_Foo `path:"foo" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_C_NoKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_C_NoKey) IsYANGGoStruct() {}

// GetOrCreateFoo retrieves the value of the Foo field
// or returns the existing field if it already exists.
func (t *OpenconfigWithlistval_Model_C_NoKey) GetOrCreateFoo() *OpenconfigWithlistval_Model_C_NoKey_Foo {
	if t.Foo != nil {
		return t.Foo
	}
	t.Foo = &OpenconfigWithlistval_Model_C_NoKey_Foo{}
	return t.Foo
}

// GetFoo returns the value of the Foo struct pointer
// from OpenconfigWithlistval_Model_C_NoKey. If the receiver or the field Foo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigWithlistval_Model_C_NoKey) GetFoo() *OpenconfigWithlistval_Model_C_NoKey_Foo {
	if t != nil && t.Foo != nil {
		return t.Foo
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_C_NoKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_C_NoKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Foo.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_C_NoKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_C_NoKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_C_NoKey) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_C_NoKey) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_C_NoKey.
func (*OpenconfigWithlistval_Model_C_NoKey) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_C_NoKey_Foo represents the /openconfig-withlistval/model/c/no-key/foo YANG schema element.
type OpenconfigWithlistval_Model_C_NoKey_Foo struct {
	State *OpenconfigWithlistval_Model_C_NoKey_Foo_State `path:"state" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_C_NoKey_Foo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_C_NoKey_Foo) IsYANGGoStruct() {}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigWithlistval_Model_C_NoKey_Foo) GetOrCreateState() *OpenconfigWithlistval_Model_C_NoKey_Foo_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigWithlistval_Model_C_NoKey_Foo_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigWithlistval_Model_C_NoKey_Foo. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigWithlistval_Model_C_NoKey_Foo) GetState() *OpenconfigWithlistval_Model_C_NoKey_Foo_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_C_NoKey_Foo
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_C_NoKey_Foo) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.State.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_C_NoKey_Foo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_C_NoKey_Foo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_C_NoKey_Foo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_C_NoKey_Foo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_C_NoKey_Foo.
func (*OpenconfigWithlistval_Model_C_NoKey_Foo) ΛBelongingModule() string {
	return "openconfig-withlistval"
}

// OpenconfigWithlistval_Model_C_NoKey_Foo_State represents the /openconfig-withlistval/model/c/no-key/foo/state YANG schema element.
type OpenconfigWithlistval_Model_C_NoKey_Foo_State struct {
	Key   *string `path:"key" module:"openconfig-withlistval"`
	Value *int64  `path:"value" module:"openconfig-withlistval"`
}

// IsYANGGoStruct ensures that OpenconfigWithlistval_Model_C_NoKey_Foo_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWithlistval_Model_C_NoKey_Foo_State) IsYANGGoStruct() {}

// GetKey retrieves the value of the leaf Key from the OpenconfigWithlistval_Model_C_NoKey_Foo_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_C_NoKey_Foo_State) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// GetValue retrieves the value of the leaf Value from the OpenconfigWithlistval_Model_C_NoKey_Foo_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *OpenconfigWithlistval_Model_C_NoKey_Foo_State) GetValue() int64 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// SetKey sets the value of the leaf Key in the OpenconfigWithlistval_Model_C_NoKey_Foo_State
// struct.
func (t *OpenconfigWithlistval_Model_C_NoKey_Foo_State) SetKey(v string) {
	t.Key = &v
}

// SetValue sets the value of the leaf Value in the OpenconfigWithlistval_Model_C_NoKey_Foo_State
// struct.
func (t *OpenconfigWithlistval_Model_C_NoKey_Foo_State) SetValue(v int64) {
	t.Value = &v
}

// PopulateDefaults recursively populates unset leaf fields in the OpenconfigWithlistval_Model_C_NoKey_Foo_State
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpenconfigWithlistval_Model_C_NoKey_Foo_State) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_C_NoKey_Foo_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWithlistval_Model_C_NoKey_Foo_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWithlistval_Model_C_NoKey_Foo_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWithlistval_Model_C_NoKey_Foo_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigWithlistval_Model_C_NoKey_Foo_State.
func (*OpenconfigWithlistval_Model_C_NoKey_Foo_State) ΛBelongingModule() string {
	return "openconfig-withlistval"
}
