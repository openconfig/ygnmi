// Code generated by ygnmi version: (devel): (ygot: v0.34.0). DO NOT EDIT.

/*
Package withlistval is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: (devel): (ygot: v0.34.0)
using the following YANG input files:
  - ../../pathgen/testdata/yang/openconfig-simple.yang
  - ../../pathgen/testdata/yang/openconfig-withlistval.yang
  - ../../pathgen/testdata/yang/openconfig-nested.yang

Imported modules were sourced from:
*/
package withlistval

import (
	oc "github.com/openconfig/ygnmi/internal/uexampleoc"
	"github.com/openconfig/ygnmi/internal/uexampleoc/a"
	"github.com/openconfig/ygnmi/internal/uexampleoc/modelb"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// OpenconfigWithlistval_ModelPath represents the /openconfig-withlistval/model YANG schema element.
type OpenconfigWithlistval_ModelPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model]
}

// OpenconfigWithlistval_ModelPathAny represents the wildcard version of the /openconfig-withlistval/model YANG schema element.
type OpenconfigWithlistval_ModelPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigWithlistval_ModelPath) PathOriginName() string {
	return "openconfig"
}

// A (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "a"
//	Path from root:       "/model/a"
func (n *OpenconfigWithlistval_ModelPath) A() *a.OpenconfigWithlistval_Model_APath {
	ps := &a.OpenconfigWithlistval_Model_APath{
		NodePath: ygnmi.NewNodePath(
			[]string{"a"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigWithlistval_Model_A](
		"OpenconfigWithlistval_Model_A",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// A (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "a"
//	Path from root:       "/model/a"
func (n *OpenconfigWithlistval_ModelPathAny) A() *a.OpenconfigWithlistval_Model_APathAny {
	ps := &a.OpenconfigWithlistval_Model_APathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A](
		"OpenconfigWithlistval_Model_A",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// B (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "b"
//	Path from root:       "/model/b"
func (n *OpenconfigWithlistval_ModelPath) B() *modelb.OpenconfigWithlistval_Model_BPath {
	ps := &modelb.OpenconfigWithlistval_Model_BPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"b"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigWithlistval_Model_B](
		"OpenconfigWithlistval_Model_B",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// B (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "b"
//	Path from root:       "/model/b"
func (n *OpenconfigWithlistval_ModelPathAny) B() *modelb.OpenconfigWithlistval_Model_BPathAny {
	ps := &modelb.OpenconfigWithlistval_Model_BPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_B](
		"OpenconfigWithlistval_Model_B",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// C (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "c"
//	Path from root:       "/model/c"
func (n *OpenconfigWithlistval_ModelPath) C() *OpenconfigWithlistval_Model_CPath {
	ps := &OpenconfigWithlistval_Model_CPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"c"},
			map[string]interface{}{},
			n,
		),
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[*oc.OpenconfigWithlistval_Model_C](
		"OpenconfigWithlistval_Model_C",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// C (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "c"
//	Path from root:       "/model/c"
func (n *OpenconfigWithlistval_ModelPathAny) C() *OpenconfigWithlistval_Model_CPathAny {
	ps := &OpenconfigWithlistval_Model_CPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"c"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_C](
		"OpenconfigWithlistval_Model_C",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// OpenconfigWithlistval_Model_CPath represents the /openconfig-withlistval/model/c YANG schema element.
type OpenconfigWithlistval_Model_CPath struct {
	*ygnmi.NodePath
	ygnmi.SingletonQuery[*oc.OpenconfigWithlistval_Model_C]
}

// OpenconfigWithlistval_Model_CPathAny represents the wildcard version of the /openconfig-withlistval/model/c YANG schema element.
type OpenconfigWithlistval_Model_CPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_C]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigWithlistval_Model_CPath) PathOriginName() string {
	return "openconfig"
}

// NoKeyAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "no-key"
//	Path from root:       "/model/c/no-key"
func (n *OpenconfigWithlistval_Model_CPath) NoKeyAny() *OpenconfigWithlistval_Model_C_NoKeyPathAny {
	ps := &OpenconfigWithlistval_Model_C_NoKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"no-key"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_C_NoKey](
		"OpenconfigWithlistval_Model_C_NoKey",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// NoKeyAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "no-key"
//	Path from root:       "/model/c/no-key"
func (n *OpenconfigWithlistval_Model_CPathAny) NoKeyAny() *OpenconfigWithlistval_Model_C_NoKeyPathAny {
	ps := &OpenconfigWithlistval_Model_C_NoKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"no-key"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_C_NoKey](
		"OpenconfigWithlistval_Model_C_NoKey",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_C_NoKeyPath represents the /openconfig-withlistval/model/c/no-key YANG schema element.
type OpenconfigWithlistval_Model_C_NoKeyPath struct {
	*ygnmi.NodePath
	ygnmi.SingletonQuery[*oc.OpenconfigWithlistval_Model_C_NoKey]
}

// OpenconfigWithlistval_Model_C_NoKeyPathAny represents the wildcard version of the /openconfig-withlistval/model/c/no-key YANG schema element.
type OpenconfigWithlistval_Model_C_NoKeyPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_C_NoKey]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigWithlistval_Model_C_NoKeyPath) PathOriginName() string {
	return "openconfig"
}

// OpenconfigWithlistval_Model_C_NoKey_FooPath represents the /openconfig-withlistval/model/c/no-key/foo YANG schema element.
type OpenconfigWithlistval_Model_C_NoKey_FooPath struct {
	*ygnmi.NodePath
	ygnmi.SingletonQuery[*oc.OpenconfigWithlistval_Model_C_NoKey_Foo]
}

// OpenconfigWithlistval_Model_C_NoKey_FooPathAny represents the wildcard version of the /openconfig-withlistval/model/c/no-key/foo YANG schema element.
type OpenconfigWithlistval_Model_C_NoKey_FooPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_C_NoKey_Foo]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigWithlistval_Model_C_NoKey_FooPath) PathOriginName() string {
	return "openconfig"
}

// State (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state"
//	Path from root:       "/model/c/no-key/foo/state"
func (n *OpenconfigWithlistval_Model_C_NoKey_FooPath) State() *OpenconfigWithlistval_Model_C_NoKey_Foo_StatePath {
	ps := &OpenconfigWithlistval_Model_C_NoKey_Foo_StatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[*oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State](
		"OpenconfigWithlistval_Model_C_NoKey_Foo_State",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// State (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state"
//	Path from root:       "/model/c/no-key/foo/state"
func (n *OpenconfigWithlistval_Model_C_NoKey_FooPathAny) State() *OpenconfigWithlistval_Model_C_NoKey_Foo_StatePathAny {
	ps := &OpenconfigWithlistval_Model_C_NoKey_Foo_StatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State](
		"OpenconfigWithlistval_Model_C_NoKey_Foo_State",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_C_NoKey_Foo_State_KeyPath represents the /openconfig-withlistval/model/c/no-key/foo/state/key YANG schema element.
type OpenconfigWithlistval_Model_C_NoKey_Foo_State_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[string]
}

// OpenconfigWithlistval_Model_C_NoKey_Foo_State_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/c/no-key/foo/state/key YANG schema element.
type OpenconfigWithlistval_Model_C_NoKey_Foo_State_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigWithlistval_Model_C_NoKey_Foo_State_KeyPath) PathOriginName() string {
	return ""
}

// OpenconfigWithlistval_Model_C_NoKey_Foo_State_ValuePath represents the /openconfig-withlistval/model/c/no-key/foo/state/value YANG schema element.
type OpenconfigWithlistval_Model_C_NoKey_Foo_State_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[int64]
}

// OpenconfigWithlistval_Model_C_NoKey_Foo_State_ValuePathAny represents the wildcard version of the /openconfig-withlistval/model/c/no-key/foo/state/value YANG schema element.
type OpenconfigWithlistval_Model_C_NoKey_Foo_State_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[int64]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigWithlistval_Model_C_NoKey_Foo_State_ValuePath) PathOriginName() string {
	return ""
}

// OpenconfigWithlistval_Model_C_NoKey_Foo_StatePath represents the /openconfig-withlistval/model/c/no-key/foo/state YANG schema element.
type OpenconfigWithlistval_Model_C_NoKey_Foo_StatePath struct {
	*ygnmi.NodePath
	ygnmi.SingletonQuery[*oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State]
}

// OpenconfigWithlistval_Model_C_NoKey_Foo_StatePathAny represents the wildcard version of the /openconfig-withlistval/model/c/no-key/foo/state YANG schema element.
type OpenconfigWithlistval_Model_C_NoKey_Foo_StatePathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigWithlistval_Model_C_NoKey_Foo_StatePath) PathOriginName() string {
	return "openconfig"
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/c/no-key/foo/state/key"
func (n *OpenconfigWithlistval_Model_C_NoKey_Foo_StatePath) Key() *OpenconfigWithlistval_Model_C_NoKey_Foo_State_KeyPath {
	ps := &OpenconfigWithlistval_Model_C_NoKey_Foo_State_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[string](
		"OpenconfigWithlistval_Model_C_NoKey_Foo_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/c/no-key/foo/state/key"
func (n *OpenconfigWithlistval_Model_C_NoKey_Foo_StatePathAny) Key() *OpenconfigWithlistval_Model_C_NoKey_Foo_State_KeyPathAny {
	ps := &OpenconfigWithlistval_Model_C_NoKey_Foo_State_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigWithlistval_Model_C_NoKey_Foo_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/c/no-key/foo/state/value"
func (n *OpenconfigWithlistval_Model_C_NoKey_Foo_StatePath) Value() *OpenconfigWithlistval_Model_C_NoKey_Foo_State_ValuePath {
	ps := &OpenconfigWithlistval_Model_C_NoKey_Foo_State_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[int64](
		"OpenconfigWithlistval_Model_C_NoKey_Foo_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/c/no-key/foo/state/value"
func (n *OpenconfigWithlistval_Model_C_NoKey_Foo_StatePathAny) Value() *OpenconfigWithlistval_Model_C_NoKey_Foo_State_ValuePathAny {
	ps := &OpenconfigWithlistval_Model_C_NoKey_Foo_State_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[int64](
		"OpenconfigWithlistval_Model_C_NoKey_Foo_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}
