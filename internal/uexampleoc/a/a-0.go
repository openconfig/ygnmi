// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Package a is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: (devel): (ygot: v0.29.20)
using the following YANG input files:
  - ../../pathgen/testdata/yang/openconfig-simple.yang
  - ../../pathgen/testdata/yang/openconfig-withlistval.yang
  - ../../pathgen/testdata/yang/openconfig-nested.yang

Imported modules were sourced from:
*/
package a

import (
	"reflect"

	oc "github.com/openconfig/ygnmi/internal/uexampleoc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// OpenconfigWithlistval_Model_APath represents the /openconfig-withlistval/model/a YANG schema element.
type OpenconfigWithlistval_Model_APath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_A]
}

// OpenconfigWithlistval_Model_APathAny represents the wildcard version of the /openconfig-withlistval/model/a YANG schema element.
type OpenconfigWithlistval_Model_APathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A]
}

// SingleKeyAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "single-key"
//	Path from root:       "/model/a/single-key"
func (n *OpenconfigWithlistval_Model_APath) SingleKeyAny() *OpenconfigWithlistval_Model_A_SingleKeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-key"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey](
		"OpenconfigWithlistval_Model_A_SingleKey",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// SingleKeyAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "single-key"
//	Path from root:       "/model/a/single-key"
func (n *OpenconfigWithlistval_Model_APathAny) SingleKeyAny() *OpenconfigWithlistval_Model_A_SingleKeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-key"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey](
		"OpenconfigWithlistval_Model_A_SingleKey",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// SingleKey (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "single-key"
//	Path from root:       "/model/a/single-key"
//
//	Key: string
func (n *OpenconfigWithlistval_Model_APath) SingleKey(Key string) *OpenconfigWithlistval_Model_A_SingleKeyPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-key"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey](
		"OpenconfigWithlistval_Model_A_SingleKey",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// SingleKey (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "single-key"
//	Path from root:       "/model/a/single-key"
//
//	Key: string
func (n *OpenconfigWithlistval_Model_APathAny) SingleKey(Key string) *OpenconfigWithlistval_Model_A_SingleKeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-key"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey](
		"OpenconfigWithlistval_Model_A_SingleKey",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// SingleKeyMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "single-key"
//	Path from root:       "/model/a/single-key"
func (n *OpenconfigWithlistval_Model_APath) SingleKeyMap() *OpenconfigWithlistval_Model_A_SingleKeyPathMap {
	ps := &OpenconfigWithlistval_Model_A_SingleKeyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-key"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[map[string]*oc.OpenconfigWithlistval_Model_A_SingleKey](
		"OpenconfigWithlistval_Model_A",
		true,
		false,
		false,
		false,
		false,
		true,
		ps,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.OpenconfigWithlistval_Model_A_SingleKey, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A).SingleKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// SingleKeyMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "single-key"
//	Path from root:       "/model/a/single-key"
func (n *OpenconfigWithlistval_Model_APathAny) SingleKeyMap() *OpenconfigWithlistval_Model_A_SingleKeyPathMapAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKeyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-key"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[map[string]*oc.OpenconfigWithlistval_Model_A_SingleKey](
		"OpenconfigWithlistval_Model_A",
		true,
		false,
		false,
		false,
		false,
		true,
		ps,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.OpenconfigWithlistval_Model_A_SingleKey, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A).SingleKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// OpenconfigWithlistval_Model_A_SingleKey_KeyPath represents the /openconfig-withlistval/model/a/single-key/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKeyPath represents the /openconfig-withlistval/model/a/single-key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKeyPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey]
}

// OpenconfigWithlistval_Model_A_SingleKeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKeyPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey]
}

// OpenconfigWithlistval_Model_A_SingleKeyPathMap represents the /openconfig-withlistval/model/a/single-key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKeyPathMap struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[map[string]*oc.OpenconfigWithlistval_Model_A_SingleKey]
}

// OpenconfigWithlistval_Model_A_SingleKeyPathMapAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKeyPathMapAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[map[string]*oc.OpenconfigWithlistval_Model_A_SingleKey]
}

// Config (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config"
//	Path from root:       "/model/a/single-key/config"
func (n *OpenconfigWithlistval_Model_A_SingleKeyPath) Config() *OpenconfigWithlistval_Model_A_SingleKey_ConfigPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_ConfigPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"config"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_Config](
		"OpenconfigWithlistval_Model_A_SingleKey_Config",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Config (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config"
//	Path from root:       "/model/a/single-key/config"
func (n *OpenconfigWithlistval_Model_A_SingleKeyPathAny) Config() *OpenconfigWithlistval_Model_A_SingleKey_ConfigPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_ConfigPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"config"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_Config](
		"OpenconfigWithlistval_Model_A_SingleKey_Config",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// InnerA (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "inner-a"
//	Path from root:       "/model/a/single-key/inner-a"
func (n *OpenconfigWithlistval_Model_A_SingleKeyPath) InnerA() *OpenconfigWithlistval_Model_A_SingleKey_InnerAPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerAPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"inner-a"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// InnerA (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "inner-a"
//	Path from root:       "/model/a/single-key/inner-a"
func (n *OpenconfigWithlistval_Model_A_SingleKeyPathAny) InnerA() *OpenconfigWithlistval_Model_A_SingleKey_InnerAPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerAPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"inner-a"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/key"
func (n *OpenconfigWithlistval_Model_A_SingleKeyPath) Key() *OpenconfigWithlistval_Model_A_SingleKey_KeyPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/key"
func (n *OpenconfigWithlistval_Model_A_SingleKeyPathAny) Key() *OpenconfigWithlistval_Model_A_SingleKey_KeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// NestedLists (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "nested-lists"
//	Path from root:       "/model/a/single-key/nested-lists"
func (n *OpenconfigWithlistval_Model_A_SingleKeyPath) NestedLists() *OpenconfigWithlistval_Model_A_SingleKey_NestedListsPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_NestedListsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"nested-lists"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists](
		"OpenconfigWithlistval_Model_A_SingleKey_NestedLists",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// NestedLists (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "nested-lists"
//	Path from root:       "/model/a/single-key/nested-lists"
func (n *OpenconfigWithlistval_Model_A_SingleKeyPathAny) NestedLists() *OpenconfigWithlistval_Model_A_SingleKey_NestedListsPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_NestedListsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"nested-lists"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists](
		"OpenconfigWithlistval_Model_A_SingleKey_NestedLists",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OrderedLists (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "ordered-lists"
//	Path from root:       "/model/a/single-key/ordered-lists"
func (n *OpenconfigWithlistval_Model_A_SingleKeyPath) OrderedLists() *OpenconfigWithlistval_Model_A_SingleKey_OrderedListsPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedListsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ordered-lists"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OrderedLists (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "ordered-lists"
//	Path from root:       "/model/a/single-key/ordered-lists"
func (n *OpenconfigWithlistval_Model_A_SingleKeyPathAny) OrderedLists() *OpenconfigWithlistval_Model_A_SingleKey_OrderedListsPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedListsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ordered-lists"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// State (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state"
//	Path from root:       "/model/a/single-key/state"
func (n *OpenconfigWithlistval_Model_A_SingleKeyPath) State() *OpenconfigWithlistval_Model_A_SingleKey_StatePath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_StatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_State](
		"OpenconfigWithlistval_Model_A_SingleKey_State",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// State (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state"
//	Path from root:       "/model/a/single-key/state"
func (n *OpenconfigWithlistval_Model_A_SingleKeyPathAny) State() *OpenconfigWithlistval_Model_A_SingleKey_StatePathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_StatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_State](
		"OpenconfigWithlistval_Model_A_SingleKey_State",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_A_SingleKey_Config_KeyPath represents the /openconfig-withlistval/model/a/single-key/config/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_Config_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_Config_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/config/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_Config_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_Config_ValuePath represents the /openconfig-withlistval/model/a/single-key/config/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_Config_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_Config_ValuePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/config/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_Config_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_ConfigPath represents the /openconfig-withlistval/model/a/single-key/config YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_ConfigPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_Config]
}

// OpenconfigWithlistval_Model_A_SingleKey_ConfigPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/config YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_ConfigPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_Config]
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/config/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_ConfigPath) Key() *OpenconfigWithlistval_Model_A_SingleKey_Config_KeyPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_Config_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_Config",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_Config).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/config/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_ConfigPathAny) Key() *OpenconfigWithlistval_Model_A_SingleKey_Config_KeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_Config_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_Config",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_Config).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/config/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_ConfigPath) Value() *OpenconfigWithlistval_Model_A_SingleKey_Config_ValuePath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_Config_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_Config",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_Config).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/config/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_ConfigPathAny) Value() *OpenconfigWithlistval_Model_A_SingleKey_Config_ValuePathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_Config_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_Config",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_Config).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerAPath represents the /openconfig-withlistval/model/a/single-key/inner-a YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerAPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerAPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerAPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_KeyPath represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a/single-key/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPath represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a/single-key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPathMap represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPathMap struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[map[string]*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPathMapAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a/single-key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPathMapAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[map[string]*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey]
}

// Config (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config"
//	Path from root:       "/model/a/single-key/inner-a/single-key/config"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPath) Config() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"config"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Config (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config"
//	Path from root:       "/model/a/single-key/inner-a/single-key/config"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPathAny) Config() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"config"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/inner-a/single-key/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPath) Key() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_KeyPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/inner-a/single-key/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPathAny) Key() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_KeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// State (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state"
//	Path from root:       "/model/a/single-key/inner-a/single-key/state"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPath) State() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// State (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state"
//	Path from root:       "/model/a/single-key/inner-a/single-key/state"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPathAny) State() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_KeyPath represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key/config/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a/single-key/config/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_ValuePath represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key/config/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_ValuePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a/single-key/config/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPath represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key/config YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a/single-key/config YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config]
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/inner-a/single-key/config/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPath) Key() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_KeyPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/inner-a/single-key/config/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPathAny) Key() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_KeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/inner-a/single-key/config/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPath) Value() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_ValuePath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/inner-a/single-key/config/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPathAny) Value() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_ValuePathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_KeyPath represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key/state/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a/single-key/state/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_ValuePath represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key/state/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_ValuePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a/single-key/state/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePath represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key/state YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePath struct {
	*ygnmi.NodePath
	ygnmi.SingletonQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a/single-key/state YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State]
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/inner-a/single-key/state/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePath) Key() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_KeyPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/inner-a/single-key/state/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePathAny) Key() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_KeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/inner-a/single-key/state/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePath) Value() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_ValuePath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/inner-a/single-key/state/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePathAny) Value() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_ValuePathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedListsPath represents the /openconfig-withlistval/model/a/single-key/nested-lists YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedListsPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists]
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedListsPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/nested-lists YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedListsPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists]
}

// NestedListAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "nested-list"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list"
func (n *OpenconfigWithlistval_Model_A_SingleKey_NestedListsPath) NestedListAny() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"nested-list"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList](
		"OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// NestedListAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "nested-list"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list"
func (n *OpenconfigWithlistval_Model_A_SingleKey_NestedListsPathAny) NestedListAny() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"nested-list"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList](
		"OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// NestedList (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "nested-list"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list"
//
//	Key: string
func (n *OpenconfigWithlistval_Model_A_SingleKey_NestedListsPath) NestedList(Key string) *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"nested-list"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList](
		"OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// NestedList (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "nested-list"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list"
//
//	Key: string
func (n *OpenconfigWithlistval_Model_A_SingleKey_NestedListsPathAny) NestedList(Key string) *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"nested-list"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList](
		"OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// NestedListMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "nested-list"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list"
func (n *OpenconfigWithlistval_Model_A_SingleKey_NestedListsPath) NestedListMap() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPathMap {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"nested-list"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[map[string]*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList](
		"OpenconfigWithlistval_Model_A_SingleKey_NestedLists",
		true,
		false,
		false,
		false,
		false,
		true,
		ps,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists).NestedList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// NestedListMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "nested-list"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list"
func (n *OpenconfigWithlistval_Model_A_SingleKey_NestedListsPathAny) NestedListMap() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPathMapAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"nested-list"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[map[string]*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList](
		"OpenconfigWithlistval_Model_A_SingleKey_NestedLists",
		true,
		false,
		false,
		false,
		false,
		true,
		ps,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists).NestedList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_KeyPath represents the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPath represents the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList]
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList]
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPathMap represents the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPathMap struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[map[string]*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList]
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPathMapAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPathMapAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[map[string]*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList]
}

// Config (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/config"
func (n *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPath) Config() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_ConfigPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_ConfigPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"config"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config](
		"OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Config (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/config"
func (n *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPathAny) Config() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_ConfigPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_ConfigPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"config"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config](
		"OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPath) Key() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_KeyPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPathAny) Key() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_KeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// State (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/state"
func (n *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPath) State() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_StatePath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_StatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State](
		"OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// State (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/state"
func (n *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedListPathAny) State() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_StatePathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_StatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State](
		"OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config_KeyPath represents the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list/config/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list/config/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config_ValuePath represents the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list/config/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config_ValuePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list/config/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_ConfigPath represents the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list/config YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_ConfigPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config]
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_ConfigPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list/config YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_ConfigPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config]
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/config/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_ConfigPath) Key() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config_KeyPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/config/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_ConfigPathAny) Key() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config_KeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/config/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_ConfigPath) Value() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config_ValuePath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/config/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_ConfigPathAny) Value() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config_ValuePathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_Config)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State_KeyPath represents the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list/state/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list/state/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State_ValuePath represents the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list/state/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State_ValuePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list/state/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_StatePath represents the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list/state YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_StatePath struct {
	*ygnmi.NodePath
	ygnmi.SingletonQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State]
}

// OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_StatePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/nested-lists/nested-list/state YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_StatePathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State]
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/state/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_StatePath) Key() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State_KeyPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/state/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_StatePathAny) Key() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State_KeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/state/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_StatePath) Value() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State_ValuePath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/nested-lists/nested-list/state/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_StatePathAny) Value() *OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State_ValuePathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_NestedLists_NestedList_State)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedListsPath represents the /openconfig-withlistval/model/a/single-key/ordered-lists YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedListsPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedListsPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/ordered-lists YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedListsPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists]
}

// OrderedListMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "ordered-list"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list"
func (n *OpenconfigWithlistval_Model_A_SingleKey_OrderedListsPath) OrderedListMap() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPathMap {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"ordered-list"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists",
		true,
		false,
		false,
		false,
		false,
		true,
		ps,
		func(gs ygot.ValidatedGoStruct) (*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists).OrderedList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OrderedListMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "ordered-list"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list"
func (n *OpenconfigWithlistval_Model_A_SingleKey_OrderedListsPathAny) OrderedListMap() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPathMapAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ordered-list"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists",
		true,
		false,
		false,
		false,
		false,
		true,
		ps,
		func(gs ygot.ValidatedGoStruct) (*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists).OrderedList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPath represents the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPath struct {
	*ygnmi.NodePath
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPathAny struct {
	*ygnmi.NodePath
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPathMap represents the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPathMap struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPathMapAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPathMapAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_KeyPath represents the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/config/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/config/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_ValuePath represents the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/config/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_ValuePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/config/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_ConfigPath represents the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/config YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_ConfigPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_ConfigPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/config YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_ConfigPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config]
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list/config/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_ConfigPath) Key() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_KeyPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list/config/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_ConfigPathAny) Key() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_KeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list/config/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_ConfigPath) Value() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_ValuePath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list/config/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_ConfigPathAny) Value() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_ValuePathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_KeyPath represents the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/state/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/state/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_ValuePath represents the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/state/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_ValuePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/state/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_StatePath represents the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/state YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_StatePath struct {
	*ygnmi.NodePath
	ygnmi.SingletonQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_StatePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/state YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_StatePathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State]
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list/state/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_StatePath) Key() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_KeyPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list/state/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_StatePathAny) Key() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_KeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list/state/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_StatePath) Value() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_ValuePath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list/state/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_StatePathAny) Value() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_ValuePathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_A_SingleKey_State_CounterPath represents the /openconfig-withlistval/model/a/single-key/state/counter YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_State_CounterPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[float32]
}

// OpenconfigWithlistval_Model_A_SingleKey_State_CounterPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/state/counter YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_State_CounterPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[float32]
}

// OpenconfigWithlistval_Model_A_SingleKey_State_CountersPath represents the /openconfig-withlistval/model/a/single-key/state/counters YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_State_CountersPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[[]float32]
}

// OpenconfigWithlistval_Model_A_SingleKey_State_CountersPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/state/counters YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_State_CountersPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[[]float32]
}

// OpenconfigWithlistval_Model_A_SingleKey_State_KeyPath represents the /openconfig-withlistval/model/a/single-key/state/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_State_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_State_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/state/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_State_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_State_ValuePath represents the /openconfig-withlistval/model/a/single-key/state/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_State_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_State_ValuePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/state/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_State_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_StatePath represents the /openconfig-withlistval/model/a/single-key/state YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_StatePath struct {
	*ygnmi.NodePath
	ygnmi.SingletonQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_State]
}

// OpenconfigWithlistval_Model_A_SingleKey_StatePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/state YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_StatePathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_State]
}

// Counter (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "counter"
//	Path from root:       "/model/a/single-key/state/counter"
func (n *OpenconfigWithlistval_Model_A_SingleKey_StatePath) Counter() *OpenconfigWithlistval_Model_A_SingleKey_State_CounterPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_State_CounterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"counter"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[float32](
		"OpenconfigWithlistval_Model_A_SingleKey_State",
		true,
		false,
		true,
		false,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_State).Counter
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Counter (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "counter"
//	Path from root:       "/model/a/single-key/state/counter"
func (n *OpenconfigWithlistval_Model_A_SingleKey_StatePathAny) Counter() *OpenconfigWithlistval_Model_A_SingleKey_State_CounterPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_State_CounterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"counter"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[float32](
		"OpenconfigWithlistval_Model_A_SingleKey_State",
		true,
		false,
		true,
		false,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_State).Counter
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Counters (leaf-list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "counters"
//	Path from root:       "/model/a/single-key/state/counters"
func (n *OpenconfigWithlistval_Model_A_SingleKey_StatePath) Counters() *OpenconfigWithlistval_Model_A_SingleKey_State_CountersPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_State_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"counters"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[[]float32](
		"OpenconfigWithlistval_Model_A_SingleKey_State",
		true,
		false,
		true,
		false,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) ([]float32, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_State).Counters
			return binarySliceToFloatSlice(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Counters (leaf-list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "counters"
//	Path from root:       "/model/a/single-key/state/counters"
func (n *OpenconfigWithlistval_Model_A_SingleKey_StatePathAny) Counters() *OpenconfigWithlistval_Model_A_SingleKey_State_CountersPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_State_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"counters"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[[]float32](
		"OpenconfigWithlistval_Model_A_SingleKey_State",
		true,
		false,
		true,
		false,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) ([]float32, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_State).Counters
			return binarySliceToFloatSlice(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/state/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_StatePath) Key() *OpenconfigWithlistval_Model_A_SingleKey_State_KeyPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_State_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_State).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/state/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_StatePathAny) Key() *OpenconfigWithlistval_Model_A_SingleKey_State_KeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_State_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_State).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/state/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_StatePath) Value() *OpenconfigWithlistval_Model_A_SingleKey_State_ValuePath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_State_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_State).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/state/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_StatePathAny) Value() *OpenconfigWithlistval_Model_A_SingleKey_State_ValuePathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_State_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_State).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}
