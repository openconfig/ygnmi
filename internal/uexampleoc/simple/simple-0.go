// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Package simple is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: (devel): (ygot: v0.34.0)
using the following YANG input files:
  - ../../pathgen/testdata/yang/openconfig-simple.yang
  - ../../pathgen/testdata/yang/openconfig-withlistval.yang
  - ../../pathgen/testdata/yang/openconfig-nested.yang
  - ../../pathgen/testdata/yang/openconfig-unione.yang

Imported modules were sourced from:
*/
package simple

import (
	"reflect"

	oc "github.com/openconfig/ygnmi/internal/uexampleoc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// OpenconfigSimple_ParentPath represents the /openconfig-simple/parent YANG schema element.
type OpenconfigSimple_ParentPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigSimple_Parent]
}

// OpenconfigSimple_ParentPathAny represents the wildcard version of the /openconfig-simple/parent YANG schema element.
type OpenconfigSimple_ParentPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigSimple_Parent]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_ParentPath) PathOriginName() string {
	return "openconfig"
}

// Child (container):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "child"
//	Path from root:       "/parent/child"
func (n *OpenconfigSimple_ParentPath) Child() *OpenconfigSimple_Parent_ChildPath {
	ps := &OpenconfigSimple_Parent_ChildPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"child"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigSimple_Parent_Child](
		"OpenconfigSimple_Parent_Child",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Child (container):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "child"
//	Path from root:       "/parent/child"
func (n *OpenconfigSimple_ParentPathAny) Child() *OpenconfigSimple_Parent_ChildPathAny {
	ps := &OpenconfigSimple_Parent_ChildPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"child"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigSimple_Parent_Child](
		"OpenconfigSimple_Parent_Child",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// OpenconfigSimple_Parent_ChildPath represents the /openconfig-simple/parent/child YANG schema element.
type OpenconfigSimple_Parent_ChildPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigSimple_Parent_Child]
}

// OpenconfigSimple_Parent_ChildPathAny represents the wildcard version of the /openconfig-simple/parent/child YANG schema element.
type OpenconfigSimple_Parent_ChildPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigSimple_Parent_Child]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_ChildPath) PathOriginName() string {
	return "openconfig"
}

// Config (container):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "config"
//	Path from root:       "/parent/child/config"
func (n *OpenconfigSimple_Parent_ChildPath) Config() *OpenconfigSimple_Parent_Child_ConfigPath {
	ps := &OpenconfigSimple_Parent_Child_ConfigPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"config"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigSimple_Parent_Child_Config](
		"OpenconfigSimple_Parent_Child_Config",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Config (container):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "config"
//	Path from root:       "/parent/child/config"
func (n *OpenconfigSimple_Parent_ChildPathAny) Config() *OpenconfigSimple_Parent_Child_ConfigPathAny {
	ps := &OpenconfigSimple_Parent_Child_ConfigPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"config"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigSimple_Parent_Child_Config](
		"OpenconfigSimple_Parent_Child_Config",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// State (container):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "state"
//	Path from root:       "/parent/child/state"
func (n *OpenconfigSimple_Parent_ChildPath) State() *OpenconfigSimple_Parent_Child_StatePath {
	ps := &OpenconfigSimple_Parent_Child_StatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[*oc.OpenconfigSimple_Parent_Child_State](
		"OpenconfigSimple_Parent_Child_State",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// State (container):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "state"
//	Path from root:       "/parent/child/state"
func (n *OpenconfigSimple_Parent_ChildPathAny) State() *OpenconfigSimple_Parent_Child_StatePathAny {
	ps := &OpenconfigSimple_Parent_Child_StatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigSimple_Parent_Child_State](
		"OpenconfigSimple_Parent_Child_State",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OpenconfigSimple_Parent_Child_Config_FivePath represents the /openconfig-simple/parent/child/config/five YANG schema element.
type OpenconfigSimple_Parent_Child_Config_FivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[float32]
}

// OpenconfigSimple_Parent_Child_Config_FivePathAny represents the wildcard version of the /openconfig-simple/parent/child/config/five YANG schema element.
type OpenconfigSimple_Parent_Child_Config_FivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[float32]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_Config_FivePath) PathOriginName() string {
	return ""
}

// OpenconfigSimple_Parent_Child_Config_FourPath represents the /openconfig-simple/parent/child/config/four YANG schema element.
type OpenconfigSimple_Parent_Child_Config_FourPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[oc.Binary]
}

// OpenconfigSimple_Parent_Child_Config_FourPathAny represents the wildcard version of the /openconfig-simple/parent/child/config/four YANG schema element.
type OpenconfigSimple_Parent_Child_Config_FourPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[oc.Binary]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_Config_FourPath) PathOriginName() string {
	return ""
}

// OpenconfigSimple_Parent_Child_Config_OnePath represents the /openconfig-simple/parent/child/config/one YANG schema element.
type OpenconfigSimple_Parent_Child_Config_OnePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[string]
}

// OpenconfigSimple_Parent_Child_Config_OnePathAny represents the wildcard version of the /openconfig-simple/parent/child/config/one YANG schema element.
type OpenconfigSimple_Parent_Child_Config_OnePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_Config_OnePath) PathOriginName() string {
	return ""
}

// OpenconfigSimple_Parent_Child_Config_SixPath represents the /openconfig-simple/parent/child/config/six YANG schema element.
type OpenconfigSimple_Parent_Child_Config_SixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[[]float32]
}

// OpenconfigSimple_Parent_Child_Config_SixPathAny represents the wildcard version of the /openconfig-simple/parent/child/config/six YANG schema element.
type OpenconfigSimple_Parent_Child_Config_SixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[[]float32]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_Config_SixPath) PathOriginName() string {
	return ""
}

// OpenconfigSimple_Parent_Child_Config_ThreePath represents the /openconfig-simple/parent/child/config/three YANG schema element.
type OpenconfigSimple_Parent_Child_Config_ThreePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[oc.E_Simple_Parent_Child_Config_Three]
}

// OpenconfigSimple_Parent_Child_Config_ThreePathAny represents the wildcard version of the /openconfig-simple/parent/child/config/three YANG schema element.
type OpenconfigSimple_Parent_Child_Config_ThreePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[oc.E_Simple_Parent_Child_Config_Three]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_Config_ThreePath) PathOriginName() string {
	return ""
}

// OpenconfigSimple_Parent_Child_ConfigPath represents the /openconfig-simple/parent/child/config YANG schema element.
type OpenconfigSimple_Parent_Child_ConfigPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigSimple_Parent_Child_Config]
}

// OpenconfigSimple_Parent_Child_ConfigPathAny represents the wildcard version of the /openconfig-simple/parent/child/config YANG schema element.
type OpenconfigSimple_Parent_Child_ConfigPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigSimple_Parent_Child_Config]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_ConfigPath) PathOriginName() string {
	return "openconfig"
}

// Five (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "five"
//	Path from root:       "/parent/child/config/five"
func (n *OpenconfigSimple_Parent_Child_ConfigPath) Five() *OpenconfigSimple_Parent_Child_Config_FivePath {
	ps := &OpenconfigSimple_Parent_Child_Config_FivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"five"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[float32](
		"OpenconfigSimple_Parent_Child_Config",
		true,
		false,
		true,
		false,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.OpenconfigSimple_Parent_Child_Config).Five
			v := reflect.ValueOf(ret)
			return ygot.BinaryToFloat32(ret), v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_Parent_Child_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Five (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "five"
//	Path from root:       "/parent/child/config/five"
func (n *OpenconfigSimple_Parent_Child_ConfigPathAny) Five() *OpenconfigSimple_Parent_Child_Config_FivePathAny {
	ps := &OpenconfigSimple_Parent_Child_Config_FivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"five"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[float32](
		"OpenconfigSimple_Parent_Child_Config",
		true,
		false,
		true,
		false,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.OpenconfigSimple_Parent_Child_Config).Five
			v := reflect.ValueOf(ret)
			return ygot.BinaryToFloat32(ret), v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_Parent_Child_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Four (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "four"
//	Path from root:       "/parent/child/config/four"
func (n *OpenconfigSimple_Parent_Child_ConfigPath) Four() *OpenconfigSimple_Parent_Child_Config_FourPath {
	ps := &OpenconfigSimple_Parent_Child_Config_FourPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"four"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[oc.Binary](
		"OpenconfigSimple_Parent_Child_Config",
		true,
		false,
		true,
		false,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (oc.Binary, bool) {
			ret := gs.(*oc.OpenconfigSimple_Parent_Child_Config).Four
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_Parent_Child_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Four (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "four"
//	Path from root:       "/parent/child/config/four"
func (n *OpenconfigSimple_Parent_Child_ConfigPathAny) Four() *OpenconfigSimple_Parent_Child_Config_FourPathAny {
	ps := &OpenconfigSimple_Parent_Child_Config_FourPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"four"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[oc.Binary](
		"OpenconfigSimple_Parent_Child_Config",
		true,
		false,
		true,
		false,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (oc.Binary, bool) {
			ret := gs.(*oc.OpenconfigSimple_Parent_Child_Config).Four
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_Parent_Child_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// One (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "one"
//	Path from root:       "/parent/child/config/one"
func (n *OpenconfigSimple_Parent_Child_ConfigPath) One() *OpenconfigSimple_Parent_Child_Config_OnePath {
	ps := &OpenconfigSimple_Parent_Child_Config_OnePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"one"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[string](
		"OpenconfigSimple_Parent_Child_Config",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigSimple_Parent_Child_Config).One
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_Parent_Child_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// One (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "one"
//	Path from root:       "/parent/child/config/one"
func (n *OpenconfigSimple_Parent_Child_ConfigPathAny) One() *OpenconfigSimple_Parent_Child_Config_OnePathAny {
	ps := &OpenconfigSimple_Parent_Child_Config_OnePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"one"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigSimple_Parent_Child_Config",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigSimple_Parent_Child_Config).One
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_Parent_Child_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Six (leaf-list):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "six"
//	Path from root:       "/parent/child/config/six"
func (n *OpenconfigSimple_Parent_Child_ConfigPath) Six() *OpenconfigSimple_Parent_Child_Config_SixPath {
	ps := &OpenconfigSimple_Parent_Child_Config_SixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"six"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[[]float32](
		"OpenconfigSimple_Parent_Child_Config",
		true,
		false,
		true,
		false,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) ([]float32, bool) {
			ret := gs.(*oc.OpenconfigSimple_Parent_Child_Config).Six
			v := reflect.ValueOf(ret)
			return binarySliceToFloatSlice(ret), v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_Parent_Child_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Six (leaf-list):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "six"
//	Path from root:       "/parent/child/config/six"
func (n *OpenconfigSimple_Parent_Child_ConfigPathAny) Six() *OpenconfigSimple_Parent_Child_Config_SixPathAny {
	ps := &OpenconfigSimple_Parent_Child_Config_SixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"six"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[[]float32](
		"OpenconfigSimple_Parent_Child_Config",
		true,
		false,
		true,
		false,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) ([]float32, bool) {
			ret := gs.(*oc.OpenconfigSimple_Parent_Child_Config).Six
			v := reflect.ValueOf(ret)
			return binarySliceToFloatSlice(ret), v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_Parent_Child_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Three (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "three"
//	Path from root:       "/parent/child/config/three"
func (n *OpenconfigSimple_Parent_Child_ConfigPath) Three() *OpenconfigSimple_Parent_Child_Config_ThreePath {
	ps := &OpenconfigSimple_Parent_Child_Config_ThreePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"three"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[oc.E_Simple_Parent_Child_Config_Three](
		"OpenconfigSimple_Parent_Child_Config",
		true,
		false,
		true,
		false,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (oc.E_Simple_Parent_Child_Config_Three, bool) {
			ret := gs.(*oc.OpenconfigSimple_Parent_Child_Config).Three
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_Parent_Child_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Three (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "three"
//	Path from root:       "/parent/child/config/three"
func (n *OpenconfigSimple_Parent_Child_ConfigPathAny) Three() *OpenconfigSimple_Parent_Child_Config_ThreePathAny {
	ps := &OpenconfigSimple_Parent_Child_Config_ThreePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"three"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[oc.E_Simple_Parent_Child_Config_Three](
		"OpenconfigSimple_Parent_Child_Config",
		true,
		false,
		true,
		false,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (oc.E_Simple_Parent_Child_Config_Three, bool) {
			ret := gs.(*oc.OpenconfigSimple_Parent_Child_Config).Three
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_Parent_Child_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OpenconfigSimple_Parent_Child_State_FivePath represents the /openconfig-simple/parent/child/state/five YANG schema element.
type OpenconfigSimple_Parent_Child_State_FivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[float32]
}

// OpenconfigSimple_Parent_Child_State_FivePathAny represents the wildcard version of the /openconfig-simple/parent/child/state/five YANG schema element.
type OpenconfigSimple_Parent_Child_State_FivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[float32]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_State_FivePath) PathOriginName() string {
	return ""
}

// OpenconfigSimple_Parent_Child_State_FourPath represents the /openconfig-simple/parent/child/state/four YANG schema element.
type OpenconfigSimple_Parent_Child_State_FourPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[oc.Binary]
}

// OpenconfigSimple_Parent_Child_State_FourPathAny represents the wildcard version of the /openconfig-simple/parent/child/state/four YANG schema element.
type OpenconfigSimple_Parent_Child_State_FourPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[oc.Binary]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_State_FourPath) PathOriginName() string {
	return ""
}

// OpenconfigSimple_Parent_Child_State_OnePath represents the /openconfig-simple/parent/child/state/one YANG schema element.
type OpenconfigSimple_Parent_Child_State_OnePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[string]
}

// OpenconfigSimple_Parent_Child_State_OnePathAny represents the wildcard version of the /openconfig-simple/parent/child/state/one YANG schema element.
type OpenconfigSimple_Parent_Child_State_OnePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_State_OnePath) PathOriginName() string {
	return ""
}

// OpenconfigSimple_Parent_Child_State_SixPath represents the /openconfig-simple/parent/child/state/six YANG schema element.
type OpenconfigSimple_Parent_Child_State_SixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[[]float32]
}

// OpenconfigSimple_Parent_Child_State_SixPathAny represents the wildcard version of the /openconfig-simple/parent/child/state/six YANG schema element.
type OpenconfigSimple_Parent_Child_State_SixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[[]float32]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_State_SixPath) PathOriginName() string {
	return ""
}

// OpenconfigSimple_Parent_Child_State_ThreePath represents the /openconfig-simple/parent/child/state/three YANG schema element.
type OpenconfigSimple_Parent_Child_State_ThreePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[oc.E_Simple_Parent_Child_Config_Three]
}

// OpenconfigSimple_Parent_Child_State_ThreePathAny represents the wildcard version of the /openconfig-simple/parent/child/state/three YANG schema element.
type OpenconfigSimple_Parent_Child_State_ThreePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[oc.E_Simple_Parent_Child_Config_Three]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_State_ThreePath) PathOriginName() string {
	return ""
}

// OpenconfigSimple_Parent_Child_State_TwoPath represents the /openconfig-simple/parent/child/state/two YANG schema element.
type OpenconfigSimple_Parent_Child_State_TwoPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[string]
}

// OpenconfigSimple_Parent_Child_State_TwoPathAny represents the wildcard version of the /openconfig-simple/parent/child/state/two YANG schema element.
type OpenconfigSimple_Parent_Child_State_TwoPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_State_TwoPath) PathOriginName() string {
	return ""
}

// OpenconfigSimple_Parent_Child_StatePath represents the /openconfig-simple/parent/child/state YANG schema element.
type OpenconfigSimple_Parent_Child_StatePath struct {
	*ygnmi.NodePath
	ygnmi.SingletonQuery[*oc.OpenconfigSimple_Parent_Child_State]
}

// OpenconfigSimple_Parent_Child_StatePathAny represents the wildcard version of the /openconfig-simple/parent/child/state YANG schema element.
type OpenconfigSimple_Parent_Child_StatePathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigSimple_Parent_Child_State]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_StatePath) PathOriginName() string {
	return "openconfig"
}

// Five (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "five"
//	Path from root:       "/parent/child/state/five"
func (n *OpenconfigSimple_Parent_Child_StatePath) Five() *OpenconfigSimple_Parent_Child_State_FivePath {
	ps := &OpenconfigSimple_Parent_Child_State_FivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"five"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[float32](
		"OpenconfigSimple_Parent_Child_State",
		true,
		false,
		true,
		false,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.OpenconfigSimple_Parent_Child_State).Five
			v := reflect.ValueOf(ret)
			return ygot.BinaryToFloat32(ret), v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_Parent_Child_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Five (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "five"
//	Path from root:       "/parent/child/state/five"
func (n *OpenconfigSimple_Parent_Child_StatePathAny) Five() *OpenconfigSimple_Parent_Child_State_FivePathAny {
	ps := &OpenconfigSimple_Parent_Child_State_FivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"five"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[float32](
		"OpenconfigSimple_Parent_Child_State",
		true,
		false,
		true,
		false,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.OpenconfigSimple_Parent_Child_State).Five
			v := reflect.ValueOf(ret)
			return ygot.BinaryToFloat32(ret), v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_Parent_Child_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Four (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "four"
//	Path from root:       "/parent/child/state/four"
func (n *OpenconfigSimple_Parent_Child_StatePath) Four() *OpenconfigSimple_Parent_Child_State_FourPath {
	ps := &OpenconfigSimple_Parent_Child_State_FourPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"four"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[oc.Binary](
		"OpenconfigSimple_Parent_Child_State",
		true,
		false,
		true,
		false,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (oc.Binary, bool) {
			ret := gs.(*oc.OpenconfigSimple_Parent_Child_State).Four
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_Parent_Child_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Four (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "four"
//	Path from root:       "/parent/child/state/four"
func (n *OpenconfigSimple_Parent_Child_StatePathAny) Four() *OpenconfigSimple_Parent_Child_State_FourPathAny {
	ps := &OpenconfigSimple_Parent_Child_State_FourPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"four"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[oc.Binary](
		"OpenconfigSimple_Parent_Child_State",
		true,
		false,
		true,
		false,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (oc.Binary, bool) {
			ret := gs.(*oc.OpenconfigSimple_Parent_Child_State).Four
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_Parent_Child_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// One (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "one"
//	Path from root:       "/parent/child/state/one"
func (n *OpenconfigSimple_Parent_Child_StatePath) One() *OpenconfigSimple_Parent_Child_State_OnePath {
	ps := &OpenconfigSimple_Parent_Child_State_OnePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"one"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[string](
		"OpenconfigSimple_Parent_Child_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigSimple_Parent_Child_State).One
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_Parent_Child_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// One (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "one"
//	Path from root:       "/parent/child/state/one"
func (n *OpenconfigSimple_Parent_Child_StatePathAny) One() *OpenconfigSimple_Parent_Child_State_OnePathAny {
	ps := &OpenconfigSimple_Parent_Child_State_OnePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"one"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigSimple_Parent_Child_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigSimple_Parent_Child_State).One
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_Parent_Child_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Six (leaf-list):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "six"
//	Path from root:       "/parent/child/state/six"
func (n *OpenconfigSimple_Parent_Child_StatePath) Six() *OpenconfigSimple_Parent_Child_State_SixPath {
	ps := &OpenconfigSimple_Parent_Child_State_SixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"six"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[[]float32](
		"OpenconfigSimple_Parent_Child_State",
		true,
		false,
		true,
		false,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) ([]float32, bool) {
			ret := gs.(*oc.OpenconfigSimple_Parent_Child_State).Six
			v := reflect.ValueOf(ret)
			return binarySliceToFloatSlice(ret), v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_Parent_Child_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Six (leaf-list):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "six"
//	Path from root:       "/parent/child/state/six"
func (n *OpenconfigSimple_Parent_Child_StatePathAny) Six() *OpenconfigSimple_Parent_Child_State_SixPathAny {
	ps := &OpenconfigSimple_Parent_Child_State_SixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"six"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[[]float32](
		"OpenconfigSimple_Parent_Child_State",
		true,
		false,
		true,
		false,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) ([]float32, bool) {
			ret := gs.(*oc.OpenconfigSimple_Parent_Child_State).Six
			v := reflect.ValueOf(ret)
			return binarySliceToFloatSlice(ret), v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_Parent_Child_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Three (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "three"
//	Path from root:       "/parent/child/state/three"
func (n *OpenconfigSimple_Parent_Child_StatePath) Three() *OpenconfigSimple_Parent_Child_State_ThreePath {
	ps := &OpenconfigSimple_Parent_Child_State_ThreePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"three"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[oc.E_Simple_Parent_Child_Config_Three](
		"OpenconfigSimple_Parent_Child_State",
		true,
		false,
		true,
		false,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (oc.E_Simple_Parent_Child_Config_Three, bool) {
			ret := gs.(*oc.OpenconfigSimple_Parent_Child_State).Three
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_Parent_Child_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Three (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "three"
//	Path from root:       "/parent/child/state/three"
func (n *OpenconfigSimple_Parent_Child_StatePathAny) Three() *OpenconfigSimple_Parent_Child_State_ThreePathAny {
	ps := &OpenconfigSimple_Parent_Child_State_ThreePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"three"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[oc.E_Simple_Parent_Child_Config_Three](
		"OpenconfigSimple_Parent_Child_State",
		true,
		false,
		true,
		false,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (oc.E_Simple_Parent_Child_Config_Three, bool) {
			ret := gs.(*oc.OpenconfigSimple_Parent_Child_State).Three
			v := reflect.ValueOf(ret)
			return ret, v.IsValid() && !v.IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_Parent_Child_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Two (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "two"
//	Path from root:       "/parent/child/state/two"
func (n *OpenconfigSimple_Parent_Child_StatePath) Two() *OpenconfigSimple_Parent_Child_State_TwoPath {
	ps := &OpenconfigSimple_Parent_Child_State_TwoPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"two"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[string](
		"OpenconfigSimple_Parent_Child_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigSimple_Parent_Child_State).Two
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_Parent_Child_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Two (leaf):
//
//	Defining module:      "openconfig-simple"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "two"
//	Path from root:       "/parent/child/state/two"
func (n *OpenconfigSimple_Parent_Child_StatePathAny) Two() *OpenconfigSimple_Parent_Child_State_TwoPathAny {
	ps := &OpenconfigSimple_Parent_Child_State_TwoPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"two"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigSimple_Parent_Child_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigSimple_Parent_Child_State).Two
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_Parent_Child_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OpenconfigSimple_RemoteContainerPath represents the /openconfig-simple/remote-container YANG schema element.
type OpenconfigSimple_RemoteContainerPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigSimple_RemoteContainer]
}

// OpenconfigSimple_RemoteContainerPathAny represents the wildcard version of the /openconfig-simple/remote-container YANG schema element.
type OpenconfigSimple_RemoteContainerPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigSimple_RemoteContainer]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_RemoteContainerPath) PathOriginName() string {
	return "openconfig"
}

// Config (container):
//
//	Defining module:      "openconfig-remote"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "config"
//	Path from root:       "/remote-container/config"
func (n *OpenconfigSimple_RemoteContainerPath) Config() *OpenconfigSimple_RemoteContainer_ConfigPath {
	ps := &OpenconfigSimple_RemoteContainer_ConfigPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"config"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigSimple_RemoteContainer_Config](
		"OpenconfigSimple_RemoteContainer_Config",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Config (container):
//
//	Defining module:      "openconfig-remote"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "config"
//	Path from root:       "/remote-container/config"
func (n *OpenconfigSimple_RemoteContainerPathAny) Config() *OpenconfigSimple_RemoteContainer_ConfigPathAny {
	ps := &OpenconfigSimple_RemoteContainer_ConfigPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"config"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigSimple_RemoteContainer_Config](
		"OpenconfigSimple_RemoteContainer_Config",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// State (container):
//
//	Defining module:      "openconfig-remote"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "state"
//	Path from root:       "/remote-container/state"
func (n *OpenconfigSimple_RemoteContainerPath) State() *OpenconfigSimple_RemoteContainer_StatePath {
	ps := &OpenconfigSimple_RemoteContainer_StatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[*oc.OpenconfigSimple_RemoteContainer_State](
		"OpenconfigSimple_RemoteContainer_State",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// State (container):
//
//	Defining module:      "openconfig-remote"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "state"
//	Path from root:       "/remote-container/state"
func (n *OpenconfigSimple_RemoteContainerPathAny) State() *OpenconfigSimple_RemoteContainer_StatePathAny {
	ps := &OpenconfigSimple_RemoteContainer_StatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigSimple_RemoteContainer_State](
		"OpenconfigSimple_RemoteContainer_State",
		true,
		false,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OpenconfigSimple_RemoteContainer_Config_ALeafPath represents the /openconfig-simple/remote-container/config/a-leaf YANG schema element.
type OpenconfigSimple_RemoteContainer_Config_ALeafPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[string]
}

// OpenconfigSimple_RemoteContainer_Config_ALeafPathAny represents the wildcard version of the /openconfig-simple/remote-container/config/a-leaf YANG schema element.
type OpenconfigSimple_RemoteContainer_Config_ALeafPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_RemoteContainer_Config_ALeafPath) PathOriginName() string {
	return ""
}

// OpenconfigSimple_RemoteContainer_ConfigPath represents the /openconfig-simple/remote-container/config YANG schema element.
type OpenconfigSimple_RemoteContainer_ConfigPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigSimple_RemoteContainer_Config]
}

// OpenconfigSimple_RemoteContainer_ConfigPathAny represents the wildcard version of the /openconfig-simple/remote-container/config YANG schema element.
type OpenconfigSimple_RemoteContainer_ConfigPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigSimple_RemoteContainer_Config]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_RemoteContainer_ConfigPath) PathOriginName() string {
	return "openconfig"
}

// ALeaf (leaf):
//
//	Defining module:      "openconfig-remote"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "a-leaf"
//	Path from root:       "/remote-container/config/a-leaf"
func (n *OpenconfigSimple_RemoteContainer_ConfigPath) ALeaf() *OpenconfigSimple_RemoteContainer_Config_ALeafPath {
	ps := &OpenconfigSimple_RemoteContainer_Config_ALeafPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"a-leaf"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[string](
		"OpenconfigSimple_RemoteContainer_Config",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigSimple_RemoteContainer_Config).ALeaf
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_RemoteContainer_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// ALeaf (leaf):
//
//	Defining module:      "openconfig-remote"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "a-leaf"
//	Path from root:       "/remote-container/config/a-leaf"
func (n *OpenconfigSimple_RemoteContainer_ConfigPathAny) ALeaf() *OpenconfigSimple_RemoteContainer_Config_ALeafPathAny {
	ps := &OpenconfigSimple_RemoteContainer_Config_ALeafPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a-leaf"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigSimple_RemoteContainer_Config",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigSimple_RemoteContainer_Config).ALeaf
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_RemoteContainer_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OpenconfigSimple_RemoteContainer_State_ALeafPath represents the /openconfig-simple/remote-container/state/a-leaf YANG schema element.
type OpenconfigSimple_RemoteContainer_State_ALeafPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[string]
}

// OpenconfigSimple_RemoteContainer_State_ALeafPathAny represents the wildcard version of the /openconfig-simple/remote-container/state/a-leaf YANG schema element.
type OpenconfigSimple_RemoteContainer_State_ALeafPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_RemoteContainer_State_ALeafPath) PathOriginName() string {
	return ""
}

// OpenconfigSimple_RemoteContainer_StatePath represents the /openconfig-simple/remote-container/state YANG schema element.
type OpenconfigSimple_RemoteContainer_StatePath struct {
	*ygnmi.NodePath
	ygnmi.SingletonQuery[*oc.OpenconfigSimple_RemoteContainer_State]
}

// OpenconfigSimple_RemoteContainer_StatePathAny represents the wildcard version of the /openconfig-simple/remote-container/state YANG schema element.
type OpenconfigSimple_RemoteContainer_StatePathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigSimple_RemoteContainer_State]
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_RemoteContainer_StatePath) PathOriginName() string {
	return "openconfig"
}

// ALeaf (leaf):
//
//	Defining module:      "openconfig-remote"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "a-leaf"
//	Path from root:       "/remote-container/state/a-leaf"
func (n *OpenconfigSimple_RemoteContainer_StatePath) ALeaf() *OpenconfigSimple_RemoteContainer_State_ALeafPath {
	ps := &OpenconfigSimple_RemoteContainer_State_ALeafPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"a-leaf"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[string](
		"OpenconfigSimple_RemoteContainer_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigSimple_RemoteContainer_State).ALeaf
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_RemoteContainer_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// ALeaf (leaf):
//
//	Defining module:      "openconfig-remote"
//	Instantiating module: "openconfig-simple"
//	Path from parent:     "a-leaf"
//	Path from root:       "/remote-container/state/a-leaf"
func (n *OpenconfigSimple_RemoteContainer_StatePathAny) ALeaf() *OpenconfigSimple_RemoteContainer_State_ALeafPathAny {
	ps := &OpenconfigSimple_RemoteContainer_State_ALeafPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a-leaf"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigSimple_RemoteContainer_State",
		true,
		false,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigSimple_RemoteContainer_State).ALeaf
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigSimple_RemoteContainer_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Device{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}
