// Code generated by pathgen-tests. DO NOT EDIT.

/*
Package ocstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- testdata/yang/openconfig-simple.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"reflect"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygnmi/ygmni"
	"github.com/openconfig/ygot/ytypes"
)

// DevicePath represents the /device YANG schema element.
type DevicePath struct {
	*ygnmi.DeviceRootBase
}

// Root returns a root path object from which YANG paths can be constructed.
func Root() *DevicePath {
	return &DevicePath{ygnmi.NewDeviceRootBase()}
}

// Parent (container): I am a parent container
// that has 4 children.
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "parent"
// 	Path from root:       "/parent"
func (n *DevicePath) Parent() *OpenconfigSimple_ParentPath {
	ps := &OpenconfigSimple_ParentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"parent"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RemoteContainer (container): 
// 	Defining module:      "openconfig-remote"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "remote-container"
// 	Path from root:       "/remote-container"
func (n *DevicePath) RemoteContainer() *OpenconfigSimple_RemoteContainerPath {
	ps := &OpenconfigSimple_RemoteContainerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-container"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OpenconfigSimple_ParentPath represents the /openconfig-simple/parent YANG schema element.
type OpenconfigSimple_ParentPath struct {
	*ygnmi.NodePath
}

// OpenconfigSimple_ParentPathAny represents the wildcard version of the /openconfig-simple/parent YANG schema element.
type OpenconfigSimple_ParentPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_ParentPath) PathOriginName() string {
     return "openconfig"
}

// Child (container): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "child"
// 	Path from root:       "/parent/child"
func (n *OpenconfigSimple_ParentPath) Child() *OpenconfigSimple_Parent_ChildPath {
	ps := &OpenconfigSimple_Parent_ChildPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"child"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Child (container): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "child"
// 	Path from root:       "/parent/child"
func (n *OpenconfigSimple_ParentPathAny) Child() *OpenconfigSimple_Parent_ChildPathAny {
	ps := &OpenconfigSimple_Parent_ChildPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"child"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OpenconfigSimple_Parent_ChildPath represents the /openconfig-simple/parent/child YANG schema element.
type OpenconfigSimple_Parent_ChildPath struct {
	*ygnmi.NodePath
}

// OpenconfigSimple_Parent_ChildPathAny represents the wildcard version of the /openconfig-simple/parent/child YANG schema element.
type OpenconfigSimple_Parent_ChildPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_ChildPath) PathOriginName() string {
     return "openconfig"
}

// Config (container): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "config"
// 	Path from root:       "/parent/child/config"
func (n *OpenconfigSimple_Parent_ChildPath) Config() *OpenconfigSimple_Parent_Child_ConfigPath {
	ps := &OpenconfigSimple_Parent_Child_ConfigPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"config"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Config (container): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "config"
// 	Path from root:       "/parent/child/config"
func (n *OpenconfigSimple_Parent_ChildPathAny) Config() *OpenconfigSimple_Parent_Child_ConfigPathAny {
	ps := &OpenconfigSimple_Parent_Child_ConfigPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"config"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State (container): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state"
// 	Path from root:       "/parent/child/state"
func (n *OpenconfigSimple_Parent_ChildPath) State() *OpenconfigSimple_Parent_Child_StatePath {
	ps := &OpenconfigSimple_Parent_Child_StatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State (container): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state"
// 	Path from root:       "/parent/child/state"
func (n *OpenconfigSimple_Parent_ChildPathAny) State() *OpenconfigSimple_Parent_Child_StatePathAny {
	ps := &OpenconfigSimple_Parent_Child_StatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OpenconfigSimple_Parent_Child_Config_FivePath represents the /openconfig-simple/parent/child/config/five YANG schema element.
type OpenconfigSimple_Parent_Child_Config_FivePath struct {
	*ygnmi.NodePath
}

// OpenconfigSimple_Parent_Child_Config_FivePathAny represents the wildcard version of the /openconfig-simple/parent/child/config/five YANG schema element.
type OpenconfigSimple_Parent_Child_Config_FivePathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_Config_FivePath) PathOriginName() string {
     return ""
}

// OpenconfigSimple_Parent_Child_Config_FourPath represents the /openconfig-simple/parent/child/config/four YANG schema element.
type OpenconfigSimple_Parent_Child_Config_FourPath struct {
	*ygnmi.NodePath
}

// OpenconfigSimple_Parent_Child_Config_FourPathAny represents the wildcard version of the /openconfig-simple/parent/child/config/four YANG schema element.
type OpenconfigSimple_Parent_Child_Config_FourPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_Config_FourPath) PathOriginName() string {
     return ""
}

// OpenconfigSimple_Parent_Child_Config_OnePath represents the /openconfig-simple/parent/child/config/one YANG schema element.
type OpenconfigSimple_Parent_Child_Config_OnePath struct {
	*ygnmi.NodePath
}

// OpenconfigSimple_Parent_Child_Config_OnePathAny represents the wildcard version of the /openconfig-simple/parent/child/config/one YANG schema element.
type OpenconfigSimple_Parent_Child_Config_OnePathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_Config_OnePath) PathOriginName() string {
     return ""
}

// OpenconfigSimple_Parent_Child_Config_SixPath represents the /openconfig-simple/parent/child/config/six YANG schema element.
type OpenconfigSimple_Parent_Child_Config_SixPath struct {
	*ygnmi.NodePath
}

// OpenconfigSimple_Parent_Child_Config_SixPathAny represents the wildcard version of the /openconfig-simple/parent/child/config/six YANG schema element.
type OpenconfigSimple_Parent_Child_Config_SixPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_Config_SixPath) PathOriginName() string {
     return ""
}

// OpenconfigSimple_Parent_Child_Config_ThreePath represents the /openconfig-simple/parent/child/config/three YANG schema element.
type OpenconfigSimple_Parent_Child_Config_ThreePath struct {
	*ygnmi.NodePath
}

// OpenconfigSimple_Parent_Child_Config_ThreePathAny represents the wildcard version of the /openconfig-simple/parent/child/config/three YANG schema element.
type OpenconfigSimple_Parent_Child_Config_ThreePathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_Config_ThreePath) PathOriginName() string {
     return ""
}

// OpenconfigSimple_Parent_Child_ConfigPath represents the /openconfig-simple/parent/child/config YANG schema element.
type OpenconfigSimple_Parent_Child_ConfigPath struct {
	*ygnmi.NodePath
}

// OpenconfigSimple_Parent_Child_ConfigPathAny represents the wildcard version of the /openconfig-simple/parent/child/config YANG schema element.
type OpenconfigSimple_Parent_Child_ConfigPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_ConfigPath) PathOriginName() string {
     return "openconfig"
}

// Five (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "five"
// 	Path from root:       "/parent/child/config/five"
func (n *OpenconfigSimple_Parent_Child_ConfigPath) Five() *OpenconfigSimple_Parent_Child_Config_FivePath {
	ps := &OpenconfigSimple_Parent_Child_Config_FivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"five"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Five (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "five"
// 	Path from root:       "/parent/child/config/five"
func (n *OpenconfigSimple_Parent_Child_ConfigPathAny) Five() *OpenconfigSimple_Parent_Child_Config_FivePathAny {
	ps := &OpenconfigSimple_Parent_Child_Config_FivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"five"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Four (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "four"
// 	Path from root:       "/parent/child/config/four"
func (n *OpenconfigSimple_Parent_Child_ConfigPath) Four() *OpenconfigSimple_Parent_Child_Config_FourPath {
	ps := &OpenconfigSimple_Parent_Child_Config_FourPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"four"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Four (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "four"
// 	Path from root:       "/parent/child/config/four"
func (n *OpenconfigSimple_Parent_Child_ConfigPathAny) Four() *OpenconfigSimple_Parent_Child_Config_FourPathAny {
	ps := &OpenconfigSimple_Parent_Child_Config_FourPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"four"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// One (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "one"
// 	Path from root:       "/parent/child/config/one"
func (n *OpenconfigSimple_Parent_Child_ConfigPath) One() *OpenconfigSimple_Parent_Child_Config_OnePath {
	ps := &OpenconfigSimple_Parent_Child_Config_OnePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"one"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// One (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "one"
// 	Path from root:       "/parent/child/config/one"
func (n *OpenconfigSimple_Parent_Child_ConfigPathAny) One() *OpenconfigSimple_Parent_Child_Config_OnePathAny {
	ps := &OpenconfigSimple_Parent_Child_Config_OnePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"one"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Six (leaf-list): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "six"
// 	Path from root:       "/parent/child/config/six"
func (n *OpenconfigSimple_Parent_Child_ConfigPath) Six() *OpenconfigSimple_Parent_Child_Config_SixPath {
	ps := &OpenconfigSimple_Parent_Child_Config_SixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"six"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Six (leaf-list): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "six"
// 	Path from root:       "/parent/child/config/six"
func (n *OpenconfigSimple_Parent_Child_ConfigPathAny) Six() *OpenconfigSimple_Parent_Child_Config_SixPathAny {
	ps := &OpenconfigSimple_Parent_Child_Config_SixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"six"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Three (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "three"
// 	Path from root:       "/parent/child/config/three"
func (n *OpenconfigSimple_Parent_Child_ConfigPath) Three() *OpenconfigSimple_Parent_Child_Config_ThreePath {
	ps := &OpenconfigSimple_Parent_Child_Config_ThreePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"three"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Three (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "three"
// 	Path from root:       "/parent/child/config/three"
func (n *OpenconfigSimple_Parent_Child_ConfigPathAny) Three() *OpenconfigSimple_Parent_Child_Config_ThreePathAny {
	ps := &OpenconfigSimple_Parent_Child_Config_ThreePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"three"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OpenconfigSimple_Parent_Child_State_FivePath represents the /openconfig-simple/parent/child/state/five YANG schema element.
type OpenconfigSimple_Parent_Child_State_FivePath struct {
	*ygnmi.NodePath
}

// OpenconfigSimple_Parent_Child_State_FivePathAny represents the wildcard version of the /openconfig-simple/parent/child/state/five YANG schema element.
type OpenconfigSimple_Parent_Child_State_FivePathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_State_FivePath) PathOriginName() string {
     return ""
}

// OpenconfigSimple_Parent_Child_State_FourPath represents the /openconfig-simple/parent/child/state/four YANG schema element.
type OpenconfigSimple_Parent_Child_State_FourPath struct {
	*ygnmi.NodePath
}

// OpenconfigSimple_Parent_Child_State_FourPathAny represents the wildcard version of the /openconfig-simple/parent/child/state/four YANG schema element.
type OpenconfigSimple_Parent_Child_State_FourPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_State_FourPath) PathOriginName() string {
     return ""
}

// OpenconfigSimple_Parent_Child_State_OnePath represents the /openconfig-simple/parent/child/state/one YANG schema element.
type OpenconfigSimple_Parent_Child_State_OnePath struct {
	*ygnmi.NodePath
}

// OpenconfigSimple_Parent_Child_State_OnePathAny represents the wildcard version of the /openconfig-simple/parent/child/state/one YANG schema element.
type OpenconfigSimple_Parent_Child_State_OnePathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_State_OnePath) PathOriginName() string {
     return ""
}

// OpenconfigSimple_Parent_Child_State_SixPath represents the /openconfig-simple/parent/child/state/six YANG schema element.
type OpenconfigSimple_Parent_Child_State_SixPath struct {
	*ygnmi.NodePath
}

// OpenconfigSimple_Parent_Child_State_SixPathAny represents the wildcard version of the /openconfig-simple/parent/child/state/six YANG schema element.
type OpenconfigSimple_Parent_Child_State_SixPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_State_SixPath) PathOriginName() string {
     return ""
}

// OpenconfigSimple_Parent_Child_State_ThreePath represents the /openconfig-simple/parent/child/state/three YANG schema element.
type OpenconfigSimple_Parent_Child_State_ThreePath struct {
	*ygnmi.NodePath
}

// OpenconfigSimple_Parent_Child_State_ThreePathAny represents the wildcard version of the /openconfig-simple/parent/child/state/three YANG schema element.
type OpenconfigSimple_Parent_Child_State_ThreePathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_State_ThreePath) PathOriginName() string {
     return ""
}

// OpenconfigSimple_Parent_Child_State_TwoPath represents the /openconfig-simple/parent/child/state/two YANG schema element.
type OpenconfigSimple_Parent_Child_State_TwoPath struct {
	*ygnmi.NodePath
}

// OpenconfigSimple_Parent_Child_State_TwoPathAny represents the wildcard version of the /openconfig-simple/parent/child/state/two YANG schema element.
type OpenconfigSimple_Parent_Child_State_TwoPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_State_TwoPath) PathOriginName() string {
     return ""
}

// OpenconfigSimple_Parent_Child_StatePath represents the /openconfig-simple/parent/child/state YANG schema element.
type OpenconfigSimple_Parent_Child_StatePath struct {
	*ygnmi.NodePath
}

// OpenconfigSimple_Parent_Child_StatePathAny represents the wildcard version of the /openconfig-simple/parent/child/state YANG schema element.
type OpenconfigSimple_Parent_Child_StatePathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_Parent_Child_StatePath) PathOriginName() string {
     return "openconfig"
}

// Five (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "five"
// 	Path from root:       "/parent/child/state/five"
func (n *OpenconfigSimple_Parent_Child_StatePath) Five() *OpenconfigSimple_Parent_Child_State_FivePath {
	ps := &OpenconfigSimple_Parent_Child_State_FivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"five"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Five (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "five"
// 	Path from root:       "/parent/child/state/five"
func (n *OpenconfigSimple_Parent_Child_StatePathAny) Five() *OpenconfigSimple_Parent_Child_State_FivePathAny {
	ps := &OpenconfigSimple_Parent_Child_State_FivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"five"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Four (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "four"
// 	Path from root:       "/parent/child/state/four"
func (n *OpenconfigSimple_Parent_Child_StatePath) Four() *OpenconfigSimple_Parent_Child_State_FourPath {
	ps := &OpenconfigSimple_Parent_Child_State_FourPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"four"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Four (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "four"
// 	Path from root:       "/parent/child/state/four"
func (n *OpenconfigSimple_Parent_Child_StatePathAny) Four() *OpenconfigSimple_Parent_Child_State_FourPathAny {
	ps := &OpenconfigSimple_Parent_Child_State_FourPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"four"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// One (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "one"
// 	Path from root:       "/parent/child/state/one"
func (n *OpenconfigSimple_Parent_Child_StatePath) One() *OpenconfigSimple_Parent_Child_State_OnePath {
	ps := &OpenconfigSimple_Parent_Child_State_OnePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"one"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// One (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "one"
// 	Path from root:       "/parent/child/state/one"
func (n *OpenconfigSimple_Parent_Child_StatePathAny) One() *OpenconfigSimple_Parent_Child_State_OnePathAny {
	ps := &OpenconfigSimple_Parent_Child_State_OnePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"one"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Six (leaf-list): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "six"
// 	Path from root:       "/parent/child/state/six"
func (n *OpenconfigSimple_Parent_Child_StatePath) Six() *OpenconfigSimple_Parent_Child_State_SixPath {
	ps := &OpenconfigSimple_Parent_Child_State_SixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"six"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Six (leaf-list): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "six"
// 	Path from root:       "/parent/child/state/six"
func (n *OpenconfigSimple_Parent_Child_StatePathAny) Six() *OpenconfigSimple_Parent_Child_State_SixPathAny {
	ps := &OpenconfigSimple_Parent_Child_State_SixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"six"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Three (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "three"
// 	Path from root:       "/parent/child/state/three"
func (n *OpenconfigSimple_Parent_Child_StatePath) Three() *OpenconfigSimple_Parent_Child_State_ThreePath {
	ps := &OpenconfigSimple_Parent_Child_State_ThreePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"three"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Three (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "three"
// 	Path from root:       "/parent/child/state/three"
func (n *OpenconfigSimple_Parent_Child_StatePathAny) Three() *OpenconfigSimple_Parent_Child_State_ThreePathAny {
	ps := &OpenconfigSimple_Parent_Child_State_ThreePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"three"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Two (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "two"
// 	Path from root:       "/parent/child/state/two"
func (n *OpenconfigSimple_Parent_Child_StatePath) Two() *OpenconfigSimple_Parent_Child_State_TwoPath {
	ps := &OpenconfigSimple_Parent_Child_State_TwoPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"two"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Two (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "two"
// 	Path from root:       "/parent/child/state/two"
func (n *OpenconfigSimple_Parent_Child_StatePathAny) Two() *OpenconfigSimple_Parent_Child_State_TwoPathAny {
	ps := &OpenconfigSimple_Parent_Child_State_TwoPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"two"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OpenconfigSimple_RemoteContainerPath represents the /openconfig-simple/remote-container YANG schema element.
type OpenconfigSimple_RemoteContainerPath struct {
	*ygnmi.NodePath
}

// OpenconfigSimple_RemoteContainerPathAny represents the wildcard version of the /openconfig-simple/remote-container YANG schema element.
type OpenconfigSimple_RemoteContainerPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_RemoteContainerPath) PathOriginName() string {
     return "openconfig"
}

// Config (container): 
// 	Defining module:      "openconfig-remote"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "config"
// 	Path from root:       "/remote-container/config"
func (n *OpenconfigSimple_RemoteContainerPath) Config() *OpenconfigSimple_RemoteContainer_ConfigPath {
	ps := &OpenconfigSimple_RemoteContainer_ConfigPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"config"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Config (container): 
// 	Defining module:      "openconfig-remote"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "config"
// 	Path from root:       "/remote-container/config"
func (n *OpenconfigSimple_RemoteContainerPathAny) Config() *OpenconfigSimple_RemoteContainer_ConfigPathAny {
	ps := &OpenconfigSimple_RemoteContainer_ConfigPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"config"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State (container): 
// 	Defining module:      "openconfig-remote"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state"
// 	Path from root:       "/remote-container/state"
func (n *OpenconfigSimple_RemoteContainerPath) State() *OpenconfigSimple_RemoteContainer_StatePath {
	ps := &OpenconfigSimple_RemoteContainer_StatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State (container): 
// 	Defining module:      "openconfig-remote"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state"
// 	Path from root:       "/remote-container/state"
func (n *OpenconfigSimple_RemoteContainerPathAny) State() *OpenconfigSimple_RemoteContainer_StatePathAny {
	ps := &OpenconfigSimple_RemoteContainer_StatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OpenconfigSimple_RemoteContainer_Config_ALeafPath represents the /openconfig-simple/remote-container/config/a-leaf YANG schema element.
type OpenconfigSimple_RemoteContainer_Config_ALeafPath struct {
	*ygnmi.NodePath
}

// OpenconfigSimple_RemoteContainer_Config_ALeafPathAny represents the wildcard version of the /openconfig-simple/remote-container/config/a-leaf YANG schema element.
type OpenconfigSimple_RemoteContainer_Config_ALeafPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_RemoteContainer_Config_ALeafPath) PathOriginName() string {
     return ""
}

// OpenconfigSimple_RemoteContainer_ConfigPath represents the /openconfig-simple/remote-container/config YANG schema element.
type OpenconfigSimple_RemoteContainer_ConfigPath struct {
	*ygnmi.NodePath
}

// OpenconfigSimple_RemoteContainer_ConfigPathAny represents the wildcard version of the /openconfig-simple/remote-container/config YANG schema element.
type OpenconfigSimple_RemoteContainer_ConfigPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_RemoteContainer_ConfigPath) PathOriginName() string {
     return "openconfig"
}

// ALeaf (leaf): 
// 	Defining module:      "openconfig-remote"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "a-leaf"
// 	Path from root:       "/remote-container/config/a-leaf"
func (n *OpenconfigSimple_RemoteContainer_ConfigPath) ALeaf() *OpenconfigSimple_RemoteContainer_Config_ALeafPath {
	ps := &OpenconfigSimple_RemoteContainer_Config_ALeafPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"a-leaf"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ALeaf (leaf): 
// 	Defining module:      "openconfig-remote"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "a-leaf"
// 	Path from root:       "/remote-container/config/a-leaf"
func (n *OpenconfigSimple_RemoteContainer_ConfigPathAny) ALeaf() *OpenconfigSimple_RemoteContainer_Config_ALeafPathAny {
	ps := &OpenconfigSimple_RemoteContainer_Config_ALeafPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a-leaf"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OpenconfigSimple_RemoteContainer_State_ALeafPath represents the /openconfig-simple/remote-container/state/a-leaf YANG schema element.
type OpenconfigSimple_RemoteContainer_State_ALeafPath struct {
	*ygnmi.NodePath
}

// OpenconfigSimple_RemoteContainer_State_ALeafPathAny represents the wildcard version of the /openconfig-simple/remote-container/state/a-leaf YANG schema element.
type OpenconfigSimple_RemoteContainer_State_ALeafPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_RemoteContainer_State_ALeafPath) PathOriginName() string {
     return ""
}

// OpenconfigSimple_RemoteContainer_StatePath represents the /openconfig-simple/remote-container/state YANG schema element.
type OpenconfigSimple_RemoteContainer_StatePath struct {
	*ygnmi.NodePath
}

// OpenconfigSimple_RemoteContainer_StatePathAny represents the wildcard version of the /openconfig-simple/remote-container/state YANG schema element.
type OpenconfigSimple_RemoteContainer_StatePathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *OpenconfigSimple_RemoteContainer_StatePath) PathOriginName() string {
     return "openconfig"
}

// ALeaf (leaf): 
// 	Defining module:      "openconfig-remote"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "a-leaf"
// 	Path from root:       "/remote-container/state/a-leaf"
func (n *OpenconfigSimple_RemoteContainer_StatePath) ALeaf() *OpenconfigSimple_RemoteContainer_State_ALeafPath {
	ps := &OpenconfigSimple_RemoteContainer_State_ALeafPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"a-leaf"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ALeaf (leaf): 
// 	Defining module:      "openconfig-remote"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "a-leaf"
// 	Path from root:       "/remote-container/state/a-leaf"
func (n *OpenconfigSimple_RemoteContainer_StatePathAny) ALeaf() *OpenconfigSimple_RemoteContainer_State_ALeafPathAny {
	ps := &OpenconfigSimple_RemoteContainer_State_ALeafPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a-leaf"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}
