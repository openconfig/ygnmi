/*
Package ocstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- testdata/yang/openconfig-simple-target.yang
	- testdata/yang/openconfig-simple-augment.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"reflect"
	oc "github.com/openconfig/ygot/ypathgen/testdata/exampleoc"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygnmi/ygmni"
	"github.com/openconfig/ygot/ytypes"
)

// Device represents the /device YANG schema element.
type Device struct {
	*ygnmi.DeviceRootBase
}

// New returns a new path object from which YANG paths can be constructed.
func New() *Device {
	return &Device{ygnmi.NewDeviceRootBase()}
}

// Native (container): 
// 	Defining module:      "openconfig-simple-target"
// 	Instantiating module: "openconfig-simple-target"
// 	Path from parent:     "native"
// 	Path from root:       "/native"
func (n *Device) Native() *Native {
	return &Native{
		NodePath: ygnmi.NewNodePath(
			[]string{"native"},
			map[string]interface{}{},
			n,
		),
	}
}

// Target (container): 
// 	Defining module:      "openconfig-simple-target"
// 	Instantiating module: "openconfig-simple-target"
// 	Path from parent:     "target"
// 	Path from root:       "/target"
func (n *Device) Target() *Target {
	return &Target{
		NodePath: ygnmi.NewNodePath(
			[]string{"target"},
			map[string]interface{}{},
			n,
		),
	}
}

// Native_A represents the /openconfig-simple-target/native/state/a YANG schema element.
type Native_A struct {
	*ygnmi.NodePath
}

// Native_AAny represents the wildcard version of the /openconfig-simple-target/native/state/a YANG schema element.
type Native_AAny struct {
	*ygnmi.NodePath
}

// Native_B represents the /openconfig-simple-target/native/state/b YANG schema element.
type Native_B struct {
	*ygnmi.NodePath
}

// Native_BAny represents the wildcard version of the /openconfig-simple-target/native/state/b YANG schema element.
type Native_BAny struct {
	*ygnmi.NodePath
}

// Native represents the /openconfig-simple-target/native YANG schema element.
type Native struct {
	*ygnmi.NodePath
}

// NativeAny represents the wildcard version of the /openconfig-simple-target/native YANG schema element.
type NativeAny struct {
	*ygnmi.NodePath
}

// A (leaf): 
// 	Defining module:      "openconfig-simple-target"
// 	Instantiating module: "openconfig-simple-target"
// 	Path from parent:     "state/a"
// 	Path from root:       "/native/state/a"
func (n *Native) A() *Native_A {
	return &Native_A{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "a"},
			map[string]interface{}{},
			n,
		),
	}
}

// A (leaf): 
// 	Defining module:      "openconfig-simple-target"
// 	Instantiating module: "openconfig-simple-target"
// 	Path from parent:     "state/a"
// 	Path from root:       "/native/state/a"
func (n *NativeAny) A() *Native_AAny {
	return &Native_AAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "a"},
			map[string]interface{}{},
			n,
		),
	}
}

// B (leaf): 
// 	Defining module:      "openconfig-simple-augment"
// 	Instantiating module: "openconfig-simple-target"
// 	Path from parent:     "state/b"
// 	Path from root:       "/native/state/b"
func (n *Native) B() *Native_B {
	return &Native_B{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "b"},
			map[string]interface{}{},
			n,
		),
	}
}

// B (leaf): 
// 	Defining module:      "openconfig-simple-augment"
// 	Instantiating module: "openconfig-simple-target"
// 	Path from parent:     "state/b"
// 	Path from root:       "/native/state/b"
func (n *NativeAny) B() *Native_BAny {
	return &Native_BAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "b"},
			map[string]interface{}{},
			n,
		),
	}
}

// Target represents the /openconfig-simple-target/target YANG schema element.
type Target struct {
	*ygnmi.NodePath
}

// TargetAny represents the wildcard version of the /openconfig-simple-target/target YANG schema element.
type TargetAny struct {
	*ygnmi.NodePath
}

// Foo (container): 
// 	Defining module:      "openconfig-simple-augment"
// 	Instantiating module: "openconfig-simple-target"
// 	Path from parent:     "foo"
// 	Path from root:       "/target/foo"
func (n *Target) Foo() *Target_Foo {
	return &Target_Foo{
		NodePath: ygnmi.NewNodePath(
			[]string{"foo"},
			map[string]interface{}{},
			n,
		),
	}
}

// Foo (container): 
// 	Defining module:      "openconfig-simple-augment"
// 	Instantiating module: "openconfig-simple-target"
// 	Path from parent:     "foo"
// 	Path from root:       "/target/foo"
func (n *TargetAny) Foo() *Target_FooAny {
	return &Target_FooAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"foo"},
			map[string]interface{}{},
			n,
		),
	}
}

// Target_Foo_A represents the /openconfig-simple-target/target/foo/state/a YANG schema element.
type Target_Foo_A struct {
	*ygnmi.NodePath
}

// Target_Foo_AAny represents the wildcard version of the /openconfig-simple-target/target/foo/state/a YANG schema element.
type Target_Foo_AAny struct {
	*ygnmi.NodePath
}

// Target_Foo represents the /openconfig-simple-target/target/foo YANG schema element.
type Target_Foo struct {
	*ygnmi.NodePath
}

// Target_FooAny represents the wildcard version of the /openconfig-simple-target/target/foo YANG schema element.
type Target_FooAny struct {
	*ygnmi.NodePath
}

// A (leaf): 
// 	Defining module:      "openconfig-simple-augment"
// 	Instantiating module: "openconfig-simple-target"
// 	Path from parent:     "state/a"
// 	Path from root:       "/target/foo/state/a"
func (n *Target_Foo) A() *Target_Foo_A {
	return &Target_Foo_A{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "a"},
			map[string]interface{}{},
			n,
		),
	}
}

// A (leaf): 
// 	Defining module:      "openconfig-simple-augment"
// 	Instantiating module: "openconfig-simple-target"
// 	Path from parent:     "state/a"
// 	Path from root:       "/target/foo/state/a"
func (n *Target_FooAny) A() *Target_Foo_AAny {
	return &Target_Foo_AAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "a"},
			map[string]interface{}{},
			n,
		),
	}
}
