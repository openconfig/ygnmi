/*
Package ocstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- testdata/yang/enum-module.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"reflect"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygnmi/ygmni"
	"github.com/openconfig/ygot/ytypes"
)

// AList_ValuePath represents the /enum-module/a-lists/a-list/state/value YANG schema element.
type AList_ValuePath struct {
	*ygnmi.NodePath
}

// AList_ValuePathAny represents the wildcard version of the /enum-module/a-lists/a-list/state/value YANG schema element.
type AList_ValuePathAny struct {
	*ygnmi.NodePath
}

// AListPath represents the /enum-module/a-lists/a-list YANG schema element.
type AListPath struct {
	*ygnmi.NodePath
}

// AListPathAny represents the wildcard version of the /enum-module/a-lists/a-list YANG schema element.
type AListPathAny struct {
	*ygnmi.NodePath
}

// Value (leaf): 
// 	Defining module:      "enum-module"
// 	Instantiating module: "enum-module"
// 	Path from parent:     "state/value"
// 	Path from root:       "/a-lists/a-list/state/value"
func (n *AListPath) Value() *AList_ValuePath {
	return &AList_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): 
// 	Defining module:      "enum-module"
// 	Instantiating module: "enum-module"
// 	Path from parent:     "state/value"
// 	Path from root:       "/a-lists/a-list/state/value"
func (n *AListPathAny) Value() *AList_ValuePathAny {
	return &AList_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// BList_ValuePath represents the /enum-module/b-lists/b-list/state/value YANG schema element.
type BList_ValuePath struct {
	*ygnmi.NodePath
}

// BList_ValuePathAny represents the wildcard version of the /enum-module/b-lists/b-list/state/value YANG schema element.
type BList_ValuePathAny struct {
	*ygnmi.NodePath
}

// BListPath represents the /enum-module/b-lists/b-list YANG schema element.
type BListPath struct {
	*ygnmi.NodePath
}

// BListPathAny represents the wildcard version of the /enum-module/b-lists/b-list YANG schema element.
type BListPathAny struct {
	*ygnmi.NodePath
}

// Value (leaf): 
// 	Defining module:      "enum-module"
// 	Instantiating module: "enum-module"
// 	Path from parent:     "state/value"
// 	Path from root:       "/b-lists/b-list/state/value"
func (n *BListPath) Value() *BList_ValuePath {
	return &BList_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): 
// 	Defining module:      "enum-module"
// 	Instantiating module: "enum-module"
// 	Path from parent:     "state/value"
// 	Path from root:       "/b-lists/b-list/state/value"
func (n *BListPathAny) Value() *BList_ValuePathAny {
	return &BList_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// C_ClPath represents the /enum-module/c/cl YANG schema element.
type C_ClPath struct {
	*ygnmi.NodePath
}

// C_ClPathAny represents the wildcard version of the /enum-module/c/cl YANG schema element.
type C_ClPathAny struct {
	*ygnmi.NodePath
}

// CPath represents the /enum-module/c YANG schema element.
type CPath struct {
	*ygnmi.NodePath
}

// CPathAny represents the wildcard version of the /enum-module/c YANG schema element.
type CPathAny struct {
	*ygnmi.NodePath
}

// Cl (leaf): 
// 	Defining module:      "enum-submodule"
// 	Instantiating module: "enum-module"
// 	Path from parent:     "cl"
// 	Path from root:       "/c/cl"
func (n *CPath) Cl() *C_ClPath {
	return &C_ClPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"cl"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cl (leaf): 
// 	Defining module:      "enum-submodule"
// 	Instantiating module: "enum-module"
// 	Path from parent:     "cl"
// 	Path from root:       "/c/cl"
func (n *CPathAny) Cl() *C_ClPathAny {
	return &C_ClPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"cl"},
			map[string]interface{}{},
			n,
		),
	}
}

// DevicePath represents the /device YANG schema element.
type DevicePath struct {
	*ygnmi.DeviceRootBase
}

// New returns a new path object from which YANG paths can be constructed.
func New() *DevicePath {
	return &DevicePath{ygnmi.NewDeviceRootBase()}
}

// AListAny (list): 
// 	Defining module:      "enum-module"
// 	Instantiating module: "enum-module"
// 	Path from parent:     "a-lists/a-list"
// 	Path from root:       "/a-lists/a-list"
func (n *DevicePath) AListAny() *AListPathAny {
	return &AListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a-lists", "a-list"},
			map[string]interface{}{"value": "*"},
			n,
		),
	}
}

// AList (list): 
// 	Defining module:      "enum-module"
// 	Instantiating module: "enum-module"
// 	Path from parent:     "a-lists/a-list"
// 	Path from root:       "/a-lists/a-list"
//
// 	Value: [UnionUint32, E_EnumTypes_Td_Enum]
func (n *DevicePath) AList(Value AList_Value_Union) *AListPath {
	return &AListPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"a-lists", "a-list"},
			map[string]interface{}{"value": Value},
			n,
		),
	}
}

// BListAny (list): 
// 	Defining module:      "enum-module"
// 	Instantiating module: "enum-module"
// 	Path from parent:     "b-lists/b-list"
// 	Path from root:       "/b-lists/b-list"
func (n *DevicePath) BListAny() *BListPathAny {
	return &BListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b-lists", "b-list"},
			map[string]interface{}{"value": "*"},
			n,
		),
	}
}

// BList (list): 
// 	Defining module:      "enum-module"
// 	Instantiating module: "enum-module"
// 	Path from parent:     "b-lists/b-list"
// 	Path from root:       "/b-lists/b-list"
//
// 	Value: [UnionUint32, E_EnumTypes_Td_Enum]
func (n *DevicePath) BList(Value BList_Value_Union) *BListPath {
	return &BListPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"b-lists", "b-list"},
			map[string]interface{}{"value": Value},
			n,
		),
	}
}

// C (container): 
// 	Defining module:      "enum-submodule"
// 	Instantiating module: "enum-module"
// 	Path from parent:     "c"
// 	Path from root:       "/c"
func (n *DevicePath) C() *CPath {
	return &CPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"c"},
			map[string]interface{}{},
			n,
		),
	}
}

// Parent (container): 
// 	Defining module:      "enum-module"
// 	Instantiating module: "enum-module"
// 	Path from parent:     "parent"
// 	Path from root:       "/parent"
func (n *DevicePath) Parent() *ParentPath {
	return &ParentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"parent"},
			map[string]interface{}{},
			n,
		),
	}
}

// ParentPath represents the /enum-module/parent YANG schema element.
type ParentPath struct {
	*ygnmi.NodePath
}

// ParentPathAny represents the wildcard version of the /enum-module/parent YANG schema element.
type ParentPathAny struct {
	*ygnmi.NodePath
}

// Child (container): 
// 	Defining module:      "enum-module"
// 	Instantiating module: "enum-module"
// 	Path from parent:     "child"
// 	Path from root:       "/parent/child"
func (n *ParentPath) Child() *Parent_ChildPath {
	return &Parent_ChildPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"child"},
			map[string]interface{}{},
			n,
		),
	}
}

// Child (container): 
// 	Defining module:      "enum-module"
// 	Instantiating module: "enum-module"
// 	Path from parent:     "child"
// 	Path from root:       "/parent/child"
func (n *ParentPathAny) Child() *Parent_ChildPathAny {
	return &Parent_ChildPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"child"},
			map[string]interface{}{},
			n,
		),
	}
}

// Parent_Child_EnumPath represents the /enum-module/parent/child/state/enum YANG schema element.
type Parent_Child_EnumPath struct {
	*ygnmi.NodePath
}

// Parent_Child_EnumPathAny represents the wildcard version of the /enum-module/parent/child/state/enum YANG schema element.
type Parent_Child_EnumPathAny struct {
	*ygnmi.NodePath
}

// Parent_Child_IdPath represents the /enum-module/parent/child/state/id YANG schema element.
type Parent_Child_IdPath struct {
	*ygnmi.NodePath
}

// Parent_Child_IdPathAny represents the wildcard version of the /enum-module/parent/child/state/id YANG schema element.
type Parent_Child_IdPathAny struct {
	*ygnmi.NodePath
}

// Parent_Child_Id2Path represents the /enum-module/parent/child/state/id2 YANG schema element.
type Parent_Child_Id2Path struct {
	*ygnmi.NodePath
}

// Parent_Child_Id2PathAny represents the wildcard version of the /enum-module/parent/child/state/id2 YANG schema element.
type Parent_Child_Id2PathAny struct {
	*ygnmi.NodePath
}

// Parent_Child_InlineEnumPath represents the /enum-module/parent/child/state/inline-enum YANG schema element.
type Parent_Child_InlineEnumPath struct {
	*ygnmi.NodePath
}

// Parent_Child_InlineEnumPathAny represents the wildcard version of the /enum-module/parent/child/state/inline-enum YANG schema element.
type Parent_Child_InlineEnumPathAny struct {
	*ygnmi.NodePath
}

// Parent_ChildPath represents the /enum-module/parent/child YANG schema element.
type Parent_ChildPath struct {
	*ygnmi.NodePath
}

// Parent_ChildPathAny represents the wildcard version of the /enum-module/parent/child YANG schema element.
type Parent_ChildPathAny struct {
	*ygnmi.NodePath
}

// Enum (leaf): 
// 	Defining module:      "enum-module"
// 	Instantiating module: "enum-module"
// 	Path from parent:     "state/enum"
// 	Path from root:       "/parent/child/state/enum"
func (n *Parent_ChildPath) Enum() *Parent_Child_EnumPath {
	return &Parent_Child_EnumPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "enum"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enum (leaf): 
// 	Defining module:      "enum-module"
// 	Instantiating module: "enum-module"
// 	Path from parent:     "state/enum"
// 	Path from root:       "/parent/child/state/enum"
func (n *Parent_ChildPathAny) Enum() *Parent_Child_EnumPathAny {
	return &Parent_Child_EnumPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "enum"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): 
// 	Defining module:      "enum-module"
// 	Instantiating module: "enum-module"
// 	Path from parent:     "state/id"
// 	Path from root:       "/parent/child/state/id"
func (n *Parent_ChildPath) Id() *Parent_Child_IdPath {
	return &Parent_Child_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): 
// 	Defining module:      "enum-module"
// 	Instantiating module: "enum-module"
// 	Path from parent:     "state/id"
// 	Path from root:       "/parent/child/state/id"
func (n *Parent_ChildPathAny) Id() *Parent_Child_IdPathAny {
	return &Parent_Child_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id2 (leaf): 
// 	Defining module:      "enum-module"
// 	Instantiating module: "enum-module"
// 	Path from parent:     "state/id2"
// 	Path from root:       "/parent/child/state/id2"
func (n *Parent_ChildPath) Id2() *Parent_Child_Id2Path {
	return &Parent_Child_Id2Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "id2"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id2 (leaf): 
// 	Defining module:      "enum-module"
// 	Instantiating module: "enum-module"
// 	Path from parent:     "state/id2"
// 	Path from root:       "/parent/child/state/id2"
func (n *Parent_ChildPathAny) Id2() *Parent_Child_Id2PathAny {
	return &Parent_Child_Id2PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "id2"},
			map[string]interface{}{},
			n,
		),
	}
}

// InlineEnum (leaf): 
// 	Defining module:      "enum-module"
// 	Instantiating module: "enum-module"
// 	Path from parent:     "state/inline-enum"
// 	Path from root:       "/parent/child/state/inline-enum"
func (n *Parent_ChildPath) InlineEnum() *Parent_Child_InlineEnumPath {
	return &Parent_Child_InlineEnumPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "inline-enum"},
			map[string]interface{}{},
			n,
		),
	}
}

// InlineEnum (leaf): 
// 	Defining module:      "enum-module"
// 	Instantiating module: "enum-module"
// 	Path from parent:     "state/inline-enum"
// 	Path from root:       "/parent/child/state/inline-enum"
func (n *Parent_ChildPathAny) InlineEnum() *Parent_Child_InlineEnumPathAny {
	return &Parent_Child_InlineEnumPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "inline-enum"},
			map[string]interface{}{},
			n,
		),
	}
}
