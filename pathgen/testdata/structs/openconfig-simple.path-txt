// Code generated by pathgen-tests. DO NOT EDIT.

/*
Package ocstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- testdata/yang/openconfig-simple.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"reflect"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygnmi/ygmni"
	"github.com/openconfig/ygot/ytypes"
)

// DevicePath represents the /device YANG schema element.
type DevicePath struct {
	*ygnmi.DeviceRootBase
}

// Root returns a root path object from which YANG paths can be constructed.
func Root() *DevicePath {
	return &DevicePath{ygnmi.NewDeviceRootBase()}
}

// Parent (container): I am a parent container
// that has 4 children.
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "parent"
// 	Path from root:       "/parent"
func (n *DevicePath) Parent() *ParentPath {
	ps := &ParentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"parent"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RemoteContainer (container): 
// 	Defining module:      "openconfig-remote"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "remote-container"
// 	Path from root:       "/remote-container"
func (n *DevicePath) RemoteContainer() *RemoteContainerPath {
	ps := &RemoteContainerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-container"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ParentPath represents the /openconfig-simple/parent YANG schema element.
type ParentPath struct {
	*ygnmi.NodePath
}

// ParentPathAny represents the wildcard version of the /openconfig-simple/parent YANG schema element.
type ParentPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *ParentPath) PathOriginName() string {
     return "openconfig"
}

// Child (container): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "child"
// 	Path from root:       "/parent/child"
func (n *ParentPath) Child() *Parent_ChildPath {
	ps := &Parent_ChildPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"child"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Child (container): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "child"
// 	Path from root:       "/parent/child"
func (n *ParentPathAny) Child() *Parent_ChildPathAny {
	ps := &Parent_ChildPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"child"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Parent_Child_FivePath represents the /openconfig-simple/parent/child/state/five YANG schema element.
type Parent_Child_FivePath struct {
	*ygnmi.NodePath
}

// Parent_Child_FivePathAny represents the wildcard version of the /openconfig-simple/parent/child/state/five YANG schema element.
type Parent_Child_FivePathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Parent_Child_FivePath) PathOriginName() string {
     return ""
}

// Parent_Child_FourPath represents the /openconfig-simple/parent/child/state/four YANG schema element.
type Parent_Child_FourPath struct {
	*ygnmi.NodePath
}

// Parent_Child_FourPathAny represents the wildcard version of the /openconfig-simple/parent/child/state/four YANG schema element.
type Parent_Child_FourPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Parent_Child_FourPath) PathOriginName() string {
     return ""
}

// Parent_Child_OnePath represents the /openconfig-simple/parent/child/state/one YANG schema element.
type Parent_Child_OnePath struct {
	*ygnmi.NodePath
}

// Parent_Child_OnePathAny represents the wildcard version of the /openconfig-simple/parent/child/state/one YANG schema element.
type Parent_Child_OnePathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Parent_Child_OnePath) PathOriginName() string {
     return ""
}

// Parent_Child_SixPath represents the /openconfig-simple/parent/child/state/six YANG schema element.
type Parent_Child_SixPath struct {
	*ygnmi.NodePath
}

// Parent_Child_SixPathAny represents the wildcard version of the /openconfig-simple/parent/child/state/six YANG schema element.
type Parent_Child_SixPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Parent_Child_SixPath) PathOriginName() string {
     return ""
}

// Parent_Child_ThreePath represents the /openconfig-simple/parent/child/state/three YANG schema element.
type Parent_Child_ThreePath struct {
	*ygnmi.NodePath
}

// Parent_Child_ThreePathAny represents the wildcard version of the /openconfig-simple/parent/child/state/three YANG schema element.
type Parent_Child_ThreePathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Parent_Child_ThreePath) PathOriginName() string {
     return ""
}

// Parent_Child_TwoPath represents the /openconfig-simple/parent/child/state/two YANG schema element.
type Parent_Child_TwoPath struct {
	*ygnmi.NodePath
}

// Parent_Child_TwoPathAny represents the wildcard version of the /openconfig-simple/parent/child/state/two YANG schema element.
type Parent_Child_TwoPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Parent_Child_TwoPath) PathOriginName() string {
     return ""
}

// Parent_ChildPath represents the /openconfig-simple/parent/child YANG schema element.
type Parent_ChildPath struct {
	*ygnmi.NodePath
}

// Parent_ChildPathAny represents the wildcard version of the /openconfig-simple/parent/child YANG schema element.
type Parent_ChildPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Parent_ChildPath) PathOriginName() string {
     return "openconfig"
}

// Five (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/five"
// 	Path from root:       "/parent/child/state/five"
func (n *Parent_ChildPath) Five() *Parent_Child_FivePath {
	ps := &Parent_Child_FivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "five"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Five (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/five"
// 	Path from root:       "/parent/child/state/five"
func (n *Parent_ChildPathAny) Five() *Parent_Child_FivePathAny {
	ps := &Parent_Child_FivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "five"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Four (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/four"
// 	Path from root:       "/parent/child/state/four"
func (n *Parent_ChildPath) Four() *Parent_Child_FourPath {
	ps := &Parent_Child_FourPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "four"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Four (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/four"
// 	Path from root:       "/parent/child/state/four"
func (n *Parent_ChildPathAny) Four() *Parent_Child_FourPathAny {
	ps := &Parent_Child_FourPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "four"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// One (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/one"
// 	Path from root:       "/parent/child/state/one"
func (n *Parent_ChildPath) One() *Parent_Child_OnePath {
	ps := &Parent_Child_OnePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "one"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// One (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/one"
// 	Path from root:       "/parent/child/state/one"
func (n *Parent_ChildPathAny) One() *Parent_Child_OnePathAny {
	ps := &Parent_Child_OnePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "one"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Six (leaf-list): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/six"
// 	Path from root:       "/parent/child/state/six"
func (n *Parent_ChildPath) Six() *Parent_Child_SixPath {
	ps := &Parent_Child_SixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "six"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Six (leaf-list): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/six"
// 	Path from root:       "/parent/child/state/six"
func (n *Parent_ChildPathAny) Six() *Parent_Child_SixPathAny {
	ps := &Parent_Child_SixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "six"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Three (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/three"
// 	Path from root:       "/parent/child/state/three"
func (n *Parent_ChildPath) Three() *Parent_Child_ThreePath {
	ps := &Parent_Child_ThreePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "three"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Three (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/three"
// 	Path from root:       "/parent/child/state/three"
func (n *Parent_ChildPathAny) Three() *Parent_Child_ThreePathAny {
	ps := &Parent_Child_ThreePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "three"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Two (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/two"
// 	Path from root:       "/parent/child/state/two"
func (n *Parent_ChildPath) Two() *Parent_Child_TwoPath {
	ps := &Parent_Child_TwoPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "two"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Two (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/two"
// 	Path from root:       "/parent/child/state/two"
func (n *Parent_ChildPathAny) Two() *Parent_Child_TwoPathAny {
	ps := &Parent_Child_TwoPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "two"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RemoteContainer_ALeafPath represents the /openconfig-simple/remote-container/state/a-leaf YANG schema element.
type RemoteContainer_ALeafPath struct {
	*ygnmi.NodePath
}

// RemoteContainer_ALeafPathAny represents the wildcard version of the /openconfig-simple/remote-container/state/a-leaf YANG schema element.
type RemoteContainer_ALeafPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *RemoteContainer_ALeafPath) PathOriginName() string {
     return ""
}

// RemoteContainerPath represents the /openconfig-simple/remote-container YANG schema element.
type RemoteContainerPath struct {
	*ygnmi.NodePath
}

// RemoteContainerPathAny represents the wildcard version of the /openconfig-simple/remote-container YANG schema element.
type RemoteContainerPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *RemoteContainerPath) PathOriginName() string {
     return "openconfig"
}

// ALeaf (leaf): 
// 	Defining module:      "openconfig-remote"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/a-leaf"
// 	Path from root:       "/remote-container/state/a-leaf"
func (n *RemoteContainerPath) ALeaf() *RemoteContainer_ALeafPath {
	ps := &RemoteContainer_ALeafPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "a-leaf"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ALeaf (leaf): 
// 	Defining module:      "openconfig-remote"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/a-leaf"
// 	Path from root:       "/remote-container/state/a-leaf"
func (n *RemoteContainerPathAny) ALeaf() *RemoteContainer_ALeafPathAny {
	ps := &RemoteContainer_ALeafPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "a-leaf"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}
