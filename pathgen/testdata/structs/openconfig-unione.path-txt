// Code generated by pathgen-tests. DO NOT EDIT.

/*
Package ocstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- testdata/yang/openconfig-unione.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"reflect"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygnmi/ygmni"
	"github.com/openconfig/ygot/ytypes"
)

// Component_E1Path represents the /openconfig-unione/platform/component/state/e1 YANG schema element.
type Component_E1Path struct {
	*ygnmi.NodePath
}

// Component_E1PathAny represents the wildcard version of the /openconfig-unione/platform/component/state/e1 YANG schema element.
type Component_E1PathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Component_E1Path) PathOriginName() string {
     return ""
}

// Component_EnumeratedPath represents the /openconfig-unione/platform/component/state/enumerated YANG schema element.
type Component_EnumeratedPath struct {
	*ygnmi.NodePath
}

// Component_EnumeratedPathAny represents the wildcard version of the /openconfig-unione/platform/component/state/enumerated YANG schema element.
type Component_EnumeratedPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Component_EnumeratedPath) PathOriginName() string {
     return ""
}

// Component_NamePath represents the /openconfig-unione/platform/component/state/name YANG schema element.
type Component_NamePath struct {
	*ygnmi.NodePath
}

// Component_NamePathAny represents the wildcard version of the /openconfig-unione/platform/component/state/name YANG schema element.
type Component_NamePathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Component_NamePath) PathOriginName() string {
     return ""
}

// Component_PowerPath represents the /openconfig-unione/platform/component/state/power YANG schema element.
type Component_PowerPath struct {
	*ygnmi.NodePath
}

// Component_PowerPathAny represents the wildcard version of the /openconfig-unione/platform/component/state/power YANG schema element.
type Component_PowerPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Component_PowerPath) PathOriginName() string {
     return ""
}

// Component_R1Path represents the /openconfig-unione/platform/component/state/r1 YANG schema element.
type Component_R1Path struct {
	*ygnmi.NodePath
}

// Component_R1PathAny represents the wildcard version of the /openconfig-unione/platform/component/state/r1 YANG schema element.
type Component_R1PathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Component_R1Path) PathOriginName() string {
     return ""
}

// Component_TypePath represents the /openconfig-unione/platform/component/state/type YANG schema element.
type Component_TypePath struct {
	*ygnmi.NodePath
}

// Component_TypePathAny represents the wildcard version of the /openconfig-unione/platform/component/state/type YANG schema element.
type Component_TypePathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Component_TypePath) PathOriginName() string {
     return ""
}

// ComponentPath represents the /openconfig-unione/platform/component YANG schema element.
type ComponentPath struct {
	*ygnmi.NodePath
}

// ComponentPathAny represents the wildcard version of the /openconfig-unione/platform/component YANG schema element.
type ComponentPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *ComponentPath) PathOriginName() string {
     return "openconfig"
}

// ComponentPathMap represents the /openconfig-unione/platform/component YANG schema element.
type ComponentPathMap struct {
	*ygnmi.NodePath
}

// ComponentPathMapAny represents the wildcard version of the /openconfig-unione/platform/component YANG schema element.
type ComponentPathMapAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *ComponentPathMap) PathOriginName() string {
     return "openconfig"
}

// E1 (leaf): 
// 	Defining module:      "openconfig-unione"
// 	Instantiating module: "openconfig-unione"
// 	Path from parent:     "state/e1"
// 	Path from root:       "/platform/component/state/e1"
func (n *ComponentPath) E1() *Component_E1Path {
	ps := &Component_E1Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "e1"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// E1 (leaf): 
// 	Defining module:      "openconfig-unione"
// 	Instantiating module: "openconfig-unione"
// 	Path from parent:     "state/e1"
// 	Path from root:       "/platform/component/state/e1"
func (n *ComponentPathAny) E1() *Component_E1PathAny {
	ps := &Component_E1PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "e1"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enumerated (leaf): 
// 	Defining module:      "openconfig-unione"
// 	Instantiating module: "openconfig-unione"
// 	Path from parent:     "state/enumerated"
// 	Path from root:       "/platform/component/state/enumerated"
func (n *ComponentPath) Enumerated() *Component_EnumeratedPath {
	ps := &Component_EnumeratedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "enumerated"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enumerated (leaf): 
// 	Defining module:      "openconfig-unione"
// 	Instantiating module: "openconfig-unione"
// 	Path from parent:     "state/enumerated"
// 	Path from root:       "/platform/component/state/enumerated"
func (n *ComponentPathAny) Enumerated() *Component_EnumeratedPathAny {
	ps := &Component_EnumeratedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "enumerated"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Name (leaf): 
// 	Defining module:      "openconfig-unione"
// 	Instantiating module: "openconfig-unione"
// 	Path from parent:     "state/name"
// 	Path from root:       "/platform/component/state/name"
func (n *ComponentPath) Name() *Component_NamePath {
	ps := &Component_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Name (leaf): 
// 	Defining module:      "openconfig-unione"
// 	Instantiating module: "openconfig-unione"
// 	Path from parent:     "state/name"
// 	Path from root:       "/platform/component/state/name"
func (n *ComponentPathAny) Name() *Component_NamePathAny {
	ps := &Component_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Power (leaf): 
// 	Defining module:      "openconfig-unione"
// 	Instantiating module: "openconfig-unione"
// 	Path from parent:     "state/power"
// 	Path from root:       "/platform/component/state/power"
func (n *ComponentPath) Power() *Component_PowerPath {
	ps := &Component_PowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Power (leaf): 
// 	Defining module:      "openconfig-unione"
// 	Instantiating module: "openconfig-unione"
// 	Path from parent:     "state/power"
// 	Path from root:       "/platform/component/state/power"
func (n *ComponentPathAny) Power() *Component_PowerPathAny {
	ps := &Component_PowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// R1 (leaf): 
// 	Defining module:      "openconfig-unione"
// 	Instantiating module: "openconfig-unione"
// 	Path from parent:     "state/r1"
// 	Path from root:       "/platform/component/state/r1"
func (n *ComponentPath) R1() *Component_R1Path {
	ps := &Component_R1Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "r1"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// R1 (leaf): 
// 	Defining module:      "openconfig-unione"
// 	Instantiating module: "openconfig-unione"
// 	Path from parent:     "state/r1"
// 	Path from root:       "/platform/component/state/r1"
func (n *ComponentPathAny) R1() *Component_R1PathAny {
	ps := &Component_R1PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "r1"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): 
// 	Defining module:      "openconfig-unione"
// 	Instantiating module: "openconfig-unione"
// 	Path from parent:     "state/type"
// 	Path from root:       "/platform/component/state/type"
func (n *ComponentPath) Type() *Component_TypePath {
	ps := &Component_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): 
// 	Defining module:      "openconfig-unione"
// 	Instantiating module: "openconfig-unione"
// 	Path from parent:     "state/type"
// 	Path from root:       "/platform/component/state/type"
func (n *ComponentPathAny) Type() *Component_TypePathAny {
	ps := &Component_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DevicePath represents the /device YANG schema element.
type DevicePath struct {
	*ygnmi.DeviceRootBase
}

// Root returns a root path object from which YANG paths can be constructed.
func Root() *DevicePath {
	return &DevicePath{ygnmi.NewDeviceRootBase()}
}

// ComponentAny (list): 
// 	Defining module:      "openconfig-unione"
// 	Instantiating module: "openconfig-unione"
// 	Path from parent:     "platform/component"
// 	Path from root:       "/platform/component"
func (n *DevicePath) ComponentAny() *ComponentPathAny {
	ps := &ComponentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"platform", "component"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Component (list): 
// 	Defining module:      "openconfig-unione"
// 	Instantiating module: "openconfig-unione"
// 	Path from parent:     "platform/component"
// 	Path from root:       "/platform/component"
//
// 	Name: string
func (n *DevicePath) Component(Name string) *ComponentPath {
	ps := &ComponentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"platform", "component"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// ComponentMap (list): 
// 	Defining module:      "openconfig-unione"
// 	Instantiating module: "openconfig-unione"
// 	Path from parent:     "platform/component"
// 	Path from root:       "/platform/component"
func (n *DevicePath) ComponentMap() *ComponentPathMap {
	ps := &ComponentPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"platform"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DupEnum (container): 
// 	Defining module:      "openconfig-unione"
// 	Instantiating module: "openconfig-unione"
// 	Path from parent:     "dup-enum"
// 	Path from root:       "/dup-enum"
func (n *DevicePath) DupEnum() *DupEnumPath {
	ps := &DupEnumPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dup-enum"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DupEnum_APath represents the /openconfig-unione/dup-enum/state/A YANG schema element.
type DupEnum_APath struct {
	*ygnmi.NodePath
}

// DupEnum_APathAny represents the wildcard version of the /openconfig-unione/dup-enum/state/A YANG schema element.
type DupEnum_APathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *DupEnum_APath) PathOriginName() string {
     return ""
}

// DupEnum_BPath represents the /openconfig-unione/dup-enum/state/B YANG schema element.
type DupEnum_BPath struct {
	*ygnmi.NodePath
}

// DupEnum_BPathAny represents the wildcard version of the /openconfig-unione/dup-enum/state/B YANG schema element.
type DupEnum_BPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *DupEnum_BPath) PathOriginName() string {
     return ""
}

// DupEnumPath represents the /openconfig-unione/dup-enum YANG schema element.
type DupEnumPath struct {
	*ygnmi.NodePath
}

// DupEnumPathAny represents the wildcard version of the /openconfig-unione/dup-enum YANG schema element.
type DupEnumPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *DupEnumPath) PathOriginName() string {
     return "openconfig"
}

// A (leaf): 
// 	Defining module:      "openconfig-unione"
// 	Instantiating module: "openconfig-unione"
// 	Path from parent:     "state/A"
// 	Path from root:       "/dup-enum/state/A"
func (n *DupEnumPath) A() *DupEnum_APath {
	ps := &DupEnum_APath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "A"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// A (leaf): 
// 	Defining module:      "openconfig-unione"
// 	Instantiating module: "openconfig-unione"
// 	Path from parent:     "state/A"
// 	Path from root:       "/dup-enum/state/A"
func (n *DupEnumPathAny) A() *DupEnum_APathAny {
	ps := &DupEnum_APathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "A"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// B (leaf): 
// 	Defining module:      "openconfig-unione"
// 	Instantiating module: "openconfig-unione"
// 	Path from parent:     "state/B"
// 	Path from root:       "/dup-enum/state/B"
func (n *DupEnumPath) B() *DupEnum_BPath {
	ps := &DupEnum_BPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "B"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// B (leaf): 
// 	Defining module:      "openconfig-unione"
// 	Instantiating module: "openconfig-unione"
// 	Path from parent:     "state/B"
// 	Path from root:       "/dup-enum/state/B"
func (n *DupEnumPathAny) B() *DupEnum_BPathAny {
	ps := &DupEnum_BPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "B"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}
