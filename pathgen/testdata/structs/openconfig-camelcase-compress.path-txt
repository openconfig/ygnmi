// Code generated by pathgen-tests. DO NOT EDIT.

/*
Package ocstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- testdata/yang/openconfig-camelcase.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"reflect"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygnmi/ygmni"
	"github.com/openconfig/ygot/ytypes"
)

// BGPPath represents the /openconfig-camelcase/bgp YANG schema element.
type BGPPath struct {
	*ygnmi.NodePath
}

// BGPPathAny represents the wildcard version of the /openconfig-camelcase/bgp YANG schema element.
type BGPPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *BGPPath) PathOriginName() string {
     return "openconfig"
}

// NeighborAny (list): 
// 	Defining module:      "openconfig-camelcase"
// 	Instantiating module: "openconfig-camelcase"
// 	Path from parent:     "neighbors/neighbor"
// 	Path from root:       "/bgp/neighbors/neighbor"
func (n *BGPPath) NeighborAny() *BGP_NeighborPathAny {
	ps := &BGP_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"peer-ip": "*"},
			n,
		),
	}
	return ps
}

// NeighborAny (list): 
// 	Defining module:      "openconfig-camelcase"
// 	Instantiating module: "openconfig-camelcase"
// 	Path from parent:     "neighbors/neighbor"
// 	Path from root:       "/bgp/neighbors/neighbor"
func (n *BGPPathAny) NeighborAny() *BGP_NeighborPathAny {
	ps := &BGP_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"peer-ip": "*"},
			n,
		),
	}
	return ps
}

// Neighbor (list): 
// 	Defining module:      "openconfig-camelcase"
// 	Instantiating module: "openconfig-camelcase"
// 	Path from parent:     "neighbors/neighbor"
// 	Path from root:       "/bgp/neighbors/neighbor"
//
// 	PeerIP: string
func (n *BGPPath) Neighbor(PeerIP string) *BGP_NeighborPath {
	ps := &BGP_NeighborPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"peer-ip": PeerIP},
			n,
		),
	}
	return ps
}

// Neighbor (list): 
// 	Defining module:      "openconfig-camelcase"
// 	Instantiating module: "openconfig-camelcase"
// 	Path from parent:     "neighbors/neighbor"
// 	Path from root:       "/bgp/neighbors/neighbor"
//
// 	PeerIP: string
func (n *BGPPathAny) Neighbor(PeerIP string) *BGP_NeighborPathAny {
	ps := &BGP_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"peer-ip": PeerIP},
			n,
		),
	}
	return ps
}

// NeighborMap (list): 
// 	Defining module:      "openconfig-camelcase"
// 	Instantiating module: "openconfig-camelcase"
// 	Path from parent:     "neighbors/neighbor"
// 	Path from root:       "/bgp/neighbors/neighbor"
func (n *BGPPath) NeighborMap() *BGP_NeighborPathMap {
	ps := &BGP_NeighborPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NeighborMap (list): 
// 	Defining module:      "openconfig-camelcase"
// 	Instantiating module: "openconfig-camelcase"
// 	Path from parent:     "neighbors/neighbor"
// 	Path from root:       "/bgp/neighbors/neighbor"
func (n *BGPPathAny) NeighborMap() *BGP_NeighborPathMapAny {
	ps := &BGP_NeighborPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// BGP_Neighbor_PeerIPPath represents the /openconfig-camelcase/bgp/neighbors/neighbor/state/peer-ip YANG schema element.
type BGP_Neighbor_PeerIPPath struct {
	*ygnmi.NodePath
}

// BGP_Neighbor_PeerIPPathAny represents the wildcard version of the /openconfig-camelcase/bgp/neighbors/neighbor/state/peer-ip YANG schema element.
type BGP_Neighbor_PeerIPPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *BGP_Neighbor_PeerIPPath) PathOriginName() string {
     return ""
}

// BGP_NeighborPath represents the /openconfig-camelcase/bgp/neighbors/neighbor YANG schema element.
type BGP_NeighborPath struct {
	*ygnmi.NodePath
}

// BGP_NeighborPathAny represents the wildcard version of the /openconfig-camelcase/bgp/neighbors/neighbor YANG schema element.
type BGP_NeighborPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *BGP_NeighborPath) PathOriginName() string {
     return "openconfig"
}

// BGP_NeighborPathMap represents the /openconfig-camelcase/bgp/neighbors/neighbor YANG schema element.
type BGP_NeighborPathMap struct {
	*ygnmi.NodePath
}

// BGP_NeighborPathMapAny represents the wildcard version of the /openconfig-camelcase/bgp/neighbors/neighbor YANG schema element.
type BGP_NeighborPathMapAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *BGP_NeighborPathMap) PathOriginName() string {
     return "openconfig"
}

// PeerIP (leaf): 
// 	Defining module:      "openconfig-camelcase"
// 	Instantiating module: "openconfig-camelcase"
// 	Path from parent:     "state/peer-ip"
// 	Path from root:       "/bgp/neighbors/neighbor/state/peer-ip"
func (n *BGP_NeighborPath) PeerIP() *BGP_Neighbor_PeerIPPath {
	ps := &BGP_Neighbor_PeerIPPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PeerIP (leaf): 
// 	Defining module:      "openconfig-camelcase"
// 	Instantiating module: "openconfig-camelcase"
// 	Path from parent:     "state/peer-ip"
// 	Path from root:       "/bgp/neighbors/neighbor/state/peer-ip"
func (n *BGP_NeighborPathAny) PeerIP() *BGP_Neighbor_PeerIPPathAny {
	ps := &BGP_Neighbor_PeerIPPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DevicePath represents the /device YANG schema element.
type DevicePath struct {
	*ygnmi.DeviceRootBase
}

// Root returns a root path object from which YANG paths can be constructed.
func Root() *DevicePath {
	return &DevicePath{ygnmi.NewDeviceRootBase()}
}

// BGP (container): 
// 	Defining module:      "openconfig-camelcase"
// 	Instantiating module: "openconfig-camelcase"
// 	Path from parent:     "bgp"
// 	Path from root:       "/bgp"
func (n *DevicePath) BGP() *BGPPath {
	ps := &BGPPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bgp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}
