// Code generated by pathgen-tests. DO NOT EDIT.

/*
Package openconfigwithlistpath is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- testdata/yang/openconfig-withlist.yang
Imported modules were sourced from:
*/
package openconfigwithlistpath

import (
	"reflect"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygnmi/ygmni"
	"github.com/openconfig/ygot/ytypes"
)

// ModelPath represents the /openconfig-withlist/model YANG schema element.
type ModelPath struct {
	*ygnmi.NodePath
}

// ModelPathAny represents the wildcard version of the /openconfig-withlist/model YANG schema element.
type ModelPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *ModelPath) PathOriginName() string {
     return "openconfig"
}

// AtomicListMap (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "atomic-lists/atomic-list"
// 	Path from root:       "/model/atomic-lists/atomic-list"
func (n *ModelPath) AtomicListMap() *Model_AtomicListPathMap {
	ps := &Model_AtomicListPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-lists"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AtomicListMap (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "atomic-lists/atomic-list"
// 	Path from root:       "/model/atomic-lists/atomic-list"
func (n *ModelPathAny) AtomicListMap() *Model_AtomicListPathMapAny {
	ps := &Model_AtomicListPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-lists"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AtomicListElementAny (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "atomic-list-elements/atomic-list-element"
// 	Path from root:       "/model/atomic-list-elements/atomic-list-element"
func (n *ModelPath) AtomicListElementAny() *Model_AtomicListElementPathAny {
	ps := &Model_AtomicListElementPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-list-elements", "atomic-list-element"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
	return ps
}

// AtomicListElementAny (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "atomic-list-elements/atomic-list-element"
// 	Path from root:       "/model/atomic-list-elements/atomic-list-element"
func (n *ModelPathAny) AtomicListElementAny() *Model_AtomicListElementPathAny {
	ps := &Model_AtomicListElementPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-list-elements", "atomic-list-element"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
	return ps
}

// AtomicListElement (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "atomic-list-elements/atomic-list-element"
// 	Path from root:       "/model/atomic-list-elements/atomic-list-element"
//
// 	Key: string
func (n *ModelPath) AtomicListElement(Key string) *Model_AtomicListElementPath {
	ps := &Model_AtomicListElementPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-list-elements", "atomic-list-element"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
	return ps
}

// AtomicListElement (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "atomic-list-elements/atomic-list-element"
// 	Path from root:       "/model/atomic-list-elements/atomic-list-element"
//
// 	Key: string
func (n *ModelPathAny) AtomicListElement(Key string) *Model_AtomicListElementPathAny {
	ps := &Model_AtomicListElementPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-list-elements", "atomic-list-element"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
	return ps
}

// AtomicListElementMap (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "atomic-list-elements/atomic-list-element"
// 	Path from root:       "/model/atomic-list-elements/atomic-list-element"
func (n *ModelPath) AtomicListElementMap() *Model_AtomicListElementPathMap {
	ps := &Model_AtomicListElementPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-list-elements"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AtomicListElementMap (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "atomic-list-elements/atomic-list-element"
// 	Path from root:       "/model/atomic-list-elements/atomic-list-element"
func (n *ModelPathAny) AtomicListElementMap() *Model_AtomicListElementPathMapAny {
	ps := &Model_AtomicListElementPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-list-elements"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MultiKeyAny (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "b/multi-key"
// 	Path from root:       "/model/b/multi-key"
func (n *ModelPath) MultiKeyAny() *Model_MultiKeyPathAny {
	ps := &Model_MultiKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": "*", "key2": "*"},
			n,
		),
	}
	return ps
}

// MultiKeyAny (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "b/multi-key"
// 	Path from root:       "/model/b/multi-key"
func (n *ModelPathAny) MultiKeyAny() *Model_MultiKeyPathAny {
	ps := &Model_MultiKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": "*", "key2": "*"},
			n,
		),
	}
	return ps
}

// WithKey1 sets Model_MultiKeyPathAny's key "key1" to the specified value.
// Key1: uint32
func (n *Model_MultiKeyPathAny) WithKey1(Key1 uint32) *Model_MultiKeyPathAny {
	ygnmi.ModifyKey(n.NodePath, "key1", Key1)
	return n
}

// WithKey2 sets Model_MultiKeyPathAny's key "key2" to the specified value.
// Key2: uint64
func (n *Model_MultiKeyPathAny) WithKey2(Key2 uint64) *Model_MultiKeyPathAny {
	ygnmi.ModifyKey(n.NodePath, "key2", Key2)
	return n
}

// MultiKey (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "b/multi-key"
// 	Path from root:       "/model/b/multi-key"
//
// 	Key1: uint32
// 	Key2: uint64
func (n *ModelPath) MultiKey(Key1 uint32, Key2 uint64) *Model_MultiKeyPath {
	ps := &Model_MultiKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": Key1, "key2": Key2},
			n,
		),
	}
	return ps
}

// MultiKey (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "b/multi-key"
// 	Path from root:       "/model/b/multi-key"
//
// 	Key1: uint32
// 	Key2: uint64
func (n *ModelPathAny) MultiKey(Key1 uint32, Key2 uint64) *Model_MultiKeyPathAny {
	ps := &Model_MultiKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": Key1, "key2": Key2},
			n,
		),
	}
	return ps
}

// MultiKeyMap (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "b/multi-key"
// 	Path from root:       "/model/b/multi-key"
func (n *ModelPath) MultiKeyMap() *Model_MultiKeyPathMap {
	ps := &Model_MultiKeyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"b"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MultiKeyMap (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "b/multi-key"
// 	Path from root:       "/model/b/multi-key"
func (n *ModelPathAny) MultiKeyMap() *Model_MultiKeyPathMapAny {
	ps := &Model_MultiKeyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NoKeyAny (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "c/no-key"
// 	Path from root:       "/model/c/no-key"
func (n *ModelPath) NoKeyAny() *Model_NoKeyPathAny {
	ps := &Model_NoKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"c", "no-key"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NoKeyAny (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "c/no-key"
// 	Path from root:       "/model/c/no-key"
func (n *ModelPathAny) NoKeyAny() *Model_NoKeyPathAny {
	ps := &Model_NoKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"c", "no-key"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SingleKeyAny (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "a/single-key"
// 	Path from root:       "/model/a/single-key"
func (n *ModelPath) SingleKeyAny() *Model_SingleKeyPathAny {
	ps := &Model_SingleKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
	return ps
}

// SingleKeyAny (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "a/single-key"
// 	Path from root:       "/model/a/single-key"
func (n *ModelPathAny) SingleKeyAny() *Model_SingleKeyPathAny {
	ps := &Model_SingleKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
	return ps
}

// SingleKey (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "a/single-key"
// 	Path from root:       "/model/a/single-key"
//
// 	Key: string
func (n *ModelPath) SingleKey(Key string) *Model_SingleKeyPath {
	ps := &Model_SingleKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
	return ps
}

// SingleKey (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "a/single-key"
// 	Path from root:       "/model/a/single-key"
//
// 	Key: string
func (n *ModelPathAny) SingleKey(Key string) *Model_SingleKeyPathAny {
	ps := &Model_SingleKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
	return ps
}

// SingleKeyMap (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "a/single-key"
// 	Path from root:       "/model/a/single-key"
func (n *ModelPath) SingleKeyMap() *Model_SingleKeyPathMap {
	ps := &Model_SingleKeyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"a"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SingleKeyMap (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "a/single-key"
// 	Path from root:       "/model/a/single-key"
func (n *ModelPathAny) SingleKeyMap() *Model_SingleKeyPathMapAny {
	ps := &Model_SingleKeyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Model_AtomicListPath represents the /openconfig-withlist/model/atomic-lists/atomic-list YANG schema element.
type Model_AtomicListPath struct {
	*ygnmi.NodePath
}

// Model_AtomicListPathAny represents the wildcard version of the /openconfig-withlist/model/atomic-lists/atomic-list YANG schema element.
type Model_AtomicListPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Model_AtomicListPath) PathOriginName() string {
     return ""
}

// Model_AtomicListPathMap represents the /openconfig-withlist/model/atomic-lists/atomic-list YANG schema element.
type Model_AtomicListPathMap struct {
	*ygnmi.NodePath
}

// Model_AtomicListPathMapAny represents the wildcard version of the /openconfig-withlist/model/atomic-lists/atomic-list YANG schema element.
type Model_AtomicListPathMapAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Model_AtomicListPathMap) PathOriginName() string {
     return ""
}

// Model_AtomicListElementPath represents the /openconfig-withlist/model/atomic-list-elements/atomic-list-element YANG schema element.
type Model_AtomicListElementPath struct {
	*ygnmi.NodePath
}

// Model_AtomicListElementPathAny represents the wildcard version of the /openconfig-withlist/model/atomic-list-elements/atomic-list-element YANG schema element.
type Model_AtomicListElementPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Model_AtomicListElementPath) PathOriginName() string {
     return "openconfig"
}

// Model_AtomicListElementPathMap represents the /openconfig-withlist/model/atomic-list-elements/atomic-list-element YANG schema element.
type Model_AtomicListElementPathMap struct {
	*ygnmi.NodePath
}

// Model_AtomicListElementPathMapAny represents the wildcard version of the /openconfig-withlist/model/atomic-list-elements/atomic-list-element YANG schema element.
type Model_AtomicListElementPathMapAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Model_AtomicListElementPathMap) PathOriginName() string {
     return "openconfig"
}

// Model_MultiKey_Key1Path represents the /openconfig-withlist/model/b/multi-key/state/key1 YANG schema element.
type Model_MultiKey_Key1Path struct {
	*ygnmi.NodePath
}

// Model_MultiKey_Key1PathAny represents the wildcard version of the /openconfig-withlist/model/b/multi-key/state/key1 YANG schema element.
type Model_MultiKey_Key1PathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Model_MultiKey_Key1Path) PathOriginName() string {
     return ""
}

// Model_MultiKey_Key2Path represents the /openconfig-withlist/model/b/multi-key/state/key2 YANG schema element.
type Model_MultiKey_Key2Path struct {
	*ygnmi.NodePath
}

// Model_MultiKey_Key2PathAny represents the wildcard version of the /openconfig-withlist/model/b/multi-key/state/key2 YANG schema element.
type Model_MultiKey_Key2PathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Model_MultiKey_Key2Path) PathOriginName() string {
     return ""
}

// Model_MultiKeyPath represents the /openconfig-withlist/model/b/multi-key YANG schema element.
type Model_MultiKeyPath struct {
	*ygnmi.NodePath
}

// Model_MultiKeyPathAny represents the wildcard version of the /openconfig-withlist/model/b/multi-key YANG schema element.
type Model_MultiKeyPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Model_MultiKeyPath) PathOriginName() string {
     return "openconfig"
}

// Model_MultiKeyPathMap represents the /openconfig-withlist/model/b/multi-key YANG schema element.
type Model_MultiKeyPathMap struct {
	*ygnmi.NodePath
}

// Model_MultiKeyPathMapAny represents the wildcard version of the /openconfig-withlist/model/b/multi-key YANG schema element.
type Model_MultiKeyPathMapAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Model_MultiKeyPathMap) PathOriginName() string {
     return "openconfig"
}

// Key1 (leaf): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "state/key1"
// 	Path from root:       "/model/b/multi-key/state/key1"
func (n *Model_MultiKeyPath) Key1() *Model_MultiKey_Key1Path {
	ps := &Model_MultiKey_Key1Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "key1"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Key1 (leaf): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "state/key1"
// 	Path from root:       "/model/b/multi-key/state/key1"
func (n *Model_MultiKeyPathAny) Key1() *Model_MultiKey_Key1PathAny {
	ps := &Model_MultiKey_Key1PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "key1"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Key2 (leaf): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "state/key2"
// 	Path from root:       "/model/b/multi-key/state/key2"
func (n *Model_MultiKeyPath) Key2() *Model_MultiKey_Key2Path {
	ps := &Model_MultiKey_Key2Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "key2"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Key2 (leaf): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "state/key2"
// 	Path from root:       "/model/b/multi-key/state/key2"
func (n *Model_MultiKeyPathAny) Key2() *Model_MultiKey_Key2PathAny {
	ps := &Model_MultiKey_Key2PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "key2"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Model_NoKeyPath represents the /openconfig-withlist/model/c/no-key YANG schema element.
type Model_NoKeyPath struct {
	*ygnmi.NodePath
}

// Model_NoKeyPathAny represents the wildcard version of the /openconfig-withlist/model/c/no-key YANG schema element.
type Model_NoKeyPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Model_NoKeyPath) PathOriginName() string {
     return "openconfig"
}

// Model_SingleKey_KeyPath represents the /openconfig-withlist/model/a/single-key/state/key YANG schema element.
type Model_SingleKey_KeyPath struct {
	*ygnmi.NodePath
}

// Model_SingleKey_KeyPathAny represents the wildcard version of the /openconfig-withlist/model/a/single-key/state/key YANG schema element.
type Model_SingleKey_KeyPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Model_SingleKey_KeyPath) PathOriginName() string {
     return ""
}

// Model_SingleKeyPath represents the /openconfig-withlist/model/a/single-key YANG schema element.
type Model_SingleKeyPath struct {
	*ygnmi.NodePath
}

// Model_SingleKeyPathAny represents the wildcard version of the /openconfig-withlist/model/a/single-key YANG schema element.
type Model_SingleKeyPathAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Model_SingleKeyPath) PathOriginName() string {
     return "openconfig"
}

// Model_SingleKeyPathMap represents the /openconfig-withlist/model/a/single-key YANG schema element.
type Model_SingleKeyPathMap struct {
	*ygnmi.NodePath
}

// Model_SingleKeyPathMapAny represents the wildcard version of the /openconfig-withlist/model/a/single-key YANG schema element.
type Model_SingleKeyPathMapAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Model_SingleKeyPathMap) PathOriginName() string {
     return "openconfig"
}

// Key (leaf): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "state/key"
// 	Path from root:       "/model/a/single-key/state/key"
func (n *Model_SingleKeyPath) Key() *Model_SingleKey_KeyPath {
	ps := &Model_SingleKey_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "key"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Key (leaf): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "state/key"
// 	Path from root:       "/model/a/single-key/state/key"
func (n *Model_SingleKeyPathAny) Key() *Model_SingleKey_KeyPathAny {
	ps := &Model_SingleKey_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "key"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}
