// Code generated by pathgen-tests. DO NOT EDIT.

/*
Package device is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- testdata/yang/openconfig-import.yang
Imported modules were sourced from:
*/
package device

import (
	"reflect"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygnmi/ygmni"
	"github.com/openconfig/ygot/ytypes"
	"example.com/openconfigimportpath"
	"example.com/openconfigsimpletargetpath"
)

// DevicePath represents the /device YANG schema element.
type DevicePath struct {
	*ygnmi.DeviceRootBase
}

// Root returns a root path object from which YANG paths can be constructed.
func Root() *DevicePath {
	return &DevicePath{ygnmi.NewDeviceRootBase()}
}

// Child (container): 
// 	Defining module:      "openconfig-import"
// 	Instantiating module: "openconfig-import"
// 	Path from parent:     "child"
// 	Path from root:       "/child"
func (n *DevicePath) Child() *openconfigimportpath.ChildPath {
	ps := &openconfigimportpath.ChildPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"child"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Native (container): 
// 	Defining module:      "openconfig-simple-target"
// 	Instantiating module: "openconfig-simple-target"
// 	Path from parent:     "native"
// 	Path from root:       "/native"
func (n *DevicePath) Native() *openconfigsimpletargetpath.NativePath {
	ps := &openconfigsimpletargetpath.NativePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"native"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Target (container): 
// 	Defining module:      "openconfig-simple-target"
// 	Instantiating module: "openconfig-simple-target"
// 	Path from parent:     "target"
// 	Path from root:       "/target"
func (n *DevicePath) Target() *openconfigsimpletargetpath.TargetPath {
	ps := &openconfigsimpletargetpath.TargetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"target"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}
