// Code generated by pathgen-tests. DO NOT EDIT.

/*
Package ocstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- testdata/yang/openconfig-simple.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"reflect"
	oc "github.com/openconfig/ygot/ypathgen/testdata/exampleoc"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygnmi/ygmni"
	"github.com/openconfig/ygot/ytypes"
)

// Parent_Child represents the /openconfig-simple/parent/child YANG schema element.
type Parent_Child struct {
	*ygnmi.NodePath
}

// Parent_ChildAny represents the wildcard version of the /openconfig-simple/parent/child YANG schema element.
type Parent_ChildAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Parent_Child) PathOriginName() string {
     return "openconfig"
}

// Five (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/five"
// 	Path from root:       "/parent/child/state/five"
func (n *Parent_Child) Five() *Parent_Child_Five {
	ps := &Parent_Child_Five{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "five"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Five (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/five"
// 	Path from root:       "/parent/child/state/five"
func (n *Parent_ChildAny) Five() *Parent_Child_FiveAny {
	ps := &Parent_Child_FiveAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "five"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Four (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/four"
// 	Path from root:       "/parent/child/state/four"
func (n *Parent_Child) Four() *Parent_Child_Four {
	ps := &Parent_Child_Four{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "four"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Four (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/four"
// 	Path from root:       "/parent/child/state/four"
func (n *Parent_ChildAny) Four() *Parent_Child_FourAny {
	ps := &Parent_Child_FourAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "four"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// One (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/one"
// 	Path from root:       "/parent/child/state/one"
func (n *Parent_Child) One() *Parent_Child_One {
	ps := &Parent_Child_One{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "one"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// One (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/one"
// 	Path from root:       "/parent/child/state/one"
func (n *Parent_ChildAny) One() *Parent_Child_OneAny {
	ps := &Parent_Child_OneAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "one"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Six (leaf-list): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/six"
// 	Path from root:       "/parent/child/state/six"
func (n *Parent_Child) Six() *Parent_Child_Six {
	ps := &Parent_Child_Six{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "six"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Six (leaf-list): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/six"
// 	Path from root:       "/parent/child/state/six"
func (n *Parent_ChildAny) Six() *Parent_Child_SixAny {
	ps := &Parent_Child_SixAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "six"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Three (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/three"
// 	Path from root:       "/parent/child/state/three"
func (n *Parent_Child) Three() *Parent_Child_Three {
	ps := &Parent_Child_Three{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "three"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Three (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/three"
// 	Path from root:       "/parent/child/state/three"
func (n *Parent_ChildAny) Three() *Parent_Child_ThreeAny {
	ps := &Parent_Child_ThreeAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "three"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Two (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/two"
// 	Path from root:       "/parent/child/state/two"
func (n *Parent_Child) Two() *Parent_Child_Two {
	ps := &Parent_Child_Two{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "two"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Two (leaf): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "state/two"
// 	Path from root:       "/parent/child/state/two"
func (n *Parent_ChildAny) Two() *Parent_Child_TwoAny {
	ps := &Parent_Child_TwoAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "two"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RemoteContainer_ALeaf represents the /openconfig-simple/remote-container/state/a-leaf YANG schema element.
type RemoteContainer_ALeaf struct {
	*ygnmi.NodePath
}

// RemoteContainer_ALeafAny represents the wildcard version of the /openconfig-simple/remote-container/state/a-leaf YANG schema element.
type RemoteContainer_ALeafAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *RemoteContainer_ALeaf) PathOriginName() string {
     return ""
}
