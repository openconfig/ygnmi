// Code generated by pathgen-tests. DO NOT EDIT.

/*
Package ocstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- testdata/yang/openconfig-simple.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"reflect"
	oc "github.com/openconfig/ygot/ypathgen/testdata/exampleoc"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygnmi/ygmni"
	"github.com/openconfig/ygot/ytypes"
)

// Device represents the /device YANG schema element.
type Device struct {
	*ygnmi.DeviceRootBase
}

// Root returns a root path object from which YANG paths can be constructed.
func Root() *Device {
	return &Device{ygnmi.NewDeviceRootBase()}
}

// Parent (container): I am a parent container
// that has 4 children.
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "parent"
// 	Path from root:       "/parent"
func (n *Device) Parent() *Parent {
	ps := &Parent{
		NodePath: ygnmi.NewNodePath(
			[]string{"parent"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RemoteContainer (container): 
// 	Defining module:      "openconfig-remote"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "remote-container"
// 	Path from root:       "/remote-container"
func (n *Device) RemoteContainer() *RemoteContainer {
	ps := &RemoteContainer{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-container"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Parent represents the /openconfig-simple/parent YANG schema element.
type Parent struct {
	*ygnmi.NodePath
}

// ParentAny represents the wildcard version of the /openconfig-simple/parent YANG schema element.
type ParentAny struct {
	*ygnmi.NodePath
}

// PathOrigin returns the name of the origin for the path object.
func (n *Parent) PathOriginName() string {
     return "openconfig"
}

// Child (container): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "child"
// 	Path from root:       "/parent/child"
func (n *Parent) Child() *Parent_Child {
	ps := &Parent_Child{
		NodePath: ygnmi.NewNodePath(
			[]string{"child"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Child (container): 
// 	Defining module:      "openconfig-simple"
// 	Instantiating module: "openconfig-simple"
// 	Path from parent:     "child"
// 	Path from root:       "/parent/child"
func (n *ParentAny) Child() *Parent_ChildAny {
	ps := &Parent_ChildAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"child"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}
