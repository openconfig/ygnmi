/*
Package ocstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- testdata/yang/openconfig-simple.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"reflect"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygnmi/ygmni"
	"github.com/openconfig/ygot/ytypes"
)

// Parent_ChildPath represents the /openconfig-simple/parent/child YANG schema element.
type Parent_ChildPath struct {
	*ygot.NodePath
}

// Parent_ChildPathAny represents the wildcard version of the /openconfig-simple/parent/child YANG schema element.
type Parent_ChildPathAny struct {
	*ygot.NodePath
}

// Four (leaf): 
// ----------------------------------------
// Defining module: "openconfig-simple"
// Instantiating module: "openconfig-simple"
// Path from parent: "state/four"
// Path from root: "/parent/child/state/four"
func (n *Parent_ChildPath) Four() *Parent_Child_FourPath {
	return &Parent_Child_FourPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "four"},
			map[string]interface{}{},
			n,
		),
	}
}

// Four (leaf): 
// ----------------------------------------
// Defining module: "openconfig-simple"
// Instantiating module: "openconfig-simple"
// Path from parent: "state/four"
// Path from root: "/parent/child/state/four"
func (n *Parent_ChildPathAny) Four() *Parent_Child_FourPathAny {
	return &Parent_Child_FourPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "four"},
			map[string]interface{}{},
			n,
		),
	}
}

// One (leaf): 
// ----------------------------------------
// Defining module: "openconfig-simple"
// Instantiating module: "openconfig-simple"
// Path from parent: "state/one"
// Path from root: "/parent/child/state/one"
func (n *Parent_ChildPath) One() *Parent_Child_OnePath {
	return &Parent_Child_OnePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "one"},
			map[string]interface{}{},
			n,
		),
	}
}

// One (leaf): 
// ----------------------------------------
// Defining module: "openconfig-simple"
// Instantiating module: "openconfig-simple"
// Path from parent: "state/one"
// Path from root: "/parent/child/state/one"
func (n *Parent_ChildPathAny) One() *Parent_Child_OnePathAny {
	return &Parent_Child_OnePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "one"},
			map[string]interface{}{},
			n,
		),
	}
}

// Three (leaf): 
// ----------------------------------------
// Defining module: "openconfig-simple"
// Instantiating module: "openconfig-simple"
// Path from parent: "state/three"
// Path from root: "/parent/child/state/three"
func (n *Parent_ChildPath) Three() *Parent_Child_ThreePath {
	return &Parent_Child_ThreePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "three"},
			map[string]interface{}{},
			n,
		),
	}
}

// Three (leaf): 
// ----------------------------------------
// Defining module: "openconfig-simple"
// Instantiating module: "openconfig-simple"
// Path from parent: "state/three"
// Path from root: "/parent/child/state/three"
func (n *Parent_ChildPathAny) Three() *Parent_Child_ThreePathAny {
	return &Parent_Child_ThreePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "three"},
			map[string]interface{}{},
			n,
		),
	}
}

// Two (leaf): 
// ----------------------------------------
// Defining module: "openconfig-simple"
// Instantiating module: "openconfig-simple"
// Path from parent: "state/two"
// Path from root: "/parent/child/state/two"
func (n *Parent_ChildPath) Two() *Parent_Child_TwoPath {
	return &Parent_Child_TwoPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "two"},
			map[string]interface{}{},
			n,
		),
	}
}

// Two (leaf): 
// ----------------------------------------
// Defining module: "openconfig-simple"
// Instantiating module: "openconfig-simple"
// Path from parent: "state/two"
// Path from root: "/parent/child/state/two"
func (n *Parent_ChildPathAny) Two() *Parent_Child_TwoPathAny {
	return &Parent_Child_TwoPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "two"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemoteContainer_ALeafPath represents the /openconfig-simple/remote-container/state/a-leaf YANG schema element.
type RemoteContainer_ALeafPath struct {
	*ygot.NodePath
}

// RemoteContainer_ALeafPathAny represents the wildcard version of the /openconfig-simple/remote-container/state/a-leaf YANG schema element.
type RemoteContainer_ALeafPathAny struct {
	*ygot.NodePath
}
